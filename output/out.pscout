<java.lang.ClassLoader: java.net.URL getSystemResource(java.lang.String)> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: void setLockingEnabled(boolean)> -> _SINK_ 
<android.graphics.RectF: int describeContents()> -> _SINK_ 
<java.util.HashMap: void clear()> -> _NONE_
<java.lang.StringBuilder: int codePointAt(int)> -> _SINK_ 
<android.webkit.WebView: void <init>(android.content.Context,android.util.AttributeSet,int,boolean)> android.permission.INTERNET -> _NONE_
<android.text.Layout: int getLineBottom(int)> -> _SOURCE_
<java.lang.reflect.Constructor: java.lang.annotation.Annotation getAnnotation(java.lang.Class)> -> _SOURCE_
<android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent,android.app.PendingIntent$OnFinished,android.os.Handler,java.lang.String)> -> _SINK_ 
<android.widget.AbsListView: boolean isFastScrollEnabled()> -> _NONE_
<android.hardware.Camera$Parameters: void setPreviewFrameRate(int)> -> _SINK_ 
<java.nio.CharBuffer: int hashCode()> -> _NONE_
<android.content.pm.InstrumentationInfo: void <init>(android.content.pm.InstrumentationInfo)> -> _NONE_
<android.app.Notification$Builder: android.app.Notification$Builder setPriority(int)> -> _SINK_ 
<java.lang.reflect.Constructor: boolean equals(java.lang.Object)> -> _NONE_
<android.view.View: int getScrollBarDefaultDelayBeforeFade()> -> _SOURCE_
<android.app.PendingIntent: int getCreatorUid()> -> _SOURCE_
<java.security.ProtectionDomain: java.security.Principal[] getPrincipals()> -> _SOURCE_
<android.os.Parcel: boolean hasFileDescriptors()> -> _NONE_
<android.view.View: boolean showContextMenu()> -> _NONE_
<android.graphics.Path: void transform(android.graphics.Matrix)> -> _NONE_
<android.net.wifi.WifiEnterpriseConfig: void setAnonymousIdentity(java.lang.String)> -> _SINK_ 
<org.apache.http.util.CharArrayBuffer: void append(org.apache.http.util.ByteArrayBuffer,int,int)> -> _NONE_
<android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent,android.app.PendingIntent$OnFinished,android.os.Handler)> -> _SINK_ 
<android.app.ActivityGroup: void onPause()> -> _NONE_
<android.widget.AbsListView$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)> -> _NONE_
<java.lang.AbstractStringBuilder: java.lang.CharSequence subSequence(int,int)> -> _NONE_
<java.lang.Thread: boolean interrupted()> -> _NONE_
<android.content.Intent: void <init>()> -> _NONE_
<android.widget.AbsListView: int pointToPosition(int,int)> -> _NONE_
<android.view.accessibility.AccessibilityNodeInfo: void setScrollable(boolean)> -> _SINK_ 
<android.bluetooth.BluetoothGatt: void disconnect()> -> _NONE_
<android.provider.CalendarContract$Instances: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],long,long)> android.permission.READ_CALENDAR -> _SOURCE_
<java.nio.LongBuffer: int hashCode()> -> _NONE_
<android.app.Activity: void setImmersive(boolean)> -> _SINK_ 
<java.lang.Character: char toUpperCase(char)> -> _SINK_ 
<android.database.ContentObserver: boolean deliverSelfNotifications()> -> _NONE_
<android.view.View: void setPressed(boolean)> -> _SINK_ 
<android.telephony.CellInfo: boolean equals(java.lang.Object)> -> _NONE_
<java.lang.Package: java.lang.String getSpecificationVersion()> -> _SOURCE_
<android.widget.TextView: java.lang.String getPrivateImeOptions()> -> _SOURCE_
<android.bluetooth.BluetoothGattCallback: void onReliableWriteCompleted(android.bluetooth.BluetoothGatt,int)> -> _NONE_
<android.app.Fragment: boolean getRetainInstance()> -> _SOURCE_
<android.view.View: void onDraw(android.graphics.Canvas)> -> _NONE_
<java.lang.Thread: void dumpStack()> -> _NONE_
<java.io.PrintWriter: void println(int)> -> _NONE_
<java.lang.StringBuilder: int codePointBefore(int)> -> _SINK_ 
<android.animation.ValueAnimator: java.lang.Object getAnimatedValue()> -> _SOURCE_
<android.content.res.Resources: java.lang.String getString(int,java.lang.Object[])> -> _SOURCE_
<android.view.LayoutInflater: void setFactory(android.view.LayoutInflater$Factory)> -> _NONE_
<android.content.SyncAdapterType: android.content.SyncAdapterType newKey(java.lang.String,java.lang.String)> -> _NONE_
<android.os.Parcel: java.lang.Object[] createTypedArray(android.os.Parcelable$Creator)> -> _NONE_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor queryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<android.nfc.NdefRecord: int describeContents()> -> _SINK_ 
<android.app.Fragment: void onPause()> -> _NONE_
<java.lang.Character: boolean isJavaIdentifierPart(char)> -> _NONE_
<android.webkit.WebResourceResponse: void setData(java.io.InputStream)> -> _SINK_ 
<android.content.Intent: java.lang.String getDataString()> -> _SOURCE_
<android.animation.PropertyValuesHolder: void <init>()> -> _NONE_
<android.graphics.Rect: int hashCode()> -> _SINK_ 
<android.view.View: void setTop(int)> -> _SINK_ 
<android.database.sqlite.SQLiteProgram: void bindNull(int)> -> _NONE_
<android.content.BroadcastReceiver: android.os.Bundle getResultExtras(boolean)> -> _SOURCE_
<android.nfc.NdefRecord: void <init>(short,byte[],byte[],byte[])> -> _NONE_
<android.bluetooth.BluetoothDevice: int getType()> -> _SOURCE_
<android.telephony.gsm.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)> android.permission.SEND_SMS -> _SINK_ 
<android.view.View: boolean isFocusableInTouchMode()> -> _NONE_
<android.bluetooth.BluetoothDevice: boolean setPairingConfirmation(boolean)> -> _SINK_ 
<android.text.Layout: int getOffsetToRightOf(int)> -> _SOURCE_
<android.graphics.Rect: int width()> -> _SINK_ 
<java.math.BigInteger: int compareTo(java.math.BigInteger)> -> _SINK_ 
<android.bluetooth.BluetoothGattService: boolean addCharacteristic(android.bluetooth.BluetoothGattCharacteristic)> -> _NONE_
<android.view.View: int getLayerType()> -> _SOURCE_
<android.widget.TextView: android.view.ActionMode$Callback getCustomSelectionActionModeCallback()> -> _SOURCE_
<android.net.sip.SipProfile: java.lang.String getProxyAddress()> -> _SOURCE_
<android.net.wifi.SupplicantState: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<android.view.inputmethod.CompletionInfo: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<android.view.accessibility.AccessibilityRecord: int getMaxScrollY()> -> _SOURCE_
<java.lang.Thread: int getPriority()> -> _SOURCE_
<android.view.MotionEvent: float getY(int)> -> _SOURCE_
<android.content.res.Configuration: int updateFrom(android.content.res.Configuration)> -> _SINK_ 
<android.content.ContentResolver: java.lang.String getType(android.net.Uri)> -> _SOURCE_
<java.util.HashMap: java.util.Set keySet()> -> _NONE_
<org.apache.http.ProtocolVersion: int hashCode()> -> _SINK_ 
<android.net.sip.SipAudioCall: int getState()> -> _SOURCE_
<java.net.Socket: void <init>(java.lang.String,int)> -> _NONE_
<android.content.res.Resources$Theme: android.content.res.TypedArray obtainStyledAttributes(int,int[])> -> _NONE_
<android.content.IntentFilter: java.lang.String getAction(int)> -> _SOURCE_
<java.util.BitSet: void or(java.util.BitSet)> -> _NONE_
<java.lang.reflect.Method: java.lang.String getName()> -> _SOURCE_
<android.animation.LayoutTransition: void setDuration(int,long)> -> _SINK_ 
<android.view.MotionEvent: int getFlags()> -> _SOURCE_
<android.content.Loader: void abandon()> -> _NONE_
<android.net.sip.SipManager: boolean isApiSupported(android.content.Context)> -> _NONE_
<android.telephony.SignalStrength: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<android.net.Uri: java.lang.String encode(java.lang.String,java.lang.String)> -> _NONE_
<android.widget.AbsListView: void onRestoreInstanceState(android.os.Parcelable)> -> _NONE_
<android.content.ContentProviderClient: android.content.res.AssetFileDescriptor openTypedAssetFileDescriptor(android.net.Uri,java.lang.String,android.os.Bundle)> -> _SINK_ 
<android.os.Bundle: java.lang.String toString()> -> _NONE_
<java.net.DatagramSocket: void close()> -> _NONE_
<android.widget.ExpandableListView: void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener)> -> _SINK_ 
<android.widget.TextView: android.text.method.TransformationMethod getTransformationMethod()> -> _SOURCE_
<android.widget.TextView: void onDetachedFromWindow()> -> _NONE_
<android.net.Uri: java.lang.String getQueryParameter(java.lang.String)> -> _SOURCE_
<android.graphics.Region: void <init>(int,int,int,int)> -> _NONE_
<java.lang.SecurityException: void <init>()> -> _NONE_
<android.view.accessibility.AccessibilityEvent: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<java.lang.ReflectiveOperationException: void <init>(java.lang.Throwable)> -> _NONE_
<android.os.Bundle: void putDouble(java.lang.String,double)> -> _NONE_
<java.security.GeneralSecurityException: void <init>(java.lang.String,java.lang.Throwable)> -> _NONE_
<android.content.res.ColorStateList: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<android.text.style.URLSpan: int describeContents()> -> _SINK_ 
<android.content.IntentFilter: java.util.Iterator authoritiesIterator()> -> _NONE_
<android.app.Fragment: void onCreate(android.os.Bundle)> -> _NONE_
<android.graphics.Canvas: void drawTextOnPath(java.lang.String,android.graphics.Path,float,float,android.graphics.Paint)> -> _NONE_
<android.view.View: android.os.Parcelable onSaveInstanceState()> -> _NONE_
<android.graphics.Path: void rMoveTo(float,float)> -> _NONE_
<android.net.wifi.WifiManager: void setTdlsEnabled(java.net.InetAddress,boolean)> -> _SINK_ 
<android.hardware.Camera$Parameters: java.util.List getSupportedWhiteBalance()> -> _SOURCE_
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.Object)> -> _NONE_
<android.app.ActivityGroup: void <init>()> -> _NONE_
<java.lang.Thread: java.lang.StackTraceElement[] getStackTrace()> -> _SOURCE_
<android.content.ContextWrapper: java.io.File[] getExternalCacheDirs()> -> _SOURCE_
<android.net.sip.SipAudioCall: void setListener(android.net.sip.SipAudioCall$Listener,boolean)> -> _SINK_ 
<java.net.DatagramSocket: boolean isClosed()> -> _NONE_
<java.lang.ThreadGroup: int getMaxPriority()> -> _SOURCE_
<org.apache.http.ProtocolVersion: java.lang.Object clone()> -> _NONE_
<java.io.Writer: java.io.Writer append(java.lang.CharSequence)> -> _NONE_
<android.app.ActionBar$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)> -> _NONE_
<android.hardware.Camera$Parameters: int getMaxExposureCompensation()> -> _SOURCE_
<android.view.KeyCharacterMap: void <clinit>()> -> _NONE_
<java.nio.FloatBuffer: java.nio.FloatBuffer allocate(int)> -> _NONE_
<android.util.Log: void <init>()> -> _NONE_
<android.content.ContentValues: void put(java.lang.String,java.lang.Short)> -> _NONE_
<android.webkit.WebView: void setPictureListener(android.webkit.WebView$PictureListener)> -> _NONE_
<android.widget.ListView: boolean canAnimate()> -> _NONE_
<android.database.sqlite.SQLiteClosable: void close()> -> _NONE_
<java.lang.AbstractStringBuilder: char charAt(int)> -> _NONE_
<java.util.Date: void setMinutes(int)> -> _SINK_ 
<android.util.SparseBooleanArray: void put(int,boolean)> -> _NONE_
<android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent)> -> _SINK_ 
<java.lang.NegativeArraySizeException: void <init>(java.lang.String)> -> _NONE_
<android.content.pm.ApplicationInfo: void dump(android.util.Printer,java.lang.String)> -> _NONE_
<java.lang.reflect.AccessibleObject: java.lang.annotation.Annotation[] getAnnotations()> -> _SOURCE_
<org.apache.http.message.BasicLineParser: org.apache.http.StatusLine createStatusLine(org.apache.http.ProtocolVersion,int,java.lang.String)> -> _NONE_
<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo: void <init>()> -> _NONE_
<android.view.InputDevice: int getSources()> -> _SOURCE_
<java.nio.FloatBuffer: java.nio.FloatBuffer get(float[])> -> _SOURCE_
<android.accounts.AccountsException: void <init>(java.lang.String,java.lang.Throwable)> -> _NONE_
<android.content.BroadcastReceiver$PendingResult: void setResultCode(int)> -> _SINK_ 
<android.provider.Settings$Secure: float getFloat(android.content.ContentResolver,java.lang.String)> -> _SOURCE_
<java.lang.Package: java.lang.annotation.Annotation[] getDeclaredAnnotations()> -> _SOURCE_
<java.lang.Character: boolean isLetterOrDigit(int)> -> _NONE_
<android.webkit.WebHistoryItem: java.lang.String getOriginalUrl()> -> _SOURCE_
<android.view.View: void buildDrawingCache()> -> _NONE_
<android.location.LocationProvider: boolean hasMonetaryCost()> -> _NONE_
<java.lang.Package: int hashCode()> -> _SINK_ 
<android.webkit.WebChromeClient: boolean onConsoleMessage(android.webkit.ConsoleMessage)> -> _NONE_
<android.accounts.AccountAuthenticatorActivity: void setWallpaper(java.io.InputStream)> android.permission.MANAGE_APP_TOKENS android.permission.SET_WALLPAPER -> _SINK_ 
<android.widget.ListView: void setAdapter(android.widget.ListAdapter)> -> _SINK_ 
<java.nio.channels.SocketChannel: int validOps()> -> _NONE_
<android.os.Message: android.os.Message obtain(android.os.Handler,int,int,int)> -> _SINK_ 
<android.view.accessibility.AccessibilityNodeInfo: void setBoundsInParent(android.graphics.Rect)> -> _SINK_ 
<android.app.ActivityGroup: void onCreate(android.os.Bundle)> -> _NONE_
<android.webkit.WebSettings: void setGeolocationDatabasePath(java.lang.String)> -> _NONE_
<android.text.Layout: int getLineForVertical(int)> -> _SOURCE_
<android.view.View: boolean isScrollContainer()> -> _NONE_
<android.content.ContentValues: void put(java.lang.String,byte[])> -> _NONE_
<org.apache.http.message.BasicLineParser: void <init>()> -> _NONE_
<java.util.AbstractMap: boolean isEmpty()> -> _NONE_
<android.graphics.Paint: android.graphics.Paint$Cap getStrokeCap()> -> _SOURCE_
<android.animation.LayoutTransition: java.util.List getTransitionListeners()> -> _SOURCE_
<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)> -> _NONE_
<android.widget.AbsListView: int getListPaddingBottom()> -> _SOURCE_
<android.webkit.WebResourceResponse: void setEncoding(java.lang.String)> -> _SINK_ 
<android.view.View: void setWillNotDraw(boolean)> -> _SINK_ 
<java.util.ArrayList: void ensureCapacity(int)> -> _NONE_
<android.graphics.Matrix: void setTranslate(float,float)> -> _SINK_ 
<android.telephony.CellSignalStrengthCdma: int getAsuLevel()> -> _SOURCE_
<android.view.KeyEvent: void startTracking()> -> _NONE_
<java.security.CodeSource: java.security.cert.Certificate[] getCertificates()> -> _SOURCE_
<android.view.View: void setHorizontalScrollBarEnabled(boolean)> -> _SINK_ 
<android.content.ContentValues: void clear()> -> _NONE_
<android.content.res.AssetFileDescriptor: void close()> -> _NONE_
<android.net.sip.SipAudioCall$Listener: void onReadyToCall(android.net.sip.SipAudioCall)> -> _NONE_
<android.webkit.WebSettings: void setFantasyFontFamily(java.lang.String)> -> _NONE_
<android.bluetooth.BluetoothGattService: void <init>(java.util.UUID,int)> -> _NONE_
<android.webkit.WebResourceResponse: void <init>(java.lang.String,java.lang.String,java.io.InputStream)> -> _NONE_
<android.text.Layout: float getPrimaryHorizontal(int)> -> _SOURCE_
<android.view.View: boolean removeCallbacks(java.lang.Runnable)> -> _NONE_
<java.lang.Integer: java.lang.String toHexString(int)> -> _SINK_ 
<java.lang.String: boolean startsWith(java.lang.String)> -> _SINK_ 
<java.util.Date: long getTime()> -> _SOURCE_
<android.animation.ValueAnimator: android.animation.PropertyValuesHolder[] getValues()> -> _SOURCE_
<android.app.Activity: android.view.View onCreatePanelView(int)> -> _NONE_
<android.content.pm.PackageItemInfo: void dumpFront(android.util.Printer,java.lang.String)> -> _NONE_
<android.view.animation.Animation: float getScaleFactor()> -> _SOURCE_
<android.graphics.Paint: int getTextWidths(java.lang.String,float[])> -> _SOURCE_
<android.hardware.Camera$Parameters: int getMinExposureCompensation()> -> _SOURCE_
<android.app.Dialog: void setOwnerActivity(android.app.Activity)> -> _SINK_ 
<android.nfc.NfcAdapter: boolean isNdefPushEnabled()> -> _NONE_
<java.lang.InstantiationException: void <init>()> -> _NONE_
<java.util.BitSet: int cardinality()> -> _SINK_ 
<android.webkit.WebView: void findNext(boolean)> -> _NONE_
<android.widget.TextView: boolean isSuggestionsEnabled()> -> _NONE_
<android.view.ViewGroup: void clearFocus()> -> _NONE_
<java.lang.Integer: java.lang.Integer getInteger(java.lang.String)> -> _SOURCE_
<java.net.NetworkInterface: int getIndex()> -> _SOURCE_
<android.graphics.Bitmap: void copyPixelsToBuffer(java.nio.Buffer)> -> _NONE_
<android.content.ContentProviderOperation: android.content.ContentProviderOperation$Builder newUpdate(android.net.Uri)> -> _SOURCE_
<android.net.wifi.WifiManager: int calculateSignalLevel(int,int)> -> _SOURCE_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.io.Serializable)> -> _NONE_
<java.lang.Character: boolean isDigit(char)> -> _NONE_
<android.graphics.RectF: java.lang.String toString()> -> _NONE_
<android.app.Service: android.app.Application getApplication()> -> _SOURCE_
<java.net.URLConnection: long getHeaderFieldDate(java.lang.String,long)> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getDeviceId()> -> _SOURCE_
<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)> -> _NONE_
<android.telephony.CellInfoCdma: boolean equals(java.lang.Object)> -> _NONE_
<android.content.ContentResolver: void <init>(android.content.Context)> -> _NONE_
<java.lang.StringBuilder: java.lang.String substring(int)> -> _NONE_
<android.graphics.Canvas: void getMatrix(android.graphics.Matrix)> -> _SOURCE_
<android.app.ActivityManager: java.util.List getRunningTasks(int)> -> _SOURCE_
<java.net.URLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)> -> _NONE_
<java.lang.AbstractMethodError: void <init>()> -> _NONE_
<android.graphics.Canvas: void drawColor(int,android.graphics.PorterDuff$Mode)> -> _NONE_
<android.content.Loader: void onAbandon()> -> _NONE_
<android.app.PendingIntent: android.app.PendingIntent getService(android.content.Context,int,android.content.Intent,int)> -> _SOURCE_
<android.widget.RemoteViews: void setInt(int,java.lang.String,int)> -> _SINK_ 
<android.content.res.Configuration: void <init>()> -> _NONE_
<android.print.PrintAttributes$MediaSize: void <clinit>()> -> _NONE_
<android.view.KeyEvent: int getSource()> -> _SOURCE_
<android.net.sip.SipAudioCall$Listener: void onCallEnded(android.net.sip.SipAudioCall)> -> _NONE_
<java.io.Reader: void reset()> -> _NONE_
<android.content.ContentValues: java.util.Set keySet()> -> _NONE_
<android.animation.ValueAnimator: long getFrameDelay()> -> _SOURCE_
<android.view.ViewGroup: boolean dispatchTrackballEvent(android.view.MotionEvent)> -> _NONE_
<android.nfc.NdefRecord: java.lang.String toString()> -> _NONE_
<java.lang.Class: java.lang.Object[] getSigners()> -> _SOURCE_
<android.util.TypedValue: float getFloat()> -> _SOURCE_
<java.security.cert.CertificateException: void <init>(java.lang.Throwable)> -> _NONE_
<android.widget.ExpandableListView: void setChildIndicatorBoundsRelative(int,int)> -> _SINK_ 
<android.widget.TextView: void setRawInputType(int)> -> _SINK_ 
<android.os.Message: android.os.Message obtain(android.os.Handler,java.lang.Runnable)> -> _SINK_ 
<android.net.Uri: boolean isOpaque()> -> _NONE_
<android.app.Dialog: android.os.Bundle onSaveInstanceState()> -> _NONE_
<java.util.ArrayList: java.lang.Object remove(int)> -> _NONE_
<android.bluetooth.BluetoothGattCharacteristic: boolean setValue(byte[])> -> _SINK_ 
<android.content.ComponentName: void <clinit>()> -> _NONE_
<android.app.Activity: void startActivityFromChild(android.app.Activity,android.content.Intent,int,android.os.Bundle)> -> _SINK_ 
<java.nio.DoubleBuffer: int compareTo(java.nio.DoubleBuffer)> -> _NONE_
<android.hardware.Camera$CameraInfo: void <init>()> -> _NONE_
<android.app.LocalActivityManager: void dispatchDestroy(boolean)> -> _NONE_
<java.nio.channels.SelectableChannel: void <init>()> -> _NONE_
<java.io.PrintStream: void <init>(java.lang.String)> -> _NONE_
<android.app.Dialog: boolean onKeyMultiple(int,int,android.view.KeyEvent)> -> _NONE_
<java.net.URLStreamHandler: int hashCode(java.net.URL)> -> _NONE_
<android.app.Application: void onConfigurationChanged(android.content.res.Configuration)> -> _NONE_
<java.math.BigInteger: java.math.BigInteger probablePrime(int,java.util.Random)> -> _NONE_
<java.lang.reflect.Method: boolean isAnnotationPresent(java.lang.Class)> -> _NONE_
<android.nfc.NdefRecord: android.nfc.NdefRecord createUri(java.lang.String)> -> _SINK_ 
<android.content.ContextWrapper: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> -> _SINK_ 
<android.view.animation.LayoutAnimationController: void setInterpolator(android.content.Context,int)> -> _SINK_ 
<android.location.LocationProvider: boolean supportsAltitude()> -> _NONE_
<java.lang.Thread: java.lang.Thread currentThread()> -> _NONE_
<java.net.URLConnection: java.lang.String toString()> -> _NONE_
<android.content.ContentProviderOperation: android.content.ContentProviderOperation$Builder newInsert(android.net.Uri)> -> _SOURCE_
<java.lang.Integer: java.lang.Integer valueOf(java.lang.String,int)> -> _SINK_ 
<java.net.URLConnection: java.lang.String getHeaderFieldKey(int)> -> _SOURCE_
<android.content.ContextWrapper: void enforceUriPermission(android.net.Uri,java.lang.String,java.lang.String,int,int,int,java.lang.String)> -> _NONE_
<java.lang.ClassLoader: java.lang.String findLibrary(java.lang.String)> -> _NONE_
<android.view.KeyEvent: void <init>(android.view.KeyEvent,long,int)> -> _NONE_
<android.os.PowerManager: void userActivity(long,boolean)> -> _NONE_
<android.os.Message: void setData(android.os.Bundle)> -> _SINK_ 
<android.widget.AbsListView: int getListPaddingRight()> -> _SOURCE_
<android.view.View: java.lang.CharSequence getContentDescription()> -> _SOURCE_
<java.io.PrintWriter: boolean checkError()> -> _NONE_
<android.net.sip.SipProfile: java.lang.String getUriString()> -> _SOURCE_
<android.widget.AdapterView: void setFocusableInTouchMode(boolean)> -> _NONE_
<java.lang.Class: java.lang.Object cast(java.lang.Object)> -> _NONE_
<android.content.pm.PermissionInfo: java.lang.CharSequence loadDescription(android.content.pm.PackageManager)> -> _NONE_
<android.os.Parcel: void writeStringList(java.util.List)> -> _NONE_
<android.webkit.WebSettings$LayoutAlgorithm: void <clinit>()> -> _NONE_
<java.lang.Double: int intValue()> -> _SINK_ 
<android.webkit.WebHistoryItem: java.lang.String getTitle()> -> _SOURCE_
<android.graphics.Paint: android.graphics.PathEffect setPathEffect(android.graphics.PathEffect)> -> _SINK_ 
<android.content.pm.InstrumentationInfo: int describeContents()> -> _SINK_ 
<android.app.Activity: void startIntentSenderForResult(android.content.IntentSender,int,android.content.Intent,int,int,int)> -> _SINK_ 
<android.view.Display: void getCurrentSizeRange(android.graphics.Point,android.graphics.Point)> -> _SOURCE_
<android.os.Messenger: void <clinit>()> -> _NONE_
<android.graphics.Path: void finalize()> -> _NONE_
<android.media.MediaPlayer: void setDisplay(android.view.SurfaceHolder)> -> _SINK_ 
<java.util.Date: long UTC(int,int,int,int,int,int)> -> _NONE_
<android.view.animation.Animation: void setFillBefore(boolean)> -> _NONE_
<android.widget.TextView: android.graphics.Typeface getTypeface()> -> _SOURCE_
<android.view.MotionEvent$PointerCoords: void <init>(android.view.MotionEvent$PointerCoords)> -> _NONE_
<android.graphics.Movie: android.graphics.Movie decodeStream(java.io.InputStream)> -> _SOURCE_
<android.view.Display: int getPixelFormat()> -> _SOURCE_
<android.print.PrintDocumentAdapter$LayoutResultCallback: void onLayoutCancelled()> -> _NONE_
<android.widget.AbsListView: int getCacheColorHint()> -> _SOURCE_
<java.lang.Float: java.lang.String toHexString(float)> -> _SINK_ 
<java.util.ArrayList: int size()> -> _SINK_ 
<android.webkit.WebChromeClient: android.view.View getVideoLoadingProgressView()> -> _SOURCE_
<org.apache.http.message.BasicLineParser: org.apache.http.RequestLine parseRequestLine(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> -> _NONE_
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setDuration(long)> -> _SINK_ 
<android.view.View$AccessibilityDelegate: void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)> -> _NONE_
<android.print.PrintDocumentAdapter: void <init>()> -> _NONE_
<org.apache.http.message.BasicLineParser: org.apache.http.ProtocolVersion parseProtocolVersion(java.lang.String,org.apache.http.message.LineParser)> -> _NONE_
<android.content.ClipData$Item: java.lang.CharSequence getText()> -> _SOURCE_
<android.view.View: void initializeFadingEdge(android.content.res.TypedArray)> -> _NONE_
<android.view.accessibility.AccessibilityNodeInfo: void setClickable(boolean)> -> _SINK_ 
<android.webkit.WebResourceResponse: void setMimeType(java.lang.String)> -> _SINK_ 
<android.view.View: int computeHorizontalScrollRange()> -> _NONE_
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,double)> -> _NONE_
<java.lang.Thread$State: java.lang.Thread$State valueOf(java.lang.String)> -> _SINK_ 
<org.apache.http.util.CharArrayBuffer: boolean isFull()> -> _NONE_
<android.accounts.AuthenticatorDescription: boolean equals(java.lang.Object)> -> _NONE_
<java.lang.ThreadGroup: java.lang.ThreadGroup getParent()> -> _SOURCE_
<android.view.Surface: boolean isValid()> -> _NONE_
<android.media.MediaPlayer: void release()> -> _NONE_
<android.os.ParcelUuid: android.os.ParcelUuid fromString(java.lang.String)> -> _SINK_ 
<android.content.res.Resources: void parseBundleExtra(java.lang.String,android.util.AttributeSet,android.os.Bundle)> -> _NONE_
<android.view.accessibility.AccessibilityNodeInfo: boolean isEditable()> -> _NONE_
<android.database.sqlite.SQLiteClosable: void onAllReferencesReleasedFromContainer()> -> _NONE_
<android.location.Location: void setTime(long)> -> _SINK_ 
<android.hardware.Camera$Parameters: void setVideoStabilization(boolean)> -> _SINK_ 
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,android.net.Uri)> -> _SOURCE_
<android.content.ClipDescription: boolean compareMimeTypes(java.lang.String,java.lang.String)> -> _NONE_
<android.accounts.AccountManager: android.accounts.AccountManagerFuture addAccount(java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> -> _SOURCE_
<android.graphics.Rect: java.lang.String flattenToString()> -> _NONE_
<android.graphics.RectF: void sort()> -> _NONE_
<android.widget.AbsListView: void setAdapter(android.widget.ListAdapter)> -> _NONE_
<android.widget.AbsListView: int getChoiceMode()> -> _SOURCE_
<java.lang.StringBuilder: java.lang.StringBuilder append(int)> -> _NONE_
<android.net.http.SslError: android.net.http.SslCertificate getCertificate()> -> _SOURCE_
<android.app.Activity: void setVolumeControlStream(int)> -> _SINK_ 
<android.view.accessibility.AccessibilityRecord: void setFromIndex(int)> -> _SINK_ 
<android.location.GpsStatus: java.lang.Iterable getSatellites()> -> _SOURCE_
<android.view.LayoutInflater: android.view.View onCreateView(java.lang.String,android.util.AttributeSet)> -> _NONE_
<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(int[])> -> _SOURCE_
<java.net.URLConnection: void setReadTimeout(int)> -> _NONE_
<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()> -> _SOURCE_
<java.lang.reflect.Field: byte getByte(java.lang.Object)> -> _SOURCE_
<java.io.FileOutputStream: void write(int)> -> _NONE_
<android.view.ViewGroup: void setLayoutAnimationListener(android.view.animation.Animation$AnimationListener)> -> _NONE_
<android.bluetooth.BluetoothDevice: boolean equals(java.lang.Object)> -> _NONE_
<android.view.accessibility.AccessibilityNodeInfo: boolean isVisibleToUser()> -> _NONE_
<android.view.View: int getVerticalScrollbarWidth()> -> _SOURCE_
<android.content.pm.Signature: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<android.webkit.WebView: boolean canGoBack()> -> _NONE_
<android.bluetooth.BluetoothGattCharacteristic: void <init>(java.util.UUID,int,int)> -> _NONE_
<android.accounts.AccountManager: boolean addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle)> -> _NONE_
<java.lang.reflect.Field: boolean isAnnotationPresent(java.lang.Class)> -> _NONE_
<java.lang.Integer: boolean equals(java.lang.Object)> -> _NONE_
<android.graphics.Canvas: void drawRoundRect(android.graphics.RectF,float,float,android.graphics.Paint)> -> _NONE_
<java.nio.channels.spi.AbstractInterruptibleChannel: void <init>()> -> _NONE_
<android.view.KeyEvent: int getUnicodeChar(int)> -> _SOURCE_
<android.animation.Animator: void <init>()> -> _NONE_
<java.lang.ThreadGroup: java.lang.String getName()> -> _SOURCE_
<android.content.IntentFilter: boolean hasDataPath(java.lang.String)> -> _NONE_
<android.os.Bundle: int describeContents()> -> _SINK_ 
<android.os.PowerManager: void goToSleep(long)> -> _NONE_
<android.content.ComponentName: android.content.ComponentName unflattenFromString(java.lang.String)> -> _SINK_ 
<android.widget.TextView: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> -> _NONE_
<android.bluetooth.BluetoothGattCallback: void <init>()> -> _NONE_
<android.graphics.RectF: java.lang.String toShortString()> -> _NONE_
<java.lang.String: java.lang.String valueOf(java.lang.Object)> -> _SINK_ 
<android.bluetooth.BluetoothGattService: java.util.List getIncludedServices()> -> _SOURCE_
<android.content.ContentResolver: android.content.res.AssetFileDescriptor openAssetFileDescriptor(android.net.Uri,java.lang.String,android.os.CancellationSignal)> -> _NONE_
<android.location.Location: double getAltitude()> -> _SOURCE_
<android.view.ViewGroup: boolean getClipChildren()> -> _SOURCE_
<android.widget.AbsListView: boolean canScrollList(int)> -> _NONE_
<java.lang.String: boolean isEmpty()> -> _NONE_
<java.util.Random: double nextDouble()> -> _NONE_
<android.graphics.Path: void offset(float,float,android.graphics.Path)> -> _NONE_
<android.view.View: void setId(int)> -> _SINK_ 
<java.security.cert.CertPath: boolean equals(java.lang.Object)> -> _NONE_
<java.lang.reflect.Field: void setShort(java.lang.Object,short)> -> _SINK_ 
<android.webkit.WebHistoryItem: android.graphics.Bitmap getFavicon()> -> _SOURCE_
<android.view.View: boolean isPaddingRelative()> -> _NONE_
<java.lang.Number: byte byteValue()> -> _NONE_
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor open(java.io.File,int,android.os.Handler,android.os.ParcelFileDescriptor$OnCloseListener)> -> _SINK_ 
<android.view.accessibility.AccessibilityNodeInfo: void setParent(android.view.View)> -> _SINK_ 
<android.webkit.WebChromeClient: void onRequestFocus(android.webkit.WebView)> -> _NONE_
<javax.security.auth.x500.X500Principal: java.lang.String toString()> -> _NONE_
<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()> -> _SOURCE_
<android.view.View: java.lang.String toString()> -> _NONE_
<android.view.WindowManager$LayoutParams: java.lang.String debug(java.lang.String)> -> _NONE_
<android.content.ContentValues: void put(java.lang.String,java.lang.Boolean)> -> _NONE_
<android.graphics.Matrix: java.lang.String toShortString()> -> _NONE_
<android.util.SparseArray: void delete(int)> -> _NONE_
<java.io.File: void <clinit>()> -> _NONE_
<android.os.Bundle: void putSerializable(java.lang.String,java.io.Serializable)> -> _NONE_
<android.content.ContextWrapper: android.content.Context createDisplayContext(android.view.Display)> -> _NONE_
<android.view.ViewGroup: int getLayoutMode()> -> _SOURCE_
<android.os.Parcel: void writeArray(java.lang.Object[])> -> _NONE_
<android.location.LocationManager: void requestSingleUpdate(java.lang.String,android.app.PendingIntent)> -> _NONE_
<android.app.ActionBar: void setHomeAsUpIndicator(android.graphics.drawable.Drawable)> -> _NONE_
<android.view.InputDevice: void <init>()> -> _NONE_
<java.net.URLConnection: int getConnectTimeout()> -> _SOURCE_
<java.util.Random: boolean nextBoolean()> -> _NONE_
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor open(java.io.File,int)> -> _SINK_ 
<java.util.concurrent.TimeUnit: long toMillis(long)> -> _NONE_
<android.nfc.tech.IsoDep: int getMaxTransceiveLength()> -> _SOURCE_
<android.content.pm.Signature: char[] toChars(char[],int[])> -> _NONE_
<android.view.View: boolean isDirty()> -> _NONE_
<android.os.Parcel: void writeDoubleArray(double[])> -> _NONE_
<java.lang.UnsupportedOperationException: void <init>(java.lang.Throwable)> -> _NONE_
<java.lang.ClassLoader: void setDefaultAssertionStatus(boolean)> -> _NONE_
<android.view.View: float getX()> -> _SOURCE_
<android.graphics.Paint$Cap: android.graphics.Paint$Cap[] values()> -> _NONE_
<android.widget.RemoteViews: void setChronometer(int,long,java.lang.String,boolean)> -> _SINK_ 
<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)> -> _SOURCE_
<android.webkit.WebSettings: void setNeedInitialFocus(boolean)> -> _NONE_
<android.graphics.Point: int hashCode()> -> _SINK_ 
<android.os.CancellationSignal: void <init>()> -> _NONE_
<android.os.WorkSource: void <clinit>()> -> _NONE_
<android.app.ActivityManager: java.util.List getRunningServices(int)> -> _SOURCE_
<java.lang.Exception: void <init>(java.lang.String)> -> _NONE_
<android.net.wifi.WifiInfo: int getIpAddress()> -> _SOURCE_
<android.app.ActionBar$Tab: void <init>()> -> _NONE_
<android.accessibilityservice.AccessibilityServiceInfo: void <clinit>()> -> _NONE_
<android.view.ActionProvider: boolean overridesItemVisibility()> -> _NONE_
<android.view.animation.Animation: void scaleCurrentDuration(float)> -> _NONE_
<android.widget.TextView: boolean onKeyShortcut(int,android.view.KeyEvent)> -> _NONE_
<java.util.UUID: java.util.UUID randomUUID()> -> _NONE_
<java.util.BitSet: int length()> -> _SINK_ 
<android.content.pm.FeatureInfo: void <init>(android.content.pm.FeatureInfo)> -> _NONE_
<android.net.http.SslCertificate: void <init>(java.security.cert.X509Certificate)> -> _NONE_
<android.view.InputDevice: java.util.List getMotionRanges()> -> _SOURCE_
<android.app.Activity: void setContentView(android.view.View,android.view.ViewGroup$LayoutParams)> -> _SINK_ 
<android.net.http.SslCertificate$DName: java.lang.String getUName()> -> _SOURCE_
<android.view.ViewOverlay: void remove(android.graphics.drawable.Drawable)> -> _NONE_
<android.text.Layout: int getParagraphRight(int)> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getVoiceMailNumber()> -> _SOURCE_
<java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)> -> _SOURCE_
<android.view.animation.Transformation: void setTransformationType(int)> -> _SINK_ 
<java.security.spec.EllipticCurve: java.security.spec.ECField getField()> -> _SOURCE_
<java.lang.Byte: java.lang.Byte valueOf(java.lang.String)> -> _SINK_ 
<android.view.View: int getSystemUiVisibility()> -> _SOURCE_
<android.app.Fragment: void onHiddenChanged(boolean)> -> _NONE_
<java.lang.Package: java.lang.String getSpecificationVendor()> -> _SOURCE_
<android.os.MessageQueue: void addIdleHandler(android.os.MessageQueue$IdleHandler)> -> _NONE_
<android.view.accessibility.AccessibilityNodeInfo: java.lang.String getViewIdResourceName()> -> _SOURCE_
<android.content.ClipData$Item: android.content.Intent getIntent()> -> _SOURCE_
<android.content.res.Resources: void <init>(android.content.res.AssetManager,android.util.DisplayMetrics,android.content.res.Configuration)> -> _NONE_
<android.widget.TextView: void computeScroll()> -> _NONE_
<android.database.sqlite.SQLiteDatabase: void onAllReferencesReleased()> -> _NONE_
<android.os.Bundle: android.os.Bundle getBundle(java.lang.String)> -> _SOURCE_
<android.app.Notification$Style: void checkBuilder()> -> _NONE_
<android.view.ViewGroup: void addView(android.view.View,int,int)> -> _NONE_
<android.provider.Settings$Secure: boolean isLocationProviderEnabled(android.content.ContentResolver,java.lang.String)> -> _NONE_
<android.content.res.Resources$Theme: void <init>(android.content.res.Resources)> -> _NONE_
<android.os.Bundle: char getChar(java.lang.String)> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()> -> _SOURCE_
<java.security.PermissionCollection: boolean isReadOnly()> -> _NONE_
<android.view.animation.LayoutAnimationController: void setInterpolator(android.view.animation.Interpolator)> -> _SINK_ 
<android.os.Bundle: void putIntegerArrayList(java.lang.String,java.util.ArrayList)> -> _NONE_
<java.util.AbstractMap: java.util.Collection values()> -> _NONE_
<java.net.DatagramPacket: void <init>(byte[],int,java.net.SocketAddress)> -> _NONE_
<android.view.animation.Animation: void setStartTime(long)> -> _NONE_
<android.os.Bundle: void putFloatArray(java.lang.String,float[])> -> _NONE_
<android.content.ContentProviderOperation: int describeContents()> -> _SINK_ 
<android.os.Message: java.lang.String toString()> -> _NONE_
<java.net.ServerSocket: void <init>(int,int)> -> _NONE_
<android.app.Activity: void onAttachFragment(android.app.Fragment)> -> _NONE_
<android.view.ViewGroup: boolean isAnimationCacheEnabled()> -> _NONE_
<java.net.InetAddress: java.net.InetAddress getLocalHost()> -> _SOURCE_
<android.content.BroadcastReceiver: boolean isOrderedBroadcast()> -> _NONE_
<android.content.ContextWrapper: java.io.File getDir(java.lang.String,int)> -> _SOURCE_
<android.view.View: void setX(float)> -> _SINK_ 
<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Bundle)> -> _NONE_
<android.webkit.WebChromeClient: void onReceivedTitle(android.webkit.WebView,java.lang.String)> -> _NONE_
<android.net.Uri$Builder: android.net.Uri$Builder scheme(java.lang.String)> -> _NONE_
<java.nio.ShortBuffer: java.nio.ShortBuffer put(short[],int,int)> -> _NONE_
<android.app.backup.BackupDataInput: java.lang.String getKey()> -> _SOURCE_
<android.view.View: long getDrawingTime()> -> _SOURCE_
<android.app.LocalActivityManager: android.view.Window startActivity(java.lang.String,android.content.Intent)> -> _SINK_ 
<android.app.Fragment: int getId()> -> _SOURCE_
<android.net.sip.SipProfile: int getPort()> -> _SOURCE_
<android.content.BroadcastReceiver$PendingResult: void setResult(int,java.lang.String,android.os.Bundle)> -> _SINK_ 
<java.nio.ByteBuffer: java.nio.ByteBuffer put(java.nio.ByteBuffer)> -> _NONE_
<android.app.Activity: boolean onOptionsItemSelected(android.view.MenuItem)> -> _NONE_
<android.content.ClipData$Item: void <init>(android.content.Intent)> -> _SINK_ 
<java.nio.IntBuffer: java.nio.IntBuffer wrap(int[])> -> _NONE_
<android.nfc.Tag: int describeContents()> -> _SINK_ 
<android.widget.TextView: void setLines(int)> -> _SINK_ 
<java.lang.Character: boolean isUnicodeIdentifierStart(char)> -> _NONE_
<android.graphics.Canvas: void drawText(java.lang.String,float,float,android.graphics.Paint)> -> _NONE_
<android.view.ViewGroup: boolean dispatchKeyShortcutEvent(android.view.KeyEvent)> -> _NONE_
<java.net.Socket: void <init>(java.lang.String,int,boolean)> -> _NONE_
<android.net.Uri$Builder: android.net.Uri$Builder fragment(java.lang.String)> -> _NONE_
<android.net.wifi.WifiManager$MulticastLock: java.lang.String toString()> -> _NONE_
<android.view.ViewGroup: void setAnimationCacheEnabled(boolean)> -> _NONE_
<android.database.sqlite.SQLiteStatement: java.lang.String simpleQueryForString()> -> _NONE_
<android.content.ContentValues: java.lang.Object get(java.lang.String)> -> _SOURCE_
<android.view.View: void setLayerPaint(android.graphics.Paint)> -> _SINK_ 
<android.hardware.Camera$Parameters: int getPreviewFrameRate()> -> _SOURCE_
<android.view.accessibility.AccessibilityEvent: int getRecordCount()> -> _SOURCE_
<android.view.inputmethod.EditorInfo: void makeCompatible(int)> -> _NONE_
<android.accessibilityservice.AccessibilityService: android.os.IBinder onBind(android.content.Intent)> -> _SOURCE_
<android.media.MediaPlayer$TrackInfo: java.lang.String getLanguage()> -> _SOURCE_
<android.content.pm.ResolveInfo: android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager)> -> _NONE_
<android.app.Activity: void closeContextMenu()> -> _NONE_
<java.util.HashMap: void <init>()> -> _NONE_
<android.view.ViewGroup: void onAttachedToWindow()> -> _NONE_
<java.lang.reflect.Field: java.lang.String getName()> -> _SOURCE_
<android.hardware.Camera$Parameters: java.util.List getFocusAreas()> -> _SOURCE_
<android.app.backup.BackupAgent: void onRestoreFile(android.os.ParcelFileDescriptor,long,java.io.File,int,long,long)> -> _NONE_
<android.media.MediaPlayer: void finalize()> -> _NONE_
<android.net.wifi.WifiEnterpriseConfig: void setIdentity(java.lang.String)> -> _SINK_ 
<android.util.SparseArray: void removeAt(int)> -> _NONE_
<java.security.Permission: java.security.PermissionCollection newPermissionCollection()> -> _NONE_
<android.widget.AbsListView: boolean isFastScrollAlwaysVisible()> -> _NONE_
<android.widget.Scroller: int getStartX()> -> _SOURCE_
<android.text.style.ImageSpan: void <init>(android.content.Context,android.graphics.Bitmap)> android.permission.STOP_APP_SWITCHES -> _NONE_
<java.nio.FloatBuffer: boolean hasArray()> -> _NONE_
<android.webkit.WebSettings: boolean getLoadsImagesAutomatically()> -> _SOURCE_
<java.lang.Integer: java.lang.String toOctalString(int)> -> _SINK_ 
<android.location.Criteria: int getAccuracy()> -> _SOURCE_
<android.net.Uri: android.net.Uri fromFile(java.io.File)> -> _NONE_
<android.net.wifi.WifiManager$MulticastLock: void release()> -> _NONE_
<java.net.ServerSocket: void setReceiveBufferSize(int)> -> _SINK_ 
<android.telephony.gsm.SmsManager: void <init>()> -> _NONE_
<android.view.View: boolean canScrollVertically(int)> -> _NONE_
<android.view.View: android.view.View getRootView()> -> _SOURCE_
<android.widget.TextView: float getLineSpacingMultiplier()> -> _SOURCE_
<android.app.Service: void stopForeground(boolean)> -> _NONE_
<android.view.animation.Transformation: void setAlpha(float)> -> _SINK_ 
<android.view.KeyEvent: boolean isNumLockOn()> -> _NONE_
<android.view.ViewGroup: boolean isChildrenDrawingOrderEnabled()> -> _NONE_
<android.os.Message: int describeContents()> -> _SINK_ 
<android.view.ActionProvider: boolean onPerformDefaultAction()> -> _NONE_
<android.text.TextPaint: void <init>(int)> -> _NONE_
<android.location.Location: void setLatitude(double)> -> _SINK_ 
<android.content.SyncInfo: void <init>()> -> _NONE_
<android.content.ContentProviderClient: android.content.ContentProviderResult[] applyBatch(java.util.ArrayList)> -> _NONE_
<android.view.View: void restoreHierarchyState(android.util.SparseArray)> -> _NONE_
<android.view.View: int getBottom()> -> _SOURCE_
<android.location.Location: java.lang.String getProvider()> -> _SOURCE_
<android.os.Parcel: java.lang.Object[] readArray(java.lang.ClassLoader)> -> _NONE_
<android.graphics.Path: void addRect(float,float,float,float,android.graphics.Path$Direction)> -> _NONE_
<java.lang.String: char charAt(int)> -> _NONE_
<java.io.File: boolean setReadOnly()> -> _SINK_ 
<java.lang.Throwable: java.lang.String getLocalizedMessage()> -> _SOURCE_
<android.nfc.tech.BasicTagTechnology: android.nfc.Tag getTag()> -> _SOURCE_
<android.app.Notification$Builder: android.app.Notification$Builder setContentInfo(java.lang.CharSequence)> -> _SINK_ 
<android.widget.TextView: boolean isCursorVisible()> -> _NONE_
<android.view.Window: void setUiOptions(int,int)> -> _NONE_
<java.lang.Float: java.lang.Float valueOf(float)> -> _SINK_ 
<android.text.style.ReplacementSpan: void updateDrawState(android.text.TextPaint)> -> _NONE_
<android.app.Activity: android.content.Intent getParentActivityIntent()> -> _SOURCE_
<java.util.BitSet: void <init>()> -> _NONE_
<java.lang.Character: int compareTo(java.lang.Character)> -> _SINK_ 
<android.view.KeyEvent: void <clinit>()> -> _NONE_
<android.widget.AbsListView: android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)> -> _NONE_
<android.view.View: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> -> _NONE_
<java.security.GeneralSecurityException: void <init>()> -> _NONE_
<java.nio.IntBuffer: java.nio.IntBuffer get(int[],int,int)> -> _SOURCE_
<android.net.sip.SipSession$Listener: void onCallEnded(android.net.sip.SipSession)> -> _NONE_
<android.widget.TextView: int getCompoundPaddingEnd()> -> _SOURCE_
<java.lang.Package: boolean isSealed()> -> _NONE_
<android.view.ViewTreeObserver: void removeOnWindowAttachListener(android.view.ViewTreeObserver$OnWindowAttachListener)> -> _NONE_
<android.content.ContentResolver: boolean isSyncActive(android.accounts.Account,java.lang.String)> android.permission.READ_SYNC_STATS -> _NONE_
<android.view.KeyEvent: boolean isShiftPressed()> -> _NONE_
<android.content.res.TypedArray: boolean getBoolean(int,boolean)> -> _SOURCE_
<android.webkit.WebSettings: int getMinimumLogicalFontSize()> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: boolean setName(java.lang.String)> android.permission.BLUETOOTH_ADMIN android.permission.BLUETOOTH -> _NONE_
<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()> -> _SOURCE_
<android.widget.AbsListView: void setVelocityScale(float)> -> _NONE_
<android.widget.ExpandableListView: void setOnChildClickListener(android.widget.ExpandableListView$OnChildClickListener)> -> _SINK_ 
<java.net.URL: java.lang.String getHost()> -> _SOURCE_
<java.math.BigInteger: java.math.BigInteger gcd(java.math.BigInteger)> -> _NONE_
<android.content.ContentProviderOperation: android.content.ContentProviderOperation$Builder newDelete(android.net.Uri)> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: int getLiveRegion()> -> _SOURCE_
<android.widget.TextView: void <init>(android.content.Context,android.util.AttributeSet)> -> _NONE_
<android.content.Intent: byte[] getByteArrayExtra(java.lang.String)> -> _SOURCE_
<android.content.IntentFilter: void addDataScheme(java.lang.String)> -> _NONE_
<android.widget.AdapterView: java.lang.Object getSelectedItem()> -> _SOURCE_
<java.lang.Character: int codePointBefore(char[],int)> -> _SINK_ 
<java.util.Random: double nextGaussian()> -> _NONE_
<android.telephony.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)> -> _SINK_ 
<android.graphics.Matrix: void reset()> -> _NONE_
<android.content.pm.PackageItemInfo: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<android.os.Bundle: void putCharSequenceArrayList(java.lang.String,java.util.ArrayList)> -> _NONE_
<android.content.ContextWrapper: int getWallpaperDesiredMinimumWidth()> -> _SOURCE_
<android.location.LocationManager: void removeNmeaListener(android.location.GpsStatus$NmeaListener)> -> _NONE_
<android.os.ParcelFileDescriptor: void close()> -> _NONE_
<java.lang.Integer: long longValue()> -> _NONE_
<android.os.Message: java.lang.Runnable getCallback()> -> _SOURCE_
<java.util.ArrayList: java.lang.Object get(int)> -> _SOURCE_
<android.widget.TextView: float getTextScaleX()> -> _SOURCE_
<android.widget.AbsoluteLayout: android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)> -> _NONE_
<java.lang.Long: int compare(long,long)> -> _SINK_ 
<android.view.animation.Animation: boolean getTransformation(long,android.view.animation.Transformation)> -> _SOURCE_
<java.nio.LongBuffer: java.nio.LongBuffer wrap(long[])> -> _NONE_
<android.util.Log: int println(int,java.lang.String,java.lang.String)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.view.InputDevice: int getId()> -> _SOURCE_
<android.graphics.Matrix: void mapVectors(float[],float[])> -> _NONE_
<android.view.View: int getPaddingEnd()> -> _SOURCE_
<android.content.res.Resources: java.io.InputStream openRawResource(int)> -> _NONE_
<java.lang.Character: char reverseBytes(char)> -> _SINK_ 
<android.view.KeyEvent$DispatcherState: void handleUpEvent(android.view.KeyEvent)> -> _NONE_
<android.graphics.Bitmap: int getScaledWidth(android.util.DisplayMetrics)> -> _SOURCE_
<android.bluetooth.BluetoothClass: java.lang.String toString()> -> _NONE_
<android.widget.TextView: boolean isPaddingOffsetRequired()> -> _NONE_
<android.view.View: android.view.ViewPropertyAnimator animate()> -> _NONE_
<android.os.Parcel: java.util.ArrayList readArrayList(java.lang.ClassLoader)> -> _SOURCE_
<android.view.animation.Animation: void setDetachWallpaper(boolean)> -> _NONE_
<android.content.ContextWrapper: java.io.File getDatabasePath(java.lang.String)> -> _SOURCE_
<android.view.inputmethod.ExtractedText: int describeContents()> -> _SINK_ 
<android.app.backup.BackupDataInputStream: int size()> -> _SINK_ 
<java.util.ArrayList: boolean equals(java.lang.Object)> -> _NONE_
<android.view.Window: int getLocalFeatures()> -> _SOURCE_
<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericParameterTypes()> -> _SOURCE_
<android.widget.AbsListView: void onWindowFocusChanged(boolean)> -> _NONE_
<android.provider.Settings$NameValueTable: boolean putString(android.content.ContentResolver,android.net.Uri,java.lang.String,java.lang.String)> -> _NONE_
<android.view.animation.Animation: void start()> -> _NONE_
<android.content.res.ColorStateList: android.content.res.ColorStateList createFromXml(android.content.res.Resources,org.xmlpull.v1.XmlPullParser)> -> _NONE_
<android.content.ContentResolver: android.content.ContentProviderClient acquireUnstableContentProviderClient(android.net.Uri)> -> _SOURCE_
<android.content.pm.PathPermission: void <init>(android.os.Parcel)> -> _NONE_
<java.lang.Double: float floatValue()> -> _NONE_
<java.nio.charset.Charset: boolean equals(java.lang.Object)> -> _NONE_
<java.lang.Short: java.lang.Short decode(java.lang.String)> -> _SINK_ 
<android.content.ContextWrapper: java.io.File[] getObbDirs()> -> _SOURCE_
<android.media.MediaFormat: void setFloat(java.lang.String,float)> -> _SINK_ 
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int)> -> _SINK_ 
<android.graphics.Xfermode: void <init>()> -> _NONE_
<android.webkit.WebView: android.net.http.SslCertificate getCertificate()> -> _SOURCE_
<android.app.Fragment: android.app.Fragment instantiate(android.content.Context,java.lang.String)> -> _NONE_
<java.lang.ThreadGroup: void list()> -> _NONE_
<android.app.Activity: boolean shouldUpRecreateTask(android.content.Intent)> -> _SINK_ 
<android.view.animation.Animation: void setStartOffset(long)> -> _NONE_
<android.app.Dialog: void <init>(android.content.Context,boolean,android.content.DialogInterface$OnCancelListener)> -> _NONE_
<android.app.backup.BackupDataOutput: int writeEntityHeader(java.lang.String,int)> -> _SINK_ 
<android.webkit.SslErrorHandler: void proceed()> -> _NONE_
<android.view.MotionEvent: float getHistoricalToolMajor(int,int)> -> _SOURCE_
<android.app.PendingIntent$CanceledException: void <init>()> -> _NONE_
<android.app.Dialog: boolean onTouchEvent(android.view.MotionEvent)> -> _NONE_
<java.lang.Character: boolean isUnicodeIdentifierPart(int)> -> _NONE_
<android.net.wifi.WifiManager: int getWifiState()> -> _SOURCE_
<android.animation.Keyframe: float getFraction()> -> _SOURCE_
<java.lang.Integer: int compareTo(java.lang.Object)> -> _SINK_ 
<android.hardware.Camera$Parameters: int getPictureFormat()> -> _SOURCE_
<android.content.res.Resources: void getValueForDensity(int,int,android.util.TypedValue,boolean)> -> _SOURCE_
<android.widget.ExpandableListView: void setChildIndicatorBounds(int,int)> -> _SINK_ 
<java.security.cert.CertPath: java.lang.String getType()> -> _SOURCE_
<java.lang.UnsupportedOperationException: void <init>()> -> _NONE_
<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)> -> _NONE_
<android.os.Parcel: void writeValue(java.lang.Object)> -> _NONE_
<android.webkit.WebSettings: void setSavePassword(boolean)> -> _NONE_
<android.net.http.SslError: int getPrimaryError()> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: int getScanMode()> -> _SOURCE_
<android.os.Handler: void removeMessages(int)> -> _NONE_
<android.content.ContextWrapper: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)> -> _SINK_ 
<android.print.PrintDocumentInfo: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<android.content.res.ColorStateList: int getDefaultColor()> -> _SOURCE_
<android.hardware.Camera$Parameters: void <init>(android.hardware.Camera)> -> _NONE_
<java.nio.channels.SocketChannel: long read(java.nio.ByteBuffer[])> -> _SOURCE_
<android.telephony.CellIdentityCdma: java.lang.String toString()> -> _NONE_
<android.app.Fragment: void setHasOptionsMenu(boolean)> -> _SINK_ 
<java.net.Socket: int getSoLinger()> -> _SOURCE_
<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()> -> _SOURCE_
<java.net.DatagramSocket: void setBroadcast(boolean)> -> _SINK_ 
<android.view.MotionEvent: float getXPrecision()> -> _SOURCE_
<java.lang.Double: int compareTo(java.lang.Object)> -> _SINK_ 
<java.io.PrintWriter: void println(java.lang.String)> -> _NONE_
<android.app.Dialog: boolean dispatchKeyShortcutEvent(android.view.KeyEvent)> -> _NONE_
<android.graphics.Picture: void <init>()> -> _NONE_
<android.os.Debug$MemoryInfo: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<android.graphics.Matrix: boolean preRotate(float)> -> _NONE_
<android.os.Parcel: void writeString(java.lang.String)> -> _NONE_
<android.nfc.tech.IsoDep: byte[] getHistoricalBytes()> -> _SOURCE_
<android.view.animation.Animation: void setFillEnabled(boolean)> -> _NONE_
<android.content.ContentValues: void remove(java.lang.String)> -> _NONE_
<android.widget.AbsListView: boolean performItemClick(android.view.View,int,long)> -> _NONE_
<android.util.Log: int i(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_ 
<android.util.TypedValue: java.lang.String coerceToString(int,int)> -> _NONE_
<java.net.URLStreamHandler: int getDefaultPort()> -> _SOURCE_
<android.view.MotionEvent: float getX(int)> -> _SOURCE_
<java.net.DatagramSocket: void setSoTimeout(int)> -> _SINK_ 
<java.util.Date: int getSeconds()> -> _SOURCE_
<android.graphics.drawable.Drawable: int getAlpha()> -> _SOURCE_
<android.view.ViewGroup: int getChildDrawingOrder(int,int)> -> _SOURCE_
<java.lang.Short: java.lang.String toString()> -> _NONE_
<java.lang.Float: java.lang.String toString(float)> -> _SINK_ 
<android.content.IntentFilter$AuthorityEntry: int getPort()> -> _SOURCE_
<android.database.sqlite.SQLiteClosable: void acquireReference()> -> _NONE_
<android.view.ViewGroup: void dispatchSetPressed(boolean)> -> _NONE_
<android.content.IntentFilter$AuthorityEntry: void <init>(java.lang.String,java.lang.String)> -> _NONE_
<java.net.ServerSocket: int getSoTimeout()> -> _SOURCE_
<android.util.Log: int v(java.lang.String,java.lang.String)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.net.sip.SipSession: void <init>()> -> _NONE_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,int[])> -> _NONE_
<java.util.AbstractList: java.util.List subList(int,int)> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo$RangeInfo: android.view.accessibility.AccessibilityNodeInfo$RangeInfo obtain(int,float,float,float)> -> _SINK_ 
<android.text.Layout: float getSpacingMultiplier()> -> _SOURCE_
<java.util.Date: int getDay()> -> _SOURCE_
<android.view.View: void setTextDirection(int)> -> _SINK_ 
<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPreferredPreviewSizeForVideo()> -> _SOURCE_
<android.animation.PropertyValuesHolder: void setKeyframes(android.animation.Keyframe[])> -> _SINK_ 
<android.os.Parcel: void readMap(java.util.Map,java.lang.ClassLoader)> -> _NONE_
<android.bluetooth.BluetoothGatt: boolean setCharacteristicNotification(android.bluetooth.BluetoothGattCharacteristic,boolean)> -> _SINK_ 
<android.util.TypedValue: void <init>()> -> _NONE_
<android.hardware.Camera$Parameters: void setJpegThumbnailQuality(int)> -> _SINK_ 
<android.webkit.WebView: void requestImageRef(android.os.Message)> -> _NONE_
<android.bluetooth.BluetoothAdapter: int getProfileConnectionState(int)> -> _SOURCE_
<android.telephony.CellInfoCdma: android.telephony.CellSignalStrengthCdma getCellSignalStrength()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.telephony.CellIdentityCdma: int getLatitude()> -> _SOURCE_
<android.animation.Keyframe: java.lang.Class getType()> -> _SOURCE_
<java.net.URLConnection: void setContentHandlerFactory(java.net.ContentHandlerFactory)> -> _NONE_
<android.content.pm.ApplicationInfo: java.lang.CharSequence loadDescription(android.content.pm.PackageManager)> -> _NONE_
<android.content.ContentResolver: android.os.Bundle call(android.net.Uri,java.lang.String,java.lang.String,android.os.Bundle)> -> _NONE_
<android.bluetooth.BluetoothGattCharacteristic: java.util.List getDescriptors()> -> _SOURCE_
<android.content.ContentResolver: android.content.ContentProviderClient acquireContentProviderClient(java.lang.String)> -> _NONE_
<java.lang.StringBuilder: void <init>(java.lang.CharSequence)> -> _NONE_
<android.content.Loader: boolean onCancelLoad()> -> _NONE_
<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String,java.lang.Object[])> -> _NONE_
<android.widget.TextView: float getLeftFadingEdgeStrength()> -> _SOURCE_
<android.content.SyncAdapterType: java.lang.String getSettingsActivity()> -> _SOURCE_
<android.content.ContentProviderClient: android.net.Uri uncanonicalize(android.net.Uri)> -> _SOURCE_
<android.view.ViewGroup: void setClipToPadding(boolean)> -> _NONE_
<android.content.res.Resources$Theme: void setTo(android.content.res.Resources$Theme)> -> _SINK_ 
<android.view.InputEvent: void <clinit>()> -> _NONE_
<java.nio.CharBuffer: java.nio.CharBuffer put(char[])> -> _SOURCE_
<android.view.Display: void getSize(android.graphics.Point)> -> _SOURCE_
<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])> -> _SOURCE_
<android.view.KeyCharacterMap: boolean isPrintingKey(int)> -> _NONE_
<android.content.SyncAdapterType: void <clinit>()> -> _NONE_
<android.graphics.Paint$Cap: void <clinit>()> -> _NONE_
<android.content.res.Resources$NotFoundException: void <init>()> -> _NONE_
<android.telephony.ServiceState: void <init>()> -> _NONE_
<android.net.sip.SipAudioCall: boolean isMuted()> -> _NONE_
<android.widget.TextView: int getMaxHeight()> -> _SOURCE_
<android.webkit.WebSettings: void setStandardFontFamily(java.lang.String)> -> _NONE_
<android.content.Intent: int getIntExtra(java.lang.String,int)> -> _SOURCE_
<java.security.CodeSigner: java.security.Timestamp getTimestamp()> -> _SOURCE_
<android.webkit.WebView: boolean onGenericMotionEvent(android.view.MotionEvent)> -> _NONE_
<android.hardware.Camera: void stopFaceDetection()> -> _NONE_
<android.view.ViewGroup: void detachAllViewsFromParent()> -> _NONE_
<android.webkit.WebView: void documentHasImages(android.os.Message)> -> _NONE_
<android.view.View: void onAnimationStart()> -> _NONE_
<android.os.Parcel: void readStringList(java.util.List)> -> _NONE_
<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder onUnmappableCharacter(java.nio.charset.CodingErrorAction)> -> _SOURCE_
<java.lang.Boolean: void <clinit>()> -> _NONE_
<java.nio.charset.Charset: int compareTo(java.lang.Object)> -> _NONE_
<android.view.View: void unscheduleDrawable(android.graphics.drawable.Drawable)> -> _NONE_
<java.lang.Integer: int compareTo(java.lang.Integer)> -> _SINK_ 
<android.widget.AbsListView: void scrollListBy(int)> -> _NONE_
<android.webkit.WebView: void saveWebArchive(java.lang.String)> -> _NONE_
<org.apache.http.ProtocolVersion: boolean isComparable(org.apache.http.ProtocolVersion)> -> _NONE_
<android.media.MediaPlayer: void addTimedTextSource(java.lang.String,java.lang.String)> -> _NONE_
<android.graphics.Matrix: boolean preSkew(float,float)> -> _NONE_
<android.view.View: int computeHorizontalScrollOffset()> -> _NONE_
<java.lang.StringBuffer: int length()> -> _SINK_ 
<android.content.IntentFilter: int describeContents()> -> _SINK_ 
<android.content.ContextWrapper: java.io.File getExternalFilesDir(java.lang.String)> -> _SOURCE_
<android.view.ContextThemeWrapper: void applyOverrideConfiguration(android.content.res.Configuration)> -> _NONE_
<android.database.sqlite.SQLiteDatabase: boolean yieldIfContendedSafely(long)> -> _NONE_
<android.view.View: void sendAccessibilityEventUnchecked(android.view.accessibility.AccessibilityEvent)> -> _NONE_
<java.lang.StringBuilder: java.lang.CharSequence subSequence(int,int)> -> _NONE_
<java.util.HashMap: java.util.Set entrySet()> -> _NONE_
<android.text.Layout: android.text.Layout$Alignment getAlignment()> -> _SOURCE_
<android.view.ViewGroup: boolean gatherTransparentRegion(android.graphics.Region)> -> _NONE_
<android.view.ViewGroup$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)> -> _NONE_
<java.lang.Number: short shortValue()> -> _NONE_
<android.content.Intent: android.content.Intent getIntentOld(java.lang.String)> -> _SOURCE_
<android.content.Intent: android.content.Intent putExtras(android.os.Bundle)> -> _NONE_
<org.apache.http.message.BasicLineParser: org.apache.http.RequestLine createRequestLine(java.lang.String,java.lang.String,org.apache.http.ProtocolVersion)> -> _NONE_
<android.content.ContentProviderOperation$Builder: android.content.ContentProviderOperation$Builder withValue(java.lang.String,java.lang.Object)> -> _NONE_
<java.io.FileDescriptor: void <init>()> -> _NONE_
<java.lang.Character: int codePointAt(java.lang.CharSequence,int)> -> _SINK_ 
<android.location.Criteria: int getVerticalAccuracy()> -> _SOURCE_
<java.net.URISyntaxException: int getIndex()> -> _SOURCE_
<android.view.View: boolean onKeyMultiple(int,int,android.view.KeyEvent)> -> _NONE_
<java.lang.Character: boolean isSpace(char)> -> _NONE_
<java.io.PrintWriter: void print(float)> -> _NONE_
<android.hardware.Camera$Parameters: java.util.List getMeteringAreas()> -> _SOURCE_
<java.lang.ArrayIndexOutOfBoundsException: void <init>()> -> _NONE_
<android.view.ActionProvider: void onPrepareSubMenu(android.view.SubMenu)> -> _NONE_
<android.nfc.NdefMessage: void <clinit>()> -> _NONE_
<android.graphics.Region: boolean op(int,int,int,int,android.graphics.Region$Op)> -> _NONE_
<java.lang.StringBuilder: void <init>(java.lang.String)> -> _NONE_
<android.content.pm.ApplicationInfo: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<android.graphics.Bitmap: void <init>()> -> _NONE_
<android.net.sip.SipManager: void open(android.net.sip.SipProfile)> -> _NONE_
<android.content.ContentResolver: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> -> _NONE_
<android.app.Activity: boolean onMenuOpened(int,android.view.Menu)> -> _NONE_
<android.view.ActionProvider: boolean isVisible()> -> _NONE_
<android.net.wifi.WifiEnterpriseConfig: java.lang.String getIdentity()> -> _SOURCE_
<android.net.http.SslCertificate: android.net.http.SslCertificate restoreState(android.os.Bundle)> -> _NONE_
<java.util.Date: int getDate()> -> _SOURCE_
<java.io.FileDescriptor: void sync()> -> _NONE_
<android.content.ContentResolver: android.content.SyncInfo getCurrentSync()> android.permission.READ_SYNC_STATS -> _SOURCE_
<android.telephony.ServiceState: void <clinit>()> -> _NONE_
<java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])> -> _SINK_ 
<android.view.View: float getTopFadingEdgeStrength()> -> _SOURCE_
<android.content.ContentProvider: android.content.Context getContext()> -> _SOURCE_
<android.graphics.RectF: float width()> -> _NONE_
<android.accounts.AccountsException: void <init>()> -> _NONE_
<java.lang.ClassLoader: java.lang.Class defineClass(java.lang.String,java.nio.ByteBuffer,java.security.ProtectionDomain)> -> _NONE_
<android.app.backup.BackupDataInput: int readEntityData(byte[],int,int)> -> _SINK_ 
<android.content.res.AssetFileDescriptor: long getDeclaredLength()> -> _SOURCE_
<android.widget.AbsoluteLayout: void onLayout(boolean,int,int,int,int)> -> _NONE_
<android.widget.TextView: int getInputType()> -> _SOURCE_
<android.webkit.HttpAuthHandler: void <init>()> -> _NONE_
<java.nio.FloatBuffer: java.nio.FloatBuffer put(float[],int,int)> -> _NONE_
<java.lang.ClassLoader: java.lang.Class defineClass(byte[],int,int)> -> _SOURCE_
<android.app.Activity: void onNewIntent(android.content.Intent)> -> _SINK_ 
<android.app.backup.BackupAgentHelper: void addHelper(java.lang.String,android.app.backup.BackupHelper)> -> _NONE_
<android.widget.AbsListView: boolean onInterceptTouchEvent(android.view.MotionEvent)> -> _NONE_
<android.os.Parcel: void writeNoException()> -> _NONE_
<android.content.res.AssetFileDescriptor: android.os.Bundle getExtras()> -> _SOURCE_
<java.nio.ByteBuffer: int arrayOffset()> -> _NONE_
<android.print.PageRange: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<java.security.cert.X509Certificate: java.util.Collection getSubjectAlternativeNames()> -> _SOURCE_
<java.net.URL: java.lang.String getPath()> -> _SOURCE_
<android.content.pm.ServiceInfo: void <init>()> -> _NONE_
<android.app.Dialog: boolean onCreatePanelMenu(int,android.view.Menu)> -> _NONE_
<java.lang.VirtualMachineError: void <init>(java.lang.String)> -> _NONE_
<android.animation.Animator: java.util.ArrayList getListeners()> -> _SOURCE_
<android.view.Window: void setType(int)> -> _NONE_
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,boolean,android.accounts.AccountManagerCallback,android.os.Handler)> -> _SOURCE_
<java.security.spec.EllipticCurve: void <init>(java.security.spec.ECField,java.math.BigInteger,java.math.BigInteger,byte[])> -> _NONE_
<android.content.pm.ResolveInfo: void <clinit>()> -> _NONE_
<android.content.pm.ActivityInfo: int describeContents()> -> _SINK_ 
<android.content.IntentFilter: java.util.Iterator pathsIterator()> -> _NONE_
<android.widget.TextView$BufferType: void <clinit>()> -> _NONE_
<android.graphics.Matrix: boolean preConcat(android.graphics.Matrix)> -> _NONE_
<java.net.Socket: void setTcpNoDelay(boolean)> -> _SINK_ 
<java.lang.StringBuffer: void setLength(int)> -> _SINK_ 
<android.media.MediaFormat: long getLong(java.lang.String)> -> _SOURCE_
<android.animation.ValueAnimator: long getDuration()> -> _SOURCE_
<android.view.View: boolean isOpaque()> -> _NONE_
<android.content.res.TypedArray: android.content.res.Resources getResources()> -> _SOURCE_
<android.view.View: boolean onCheckIsTextEditor()> -> _NONE_
<android.app.Dialog: boolean onMenuItemSelected(int,android.view.MenuItem)> -> _NONE_
<java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)> -> _SOURCE_
<java.io.File: long length()> -> _NONE_
<android.app.Fragment: void onDestroyOptionsMenu()> -> _NONE_
<android.graphics.Paint: boolean isStrikeThruText()> -> _NONE_
<java.util.HashMap: boolean containsValue(java.lang.Object)> -> _NONE_
<android.app.LocalActivityManager: java.lang.String getCurrentId()> -> _SOURCE_
<android.location.Location: boolean hasBearing()> -> _NONE_
<android.widget.TextView: boolean setFrame(int,int,int,int)> -> _SINK_ 
<android.widget.TextView: boolean onPreDraw()> android.permission.STOP_APP_SWITCHES -> _NONE_
<java.lang.Class: java.net.URL getResource(java.lang.String)> -> _SOURCE_
<android.view.View: float getAlpha()> -> _SOURCE_
<android.content.Intent: java.lang.String getStringExtra(java.lang.String)> -> _SOURCE_
<java.lang.InterruptedException: void <init>()> -> _NONE_
<android.accounts.AccountManager: android.accounts.AccountManager get(android.content.Context)> -> _SOURCE_
<android.content.ContentProviderOperation$Builder: android.content.ContentProviderOperation$Builder withYieldAllowed(boolean)> -> _NONE_
<android.os.Bundle: float getFloat(java.lang.String)> -> _SOURCE_
<java.lang.Thread: void setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)> -> _SINK_ 
<android.net.wifi.SupplicantState: android.net.wifi.SupplicantState[] values()> -> _NONE_
<android.database.sqlite.SQLiteDatabase: void markTableSyncable(java.lang.String,java.lang.String,java.lang.String)> -> _NONE_
<android.util.SparseArray: void clear()> -> _NONE_
<android.webkit.WebChromeClient: boolean onJsAlert(android.webkit.WebView,java.lang.String,java.lang.String,android.webkit.JsResult)> -> _NONE_
<java.lang.Character: int codePointBefore(java.lang.CharSequence,int)> -> _SINK_ 
<android.view.KeyEvent: android.view.KeyEvent changeFlags(android.view.KeyEvent,int)> -> _NONE_
<android.content.IntentFilter$AuthorityEntry: java.lang.String getHost()> -> _SOURCE_
<java.net.URISyntaxException: java.lang.String getReason()> -> _SOURCE_
<android.widget.RemoteViews: void setLong(int,java.lang.String,long)> -> _SINK_ 
<android.widget.TextView: int length()> -> _NONE_
<android.os.Parcel: void <clinit>()> -> _NONE_
<java.util.Locale: boolean equals(java.lang.Object)> -> _NONE_
<android.graphics.Rect: float exactCenterY()> -> _NONE_
<java.lang.Integer: java.lang.Integer valueOf(int)> -> _SINK_ 
<android.graphics.Region$Op: void <clinit>()> -> _NONE_
<android.app.Fragment: boolean isHidden()> -> _NONE_
<android.content.ContentValues: void <init>()> -> _NONE_
<java.lang.reflect.Method: java.lang.String toString()> -> _NONE_
<android.view.ViewGroup: void removeViews(int,int)> -> _NONE_
<java.lang.String: java.lang.String valueOf(double)> -> _SINK_ 
<android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState valueOf(java.lang.String)> -> _SINK_ 
<android.content.pm.PermissionInfo: void <init>(android.content.pm.PermissionInfo)> -> _NONE_
<android.location.Location: boolean hasSpeed()> -> _NONE_
<java.lang.ThreadGroup: java.lang.String toString()> -> _NONE_
<android.view.View: android.view.ViewParent getParent()> -> _SOURCE_
<java.lang.Short: short parseShort(java.lang.String,int)> -> _SINK_ 
<android.provider.Settings$Secure: void <clinit>()> -> _NONE_
<android.database.sqlite.SQLiteDatabase: boolean yieldIfContendedSafely()> -> _NONE_
<android.graphics.Paint: boolean isLinearText()> -> _NONE_
<android.telephony.TelephonyManager: int getNetworkType()> -> _SOURCE_
<android.app.Activity: boolean onKeyShortcut(int,android.view.KeyEvent)> -> _NONE_
<java.lang.String: void <init>(java.lang.StringBuilder)> -> _NONE_
<android.print.PageRange: int describeContents()> -> _SINK_ 
<android.view.View: void onWindowVisibilityChanged(int)> -> _NONE_
<android.view.View$DragShadowBuilder: void onDrawShadow(android.graphics.Canvas)> -> _NONE_
<android.content.Intent: android.content.Intent putExtras(android.content.Intent)> -> _SINK_ 
<android.bluetooth.BluetoothGattDescriptor: int getPermissions()> -> _SOURCE_
<java.lang.ThreadGroup: int enumerate(java.lang.Thread[])> -> _SINK_ 
<java.nio.channels.SelectionKey: boolean isConnectable()> -> _NONE_
<android.test.mock.MockContentResolver: void <init>(android.content.Context)> -> _NONE_
<android.app.TaskStackBuilder: android.content.Intent[] getIntents()> -> _SOURCE_
<android.view.View: void addOnAttachStateChangeListener(android.view.View$OnAttachStateChangeListener)> -> _NONE_
<android.hardware.Camera$Parameters: java.util.List getSupportedVideoSizes()> -> _SOURCE_
<android.widget.AbsListView: void setScrollBarStyle(int)> -> _NONE_
<java.lang.StringBuffer: void <init>()> -> _NONE_
<android.os.UserHandle: void <clinit>()> -> _NONE_
<org.apache.http.protocol.DefaultedHttpContext: void <init>(org.apache.http.protocol.HttpContext,org.apache.http.protocol.HttpContext)> -> _NONE_
<android.view.View: void setBackgroundDrawable(android.graphics.drawable.Drawable)> -> _SINK_ 
<java.util.concurrent.TimeUnit: long toHours(long)> -> _NONE_
<android.app.Activity: void takeKeyEvents(boolean)> -> _NONE_
<java.lang.AbstractStringBuilder: java.lang.String substring(int)> -> _NONE_
<java.io.PrintStream: void <init>(java.io.OutputStream,boolean,java.lang.String)> -> _NONE_
<android.app.ActivityManager: boolean clearApplicationUserData()> -> _NONE_
<android.widget.AbsoluteLayout: android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()> -> _NONE_
<android.view.MotionEvent$PointerProperties: int hashCode()> -> _SINK_ 
<java.lang.ClassLoader: void <init>(java.lang.ClassLoader)> -> _NONE_
<android.util.Log: int wtf(java.lang.String,java.lang.Throwable)> -> _SINK_ 
<android.net.wifi.WifiManager$MulticastLock: void acquire()> -> _NONE_
<android.widget.AdapterView: void removeAllViews()> -> _NONE_
<android.text.Spannable$Factory: android.text.Spannable$Factory getInstance()> -> _SOURCE_
<android.view.ViewGroup: android.view.View focusSearch(android.view.View,int)> -> _NONE_
<android.view.View: int getHorizontalFadingEdgeLength()> -> _SOURCE_
<android.content.ClipData: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<android.content.ClipData: android.content.ClipData newPlainText(java.lang.CharSequence,java.lang.CharSequence)> -> _NONE_
<android.view.animation.Animation: void initialize(int,int,int,int)> -> _NONE_
<android.media.MediaFormat: void setInteger(java.lang.String,int)> -> _SINK_ 
<android.graphics.Canvas: void rotate(float,float,float)> -> _NONE_
<android.view.Surface: void <init>(android.graphics.SurfaceTexture)> -> _NONE_
<java.nio.CharBuffer: java.nio.CharBuffer put(char[],int,int)> -> _NONE_
<java.util.ArrayList: void removeRange(int,int)> -> _NONE_
<android.content.pm.FeatureInfo: java.lang.String getGlEsVersion()> -> _SOURCE_
<java.lang.NoSuchMethodException: void <init>(java.lang.String)> -> _NONE_
<java.util.BitSet: void andNot(java.util.BitSet)> -> _NONE_
<java.lang.Float: boolean isNaN(float)> -> _NONE_
<java.util.BitSet: void clear()> -> _NONE_
<android.app.Fragment: android.os.Bundle getArguments()> -> _SOURCE_
<java.io.Reader: int read()> -> _NONE_
<android.net.wifi.WifiEnterpriseConfig: void setClientKeyEntry(java.security.PrivateKey,java.security.cert.X509Certificate)> -> _SINK_ 
<android.app.Dialog: void setFeatureDrawableResource(int,int)> -> _SINK_ 
<android.view.WindowId: void <clinit>()> -> _NONE_
<android.text.style.DynamicDrawableSpan: void <init>()> -> _NONE_
<android.app.Activity: boolean startNextMatchingActivity(android.content.Intent)> android.permission.BROADCAST_STICKY android.permission.MANAGE_APP_TOKENS -> _SINK_ 
<android.os.Parcel: java.util.ArrayList createBinderArrayList()> -> _NONE_
<android.location.Criteria: void setVerticalAccuracy(int)> -> _SINK_ 
<android.webkit.WebSettings: void setLayoutAlgorithm(android.webkit.WebSettings$LayoutAlgorithm)> -> _NONE_
<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo: int getRowSpan()> -> _SOURCE_
<android.content.Intent: void <init>(android.content.Intent)> -> _SINK_ 
<android.os.Parcel: java.lang.Object readValue(java.lang.ClassLoader)> -> _NONE_
<android.location.LocationManager: void requestSingleUpdate(android.location.Criteria,android.location.LocationListener,android.os.Looper)> -> _NONE_
<android.location.Location: void setSpeed(float)> -> _SINK_ 
<android.view.View: java.lang.Object getTag(int)> -> _SOURCE_
<android.telephony.PhoneStateListener: void onCellInfoChanged(java.util.List)> -> _NONE_
<android.view.View: void setEnabled(boolean)> -> _SINK_ 
<android.view.View: boolean hasWindowFocus()> -> _NONE_
<android.database.sqlite.SQLiteDatabase: void finalize()> -> _NONE_
<android.view.inputmethod.ExtractedText: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<android.webkit.WebSettings: int getDefaultFontSize()> -> _SOURCE_
<android.telephony.PhoneStateListener: void onServiceStateChanged(android.telephony.ServiceState)> -> _NONE_
<android.widget.ListView: android.view.View findViewTraversal(int)> -> _NONE_
<android.widget.AbsListView: void <init>(android.content.Context)> -> _NONE_
<android.content.IntentFilter: void writeToXml(org.xmlpull.v1.XmlSerializer)> -> _NONE_
<android.graphics.RectF: void union(android.graphics.RectF)> -> _NONE_
<android.widget.ListView: boolean dispatchKeyEvent(android.view.KeyEvent)> -> _NONE_
<java.net.Socket: int getLocalPort()> -> _SOURCE_
<android.util.Log: int i(java.lang.String,java.lang.String)> -> _SINK_ 
<java.lang.StringBuilder: java.lang.StringBuilder deleteCharAt(int)> -> _NONE_
<java.lang.Byte: int compareTo(java.lang.Object)> -> _SINK_ 
<android.graphics.ColorFilter: void finalize()> -> _NONE_
<android.database.sqlite.SQLiteProgram: void bindDouble(int,double)> -> _NONE_
<android.os.Message: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<android.app.Activity: void onDetachedFromWindow()> -> _NONE_
<android.widget.ListView: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)> -> _NONE_
<android.app.ExpandableListActivity: long getSelectedPosition()> -> _SOURCE_
<java.util.BitSet: void xor(java.util.BitSet)> -> _NONE_
<android.widget.ListView: void setHeaderDividersEnabled(boolean)> -> _SINK_ 
<java.lang.Class: boolean isAnnotation()> -> _NONE_
<android.widget.AbsListView: void jumpDrawablesToCurrentState()> -> _NONE_
<android.app.backup.BackupAgent: void onDestroy()> -> _NONE_
<android.content.ContentProviderClient: java.lang.String[] getStreamTypes(android.net.Uri,java.lang.String)> -> _SOURCE_
<java.io.File: java.lang.String getPath()> -> _SOURCE_
<android.os.WorkSource: void clear()> -> _NONE_
<android.content.Intent: float getFloatExtra(java.lang.String,float)> -> _SOURCE_
<android.app.Fragment: void unregisterForContextMenu(android.view.View)> -> _NONE_
<android.app.Dialog: void show()> -> _NONE_
<android.webkit.WebView: boolean onTrackballEvent(android.view.MotionEvent)> -> _NONE_
<android.app.ExpandableListActivity: void setListAdapter(android.widget.ExpandableListAdapter)> -> _SINK_ 
<android.os.WorkSource: void <init>()> -> _NONE_
<android.text.Layout: int getHeight()> -> _SOURCE_
<android.graphics.Paint: void setShadowLayer(float,float,float,int)> -> _SINK_ 
<android.graphics.Typeface: boolean isBold()> -> _NONE_
<android.app.Fragment: void <init>()> -> _NONE_
<java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult encode(java.nio.CharBuffer,java.nio.ByteBuffer,boolean)> -> _SOURCE_
<android.webkit.WebResourceResponse: java.lang.String getMimeType()> -> _SOURCE_
<java.io.File: java.io.File getCanonicalFile()> -> _SOURCE_
<android.view.Surface$OutOfResourcesException: void <init>()> -> _NONE_
<android.text.style.ImageSpan: void <init>(android.content.Context,int,int)> -> _NONE_
<android.content.ContentResolver: android.net.Uri canonicalize(android.net.Uri)> -> _SOURCE_
<android.view.View: void setOverScrollMode(int)> -> _SINK_ 
<java.util.Locale: void <init>(java.lang.String,java.lang.String,java.lang.String)> -> _NONE_
<android.view.InputDevice: void <clinit>()> -> _NONE_
<android.net.sip.SipSession$Listener: void onRegistrationDone(android.net.sip.SipSession,int)> -> _NONE_
<android.widget.AbsListView: void setFriction(float)> -> _NONE_
<android.view.accessibility.AccessibilityRecord: void setScrollable(boolean)> -> _SINK_ 
<java.io.PrintStream: void print(double)> -> _NONE_
<android.widget.TextView$BufferType: android.widget.TextView$BufferType[] values()> -> _NONE_
<android.net.DhcpInfo: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<java.lang.IllegalAccessException: void <init>()> -> _NONE_
<android.content.ContentProvider: android.content.res.AssetFileDescriptor openTypedAssetFile(android.net.Uri,java.lang.String,android.os.Bundle,android.os.CancellationSignal)> -> _NONE_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,long)> -> _NONE_
<android.util.SparseArray: void <init>()> -> _NONE_
<android.widget.RemoteViews: void setViewVisibility(int,int)> -> _SINK_ 
<android.view.animation.Animation: boolean hasEnded()> -> _NONE_
<android.view.View: void setTag(int,java.lang.Object)> -> _SINK_ 
<java.lang.Float: boolean isInfinite()> -> _NONE_
<android.content.res.Configuration: int getLayoutDirection()> -> _SOURCE_
<java.util.ArrayList: boolean addAll(int,java.util.Collection)> -> _NONE_
<java.lang.reflect.Method: java.lang.Object getDefaultValue()> -> _SOURCE_
<android.widget.AbsListView: void setSelector(int)> -> _NONE_
<android.text.Editable$Factory: android.text.Editable newEditable(java.lang.CharSequence)> -> _NONE_
<android.content.res.AssetManager: android.content.res.AssetFileDescriptor openNonAssetFd(java.lang.String)> -> _SINK_ 
<android.view.KeyCharacterMap: boolean getKeyData(int,android.view.KeyCharacterMap$KeyData)> -> _SOURCE_
<android.os.Parcel: void writeByteArray(byte[])> -> _NONE_
<android.webkit.WebSettings: void setDefaultFontSize(int)> -> _NONE_
<android.graphics.Canvas: void drawPath(android.graphics.Path,android.graphics.Paint)> -> _NONE_
<android.os.Handler: boolean hasMessages(int)> -> _NONE_
<java.nio.DoubleBuffer: java.nio.DoubleBuffer put(double[],int,int)> -> _NONE_
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator translationYBy(float)> -> _NONE_
<android.animation.Animator: boolean isStarted()> -> _NONE_
<android.database.DataSetObserver: void onInvalidated()> -> _NONE_
<android.app.Notification$Builder: android.app.Notification$Builder setContentIntent(android.app.PendingIntent)> -> _SINK_ 
<android.view.View: void onDrawScrollBars(android.graphics.Canvas)> -> _NONE_
<android.media.MediaPlayer$TrackInfo: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<android.webkit.WebView: boolean dispatchKeyEvent(android.view.KeyEvent)> -> _NONE_
<android.content.pm.PackageItemInfo: android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager)> -> _NONE_
<java.lang.Byte: short shortValue()> -> _NONE_
<android.view.View: int getPaddingTop()> -> _SOURCE_
<android.bluetooth.BluetoothGattService: int getInstanceId()> -> _SOURCE_
<java.math.BigInteger: int bitLength()> -> _SINK_ 
<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])> -> _NONE_
<android.app.Application: void unregisterComponentCallbacks(android.content.ComponentCallbacks)> -> _NONE_
<java.net.ServerSocket: java.net.SocketAddress getLocalSocketAddress()> -> _SOURCE_
<java.lang.Character: int compare(char,char)> -> _SINK_ 
<android.hardware.Camera$Parameters: java.util.List getSupportedPictureFormats()> -> _SOURCE_
<android.view.MotionEvent: void offsetLocation(float,float)> -> _NONE_
<android.hardware.Camera$Parameters: java.lang.String getAntibanding()> -> _SOURCE_
<android.app.Activity: android.app.Dialog onCreateDialog(int)> -> _NONE_
<android.content.res.AssetFileDescriptor: java.io.FileOutputStream createOutputStream()> -> _NONE_
<java.lang.Byte: boolean equals(java.lang.Object)> -> _NONE_
<android.hardware.Camera$Parameters: java.util.List getSupportedFlashModes()> -> _SOURCE_
<android.app.ActivityManager$RunningAppProcessInfo: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<android.app.Activity: java.lang.Object getSystemService(java.lang.String)> -> _SOURCE_
<java.nio.charset.CharsetDecoder: java.nio.charset.CodingErrorAction malformedInputAction()> -> _NONE_
<android.view.View: boolean isScrollbarFadingEnabled()> -> _NONE_
<android.view.View: void onMeasure(int,int)> -> _NONE_
<java.io.OutputStream: void write(byte[],int,int)> -> _NONE_
<android.view.accessibility.AccessibilityNodeInfo: void setTextSelection(int,int)> -> _SINK_ 
<java.nio.charset.CharsetEncoder: float maxBytesPerChar()> -> _NONE_
<android.os.ParcelUuid: int hashCode()> -> _SINK_ 
<android.content.ContentProviderOperation: android.content.ContentValues resolveValueBackReferences(android.content.ContentProviderResult[],int)> -> _NONE_
<android.app.Fragment: boolean isVisible()> -> _NONE_
<android.view.View: void onDisplayHint(int)> -> _NONE_
<java.nio.ShortBuffer: java.nio.ShortBuffer allocate(int)> -> _NONE_
<android.view.View: void setTranslationY(float)> -> _SINK_ 
<android.view.InputDevice: android.view.InputDevice$MotionRange getMotionRange(int,int)> -> _SOURCE_
<android.os.Messenger: void <init>(android.os.Handler)> -> _NONE_
<org.apache.http.util.CharArrayBuffer: void append(char[],int,int)> -> _NONE_
<android.view.InflateException: void <init>()> -> _NONE_
<java.lang.Integer: int parseInt(java.lang.String,int)> -> _SINK_ 
<java.util.Locale: java.util.Locale[] getAvailableLocales()> -> _SOURCE_
<android.media.MediaPlayer: void selectTrack(int)> -> _NONE_
<android.bluetooth.BluetoothDevice: void <init>()> -> _NONE_
<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)> -> _NONE_
<android.content.res.TypedArray: int getDimensionPixelOffset(int,int)> -> _SOURCE_
<android.webkit.WebChromeClient: void onReceivedTouchIconUrl(android.webkit.WebView,java.lang.String,boolean)> -> _NONE_
<android.content.IntentFilter: java.util.Iterator typesIterator()> -> _NONE_
<android.net.Uri: java.lang.String encode(java.lang.String)> -> _NONE_
<android.webkit.WebView: void flingScroll(int,int)> -> _NONE_
<android.widget.TextView: void setSingleLine()> -> _SINK_ 
<android.app.Activity: void onContextMenuClosed(android.view.Menu)> -> _NONE_
<java.lang.Throwable: java.lang.Throwable fillInStackTrace()> -> _NONE_
<android.bluetooth.BluetoothGattCallback: void onServicesDiscovered(android.bluetooth.BluetoothGatt,int)> -> _NONE_
<android.view.MotionEvent: int getToolType(int)> -> _SOURCE_
<java.io.PrintWriter: java.io.PrintWriter append(char)> -> _NONE_
<android.database.sqlite.SQLiteQuery: java.lang.String toString()> -> _NONE_
<android.view.ViewTreeObserver: void addOnWindowFocusChangeListener(android.view.ViewTreeObserver$OnWindowFocusChangeListener)> -> _NONE_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[],android.os.CancellationSignal)> -> _SOURCE_
<android.view.ViewTreeObserver: void addOnGlobalFocusChangeListener(android.view.ViewTreeObserver$OnGlobalFocusChangeListener)> -> _NONE_
<android.os.Parcel: void writeByte(byte)> -> _NONE_
<android.widget.Scroller: void startScroll(int,int,int,int)> -> _NONE_
<android.graphics.Rect: boolean contains(int,int,int,int)> -> _NONE_
<android.widget.AbsListView: void layoutChildren()> -> _NONE_
<android.os.Bundle: void putDoubleArray(java.lang.String,double[])> -> _NONE_
<java.net.URL: java.lang.String getProtocol()> -> _SOURCE_
<android.view.Window: void setWindowManager(android.view.WindowManager,android.os.IBinder,java.lang.String)> -> _NONE_
<android.view.ViewGroup: boolean addStatesFromChildren()> -> _NONE_
<android.net.sip.SipSession$Listener: void onError(android.net.sip.SipSession,int,java.lang.String)> -> _NONE_
<android.app.Activity: void onPostCreate(android.os.Bundle)> -> _NONE_
<android.webkit.WebView: boolean canZoomIn()> -> _NONE_
<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)> -> _SOURCE_
<java.security.CodeSource: java.security.CodeSigner[] getCodeSigners()> -> _SOURCE_
<java.lang.StringBuffer: java.lang.String substring(int,int)> -> _NONE_
<java.lang.Character: int hashCode()> -> _SINK_ 
<java.io.File: void <init>(java.net.URI)> -> _NONE_
<android.view.KeyEvent: void <init>(long,long,int,int,int,int)> -> _NONE_
<android.os.Looper: android.os.Looper myLooper()> -> _NONE_
<android.os.ParcelFileDescriptor: void closeWithError(java.lang.String)> -> _NONE_
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor adoptFd(int)> -> _NONE_
<android.content.ContextWrapper: void sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> -> _SINK_ 
<android.view.KeyEvent: int getScanCode()> -> _SOURCE_
<android.webkit.WebView: boolean canZoomOut()> -> _NONE_
<android.location.LocationManager: java.util.List getAllProviders()> -> _SOURCE_
<android.nfc.NdefMessage: void <init>(byte[])> -> _NONE_
<java.lang.reflect.AccessibleObject: void setAccessible(boolean)> -> _SINK_ 
<java.lang.reflect.Field: void setFloat(java.lang.Object,float)> -> _SINK_ 
<android.text.style.ImageSpan: void <init>(android.content.Context,android.net.Uri)> -> _NONE_
<android.net.Uri$Builder: android.net.Uri$Builder encodedOpaquePart(java.lang.String)> -> _NONE_
<android.app.Activity: void finishActivity(int)> -> _NONE_
<android.database.sqlite.SQLiteStatement: void <init>()> -> _NONE_
<java.io.FilterOutputStream: void write(byte[],int,int)> -> _NONE_
<java.io.PrintWriter: void write(int)> -> _NONE_
<android.os.PatternMatcher: void <init>(android.os.Parcel)> -> _NONE_
<java.lang.StringBuffer: int indexOf(java.lang.String)> -> _SINK_ 
<android.app.ExpandableListActivity: void onContentChanged()> android.permission.STOP_APP_SWITCHES -> _NONE_
<android.view.accessibility.AccessibilityNodeInfo$RangeInfo: float getCurrent()> -> _SOURCE_
<android.text.Layout$Alignment: android.text.Layout$Alignment valueOf(java.lang.String)> -> _SINK_ 
<android.app.Dialog: void onAttachedToWindow()> -> _NONE_
<android.app.ActivityGroup: void <init>(boolean)> -> _NONE_
<android.widget.AbsListView: int[] onCreateDrawableState(int)> -> _NONE_
<android.accessibilityservice.AccessibilityServiceInfo: void <init>()> -> _NONE_
<org.apache.http.util.ByteArrayBuffer: void append(char[],int,int)> -> _NONE_
<android.view.accessibility.AccessibilityNodeInfo: void setInputType(int)> -> _SINK_ 
<android.view.WindowManager$LayoutParams: int copyFrom(android.view.WindowManager$LayoutParams)> -> _SINK_ 
<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])> -> _SINK_ 
<android.webkit.WebSettings: java.lang.String getFantasyFontFamily()> -> _SOURCE_
<android.view.animation.LayoutAnimationController: android.view.animation.Interpolator getInterpolator()> -> _SOURCE_
<android.view.View: boolean awakenScrollBars()> -> _NONE_
<android.view.ViewGroup: void layout(int,int,int,int)> -> _NONE_
<android.widget.AbsListView: void dispatchDraw(android.graphics.Canvas)> -> _NONE_
<android.telephony.TelephonyManager: java.lang.String getLine1Number()> -> _SOURCE_
<android.content.ContextWrapper: android.graphics.drawable.Drawable getWallpaper()> -> _SOURCE_
<java.lang.NoClassDefFoundError: void <init>(java.lang.String)> -> _NONE_
<android.widget.ExpandableListView: void onRestoreInstanceState(android.os.Parcelable)> -> _NONE_
<android.widget.TextView: boolean onKeyUp(int,android.view.KeyEvent)> -> _NONE_
<android.view.View: int getVisibility()> -> _SOURCE_
<java.math.BigInteger: java.math.BigInteger not()> -> _NONE_
<android.content.IntentFilter: java.lang.String getDataScheme(int)> -> _SOURCE_
<java.lang.reflect.Method: java.lang.annotation.Annotation[] getDeclaredAnnotations()> -> _SOURCE_
<android.content.pm.PathPermission: void <init>(java.lang.String,int,java.lang.String,java.lang.String)> -> _NONE_
<java.lang.Boolean: boolean parseBoolean(java.lang.String)> -> _NONE_
<java.net.DatagramSocket: void receive(java.net.DatagramPacket)> -> _NONE_
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo$CollectionInfo getCollectionInfo()> -> _SOURCE_
<java.lang.Enum: void <init>(java.lang.String,int)> -> _NONE_
<android.accounts.AccountManager: void setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)> -> _SINK_ 
<android.view.View: int getMeasuredWidth()> -> _SOURCE_
<android.app.Service: boolean stopSelfResult(int)> -> _NONE_
<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()> -> _SOURCE_
<org.apache.http.util.CharArrayBuffer: int indexOf(int,int,int)> -> _SINK_ 
<android.app.ActivityManager: android.app.PendingIntent getRunningServiceControlPanel(android.content.ComponentName)> -> _SOURCE_
<android.view.animation.Animation: void <init>()> -> _NONE_
<android.graphics.drawable.Drawable: void setCallback(android.graphics.drawable.Drawable$Callback)> -> _NONE_
<android.view.accessibility.AccessibilityNodeInfo$RangeInfo: float getMax()> -> _SOURCE_
<android.view.KeyEvent$DispatcherState: void <init>()> -> _NONE_
<android.bluetooth.BluetoothAdapter: boolean isEnabled()> -> _NONE_
<android.hardware.Camera: void setErrorCallback(android.hardware.Camera$ErrorCallback)> -> _SINK_ 
<android.graphics.Typeface: boolean isItalic()> -> _NONE_
<android.hardware.Camera$Parameters: void setJpegQuality(int)> -> _SINK_ 
<java.net.Socket: void setSoLinger(boolean,int)> -> _SINK_ 
<android.widget.AdapterView: void addView(android.view.View,android.view.ViewGroup$LayoutParams)> -> _NONE_
<android.content.ContextWrapper: java.lang.ClassLoader getClassLoader()> -> _SOURCE_
<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])> -> _SOURCE_
<java.util.UUID: int hashCode()> -> _SINK_ 
<java.net.URI: int compareTo(java.net.URI)> -> _SINK_ 
<android.widget.TextView: void setHint(int)> -> _SINK_ 
<android.content.Intent: void <init>(java.lang.String,android.net.Uri)> -> _NONE_
<java.util.UUID: boolean equals(java.lang.Object)> -> _NONE_
<android.graphics.drawable.Drawable: int[] getState()> -> _SOURCE_
<android.view.Window: boolean requestFeature(int)> -> _NONE_
<android.view.accessibility.AccessibilityRecord: boolean isFullScreen()> -> _NONE_
<java.net.MalformedURLException: void <init>()> -> _NONE_
<android.view.KeyCharacterMap: char getNumber(int)> -> _SOURCE_
<android.content.Intent: boolean filterEquals(android.content.Intent)> -> _SINK_ 
<android.view.accessibility.AccessibilityNodeInfo: void setSelected(boolean)> -> _SINK_ 
<android.net.wifi.WifiManager: boolean enableNetwork(int,boolean)> -> _NONE_
<android.database.sqlite.SQLiteDatabase: boolean isDbLockedByOtherThreads()> -> _NONE_
<android.content.ContentProviderOperation: boolean isReadOperation()> -> _NONE_
<android.view.animation.Transformation: int getTransformationType()> -> _SOURCE_
<java.security.cert.CertificateException: void <init>(java.lang.String,java.lang.Throwable)> -> _NONE_
<android.view.View: void setRotation(float)> -> _SINK_ 
<javax.security.auth.x500.X500Principal: void <init>(java.lang.String,java.util.Map)> -> _NONE_
<android.content.ContextWrapper: void enforcePermission(java.lang.String,int,int,java.lang.String)> -> _NONE_
<java.lang.ref.Reference: void clear()> -> _NONE_
<android.os.Parcel: void writeStrongInterface(android.os.IInterface)> -> _NONE_
<android.widget.Scroller: int getDuration()> -> _SOURCE_
<java.lang.Throwable: void <init>(java.lang.String)> -> _NONE_
<java.nio.IntBuffer: boolean equals(java.lang.Object)> -> _NONE_
<android.graphics.Paint$FontMetrics: void <init>()> -> _NONE_
<android.provider.Browser: void truncateHistory(android.content.ContentResolver)> -> _NONE_
<java.lang.Class: boolean isEnum()> -> _NONE_
<android.view.ViewGroup: boolean addViewInLayout(android.view.View,int,android.view.ViewGroup$LayoutParams,boolean)> -> _NONE_
<java.lang.String: void <init>(int[],int,int)> -> _NONE_
<android.view.MotionEvent: float getHistoricalTouchMinor(int)> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothAdapter getDefaultAdapter()> -> _SOURCE_
<java.nio.charset.CharsetEncoder: void <init>(java.nio.charset.Charset,float,float,byte[])> -> _NONE_
<android.widget.AbsListView: int computeVerticalScrollRange()> -> _NONE_
<android.view.accessibility.AccessibilityNodeInfo: void setContentDescription(java.lang.CharSequence)> -> _SINK_ 
<android.nfc.NfcAdapter: void setNdefPushMessageCallback(android.nfc.NfcAdapter$CreateNdefMessageCallback,android.app.Activity,android.app.Activity[])> -> _SINK_ 
<android.webkit.WebSettings: void setDefaultTextEncodingName(java.lang.String)> -> _NONE_
<android.content.Loader: void unregisterOnLoadCanceledListener(android.content.Loader$OnLoadCanceledListener)> -> _NONE_
<java.lang.Character: int toChars(int,char[],int)> -> _SINK_ 
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor fromFd(int)> -> _NONE_
<java.net.URL: int getPort()> -> _SOURCE_
<android.location.Location: float bearingTo(android.location.Location)> -> _NONE_
<android.webkit.WebView: android.webkit.WebBackForwardList restoreState(android.os.Bundle)> -> _NONE_
<android.widget.AbsListView: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)> -> _NONE_
<android.widget.Scroller: void fling(int,int,int,int,int,int,int,int)> -> _NONE_
<android.content.ContentResolver: void requestSync(android.content.SyncRequest)> -> _NONE_
<org.apache.http.ProtocolVersion: int getMinor()> -> _SOURCE_
<android.accessibilityservice.AccessibilityServiceInfo: java.lang.String getId()> -> _SOURCE_
<android.view.View: int getWindowVisibility()> -> _SOURCE_
<android.content.IntentFilter: java.util.Iterator schemeSpecificPartsIterator()> -> _NONE_
<java.lang.Thread: void yield()> -> _NONE_
<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)> -> _NONE_
<android.content.Intent: android.content.Intent setDataAndType(android.net.Uri,java.lang.String)> -> _SINK_ 
<android.view.View: boolean dispatchGenericMotionEvent(android.view.MotionEvent)> -> _NONE_
<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder onMalformedInput(java.nio.charset.CodingErrorAction)> -> _SOURCE_
<android.bluetooth.BluetoothHeadset: java.util.List getConnectedDevices()> -> _SOURCE_
<android.os.Bundle: void putIntArray(java.lang.String,int[])> -> _NONE_
<android.content.res.Configuration: void setTo(android.content.res.Configuration)> -> _SINK_ 
<android.view.View: android.view.ContextMenu$ContextMenuInfo getContextMenuInfo()> -> _SOURCE_
<java.net.URLConnection: void setDoOutput(boolean)> -> _NONE_
<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String,boolean)> -> _NONE_
<android.os.Parcel: void writeSparseArray(android.util.SparseArray)> -> _NONE_
<android.view.View: void saveHierarchyState(android.util.SparseArray)> -> _NONE_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<android.telephony.SignalStrength: int getEvdoEcio()> -> _SOURCE_
<android.view.MotionEvent: float getToolMinor()> -> _SOURCE_
<android.view.MotionEvent: int getButtonState()> -> _SOURCE_
<android.graphics.Paint: boolean isFilterBitmap()> -> _NONE_
<java.lang.ThreadGroup: int activeGroupCount()> -> _SINK_ 
<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)> -> _NONE_
<android.bluetooth.BluetoothGattDescriptor: void <clinit>()> -> _NONE_
<android.graphics.Paint: void <init>(android.graphics.Paint)> -> _NONE_
<android.content.Loader: android.content.Context getContext()> -> _SOURCE_
<android.os.Parcel: void writeFloat(float)> -> _NONE_
<java.io.PrintStream: void print(char[])> -> _NONE_
<android.widget.AbsListView: boolean verifyDrawable(android.graphics.drawable.Drawable)> -> _NONE_
<android.view.ViewTreeObserver: void addOnGlobalLayoutListener(android.view.ViewTreeObserver$OnGlobalLayoutListener)> -> _NONE_
<java.nio.Buffer: java.nio.Buffer reset()> -> _NONE_
<android.util.Pair: boolean equals(java.lang.Object)> -> _NONE_
<java.lang.Thread: void <init>(java.lang.Runnable)> -> _NONE_
<android.print.PrintDocumentAdapter: void onFinish()> -> _NONE_
<java.lang.Class: java.lang.annotation.Annotation[] getAnnotations()> -> _SOURCE_
<android.nfc.NdefRecord: int hashCode()> -> _SINK_ 
<android.widget.AdapterView: int getCount()> -> _SOURCE_
<android.view.View: void setDrawingCacheEnabled(boolean)> -> _SINK_ 
<android.net.http.SslError: java.lang.String getUrl()> -> _SOURCE_
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable mutate()> -> _NONE_
<java.net.URI: java.net.URI normalize()> -> _NONE_
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)> -> _NONE_
<android.widget.TextView: void setPrivateImeOptions(java.lang.String)> -> _SINK_ 
<android.content.pm.ApplicationInfo: void <clinit>()> -> _NONE_
<java.io.PrintStream: java.io.PrintStream format(java.util.Locale,java.lang.String,java.lang.Object[])> -> _NONE_
<android.accessibilityservice.AccessibilityService: void onServiceConnected()> -> _NONE_
<android.app.Application: void onLowMemory()> -> _NONE_
<java.nio.CharBuffer: java.nio.CharBuffer put(java.lang.String,int,int)> -> _NONE_
<android.app.Activity: void onPanelClosed(int,android.view.Menu)> -> _NONE_
<android.nfc.tech.IsoDep: void connect()> -> _NONE_
<android.content.Intent: void setSourceBounds(android.graphics.Rect)> -> _SINK_ 
<android.net.sip.SipProfile: java.lang.String getPassword()> -> _SOURCE_
<android.webkit.WebSettings: void setSerifFontFamily(java.lang.String)> -> _NONE_
<java.nio.channels.spi.AbstractSelector: void end()> -> _NONE_
<android.content.OperationApplicationException: void <init>(int)> -> _NONE_
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize asPortrait()> -> _NONE_
<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)> -> _NONE_
<android.view.KeyCharacterMap: void <init>()> -> _NONE_
<java.net.SocketImpl: java.lang.String toString()> -> _NONE_
<java.lang.AssertionError: void <init>(boolean)> -> _NONE_
<android.view.inputmethod.CompletionInfo: void <clinit>()> -> _NONE_
<android.content.IntentFilter: int match(java.lang.String,java.lang.String,java.lang.String,android.net.Uri,java.util.Set,java.lang.String)> -> _SINK_ 
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)> -> _NONE_
<android.view.View: void getLocationInWindow(int[])> -> _SOURCE_
<android.view.View: boolean dispatchKeyShortcutEvent(android.view.KeyEvent)> -> _NONE_
<android.webkit.WebView: void stopLoading()> -> _NONE_
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor[] createPipe()> -> _NONE_
<android.content.res.Resources: android.content.res.XmlResourceParser getLayout(int)> -> _SOURCE_
<android.provider.Settings$NameValueTable: void <init>()> -> _NONE_
<android.os.Bundle: char[] getCharArray(java.lang.String)> -> _SOURCE_
<java.lang.AbstractStringBuilder: java.lang.String toString()> -> _NONE_
<java.lang.StringBuilder: void getChars(int,int,char[],int)> -> _SOURCE_
<android.app.Notification$Builder: android.app.Notification$Builder setTicker(java.lang.CharSequence)> -> _SINK_ 
<java.lang.InternalError: void <init>()> -> _NONE_
<java.nio.FloatBuffer: java.nio.FloatBuffer wrap(float[])> -> _NONE_
<android.graphics.Path: void addPath(android.graphics.Path,android.graphics.Matrix)> -> _NONE_
<java.nio.BufferOverflowException: void <init>()> -> _NONE_
<android.telephony.PhoneStateListener: void onSignalStrengthsChanged(android.telephony.SignalStrength)> -> _NONE_
<java.lang.Character: boolean isSupplementaryCodePoint(int)> -> _NONE_
<android.content.pm.PackageInfo: java.lang.String toString()> -> _NONE_
<android.content.ContextWrapper: android.content.Context createPackageContext(java.lang.String,int)> -> _NONE_
<java.lang.Long: java.lang.String toString()> -> _NONE_
<android.graphics.drawable.Drawable: int getMinimumHeight()> -> _SOURCE_
<android.view.ViewGroup$MarginLayoutParams: void <init>(android.content.Context,android.util.AttributeSet)> -> _NONE_
<java.nio.CharBuffer: java.nio.CharBuffer put(java.nio.CharBuffer)> -> _NONE_
<android.os.Message: android.os.Message obtain(android.os.Handler)> -> _SINK_ 
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,char[],int,int)> -> _NONE_
<android.webkit.WebResourceResponse: java.io.InputStream getData()> -> _SOURCE_
<java.net.NetworkInterface: java.net.NetworkInterface getParent()> -> _SOURCE_
<android.view.View: void onAttachedToWindow()> -> _NONE_
<android.view.inputmethod.CompletionInfo: int getPosition()> -> _SOURCE_
<android.app.LoaderManager: void <init>()> -> _NONE_
<android.location.Location: android.os.Bundle getExtras()> -> _SOURCE_
<java.nio.channels.Pipe: java.nio.channels.Pipe open()> -> _NONE_
<java.io.PrintStream: void <init>(java.lang.String,java.lang.String)> -> _NONE_
<android.view.View: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider()> -> _SOURCE_
<android.app.Activity: void setFeatureDrawableAlpha(int,int)> -> _SINK_ 
<java.math.BigInteger: void <init>(int,byte[])> -> _NONE_
<android.graphics.Canvas$VertexMode: android.graphics.Canvas$VertexMode[] values()> -> _NONE_
<android.app.FragmentManager: void <init>()> -> _NONE_
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)> -> _NONE_
<android.os.Looper: java.lang.String toString()> -> _NONE_
<android.telephony.TelephonyManager: void listen(android.telephony.PhoneStateListener,int)> -> _NONE_
<java.nio.DoubleBuffer: java.nio.DoubleBuffer put(java.nio.DoubleBuffer)> -> _NONE_
<android.widget.AbsListView: boolean checkInputConnectionProxy(android.view.View)> -> _NONE_
<android.widget.TextView: void onEditorAction(int)> -> _NONE_
<android.net.sip.SipAudioCall: void close()> -> _NONE_
<android.animation.ValueAnimator: void setFrameDelay(long)> -> _SINK_ 
<android.app.Activity: void <clinit>()> -> _NONE_
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)> -> _NONE_
<android.content.res.Resources: java.lang.String getQuantityString(int,int,java.lang.Object[])> -> _SOURCE_
<android.graphics.Path: void reset()> -> _NONE_
<java.net.DatagramSocket: void connect(java.net.InetAddress,int)> -> _NONE_
<android.view.LayoutInflater: android.view.View createView(java.lang.String,java.lang.String,android.util.AttributeSet)> -> _NONE_
<android.os.Bundle: void putBundle(java.lang.String,android.os.Bundle)> -> _NONE_
<java.net.Socket: boolean getOOBInline()> -> _SOURCE_
<android.widget.TextView: void setCompoundDrawables(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)> -> _SINK_ 
<android.os.Parcel: double[] createDoubleArray()> -> _NONE_
<android.nfc.tech.NfcB: byte[] getApplicationData()> -> _SOURCE_
<android.provider.Settings$System: boolean putConfiguration(android.content.ContentResolver,android.content.res.Configuration)> -> _NONE_
<android.view.animation.Animation: void <init>(android.content.Context,android.util.AttributeSet)> -> _NONE_
<android.text.Layout$Alignment: android.text.Layout$Alignment[] values()> -> _NONE_
<android.webkit.WebChromeClient: void <init>()> -> _NONE_
<android.util.SparseArray: java.lang.Object get(int,java.lang.Object)> -> _SOURCE_
<java.util.Locale: java.lang.String getDisplayCountry(java.util.Locale)> -> _SOURCE_
<android.view.WindowId: boolean isFocused()> -> _NONE_
<android.util.SparseArray: int indexOfKey(int)> -> _SINK_ 
<android.content.ComponentName: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<android.webkit.WebView: boolean onKeyDown(int,android.view.KeyEvent)> -> _NONE_
<android.app.ActivityManager: void moveTaskToFront(int,int)> -> _NONE_
<android.widget.TextView: void setMaxHeight(int)> -> _SINK_ 
<android.view.Window: android.content.res.TypedArray getWindowStyle()> -> _SOURCE_
<android.content.Intent: boolean hasFileDescriptors()> -> _NONE_
<android.content.pm.Signature: int describeContents()> -> _SINK_ 
<android.content.ContextWrapper: void startActivities(android.content.Intent[],android.os.Bundle)> -> _SINK_ 
<java.lang.String: void <init>(byte[])> -> _NONE_
<android.app.Fragment: boolean equals(java.lang.Object)> -> _NONE_
<android.content.OperationApplicationException: void <init>(java.lang.Throwable)> -> _NONE_
<android.view.MotionEvent: float getHistoricalToolMinor(int)> -> _SOURCE_
<android.app.ExpandableListActivity: android.widget.ExpandableListView getExpandableListView()> -> _SOURCE_
<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])> -> _SOURCE_
<java.security.Permission: void checkGuard(java.lang.Object)> -> _NONE_
<java.lang.String: int codePointAt(int)> -> _SINK_ 
<java.util.Random: int nextInt(int)> -> _SINK_ 
<android.telephony.PhoneStateListener: void onDataConnectionStateChanged(int)> -> _NONE_
<java.net.DatagramPacket: void <init>(byte[],int)> -> _NONE_
<android.view.accessibility.AccessibilityNodeInfo$CollectionInfo: int getRowCount()> -> _SOURCE_
<java.lang.Byte: long longValue()> -> _NONE_
<android.app.Notification$Builder: android.app.Notification$Builder setSubText(java.lang.CharSequence)> -> _SINK_ 
<android.view.KeyEvent: char getNumber()> -> _SOURCE_
<android.nfc.Tag: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<android.widget.AdapterView: void <init>(android.content.Context,android.util.AttributeSet,int)> -> _NONE_
<android.content.Intent: boolean[] getBooleanArrayExtra(java.lang.String)> -> _SOURCE_
<android.widget.AbsListView: void clearTextFilter()> -> _NONE_
<android.app.Notification: android.app.Notification clone()> -> _NONE_
<java.lang.Number: void <init>()> -> _NONE_
<android.location.GpsStatus: void <init>()> -> _NONE_
<android.os.Bundle: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<java.lang.Character: boolean isJavaIdentifierStart(int)> -> _NONE_
<android.app.Activity: void startIntentSenderFromChild(android.app.Activity,android.content.IntentSender,int,android.content.Intent,int,int,int,android.os.Bundle)> -> _SINK_ 
<android.view.ViewOverlay: void add(android.graphics.drawable.Drawable)> -> _NONE_
<android.app.Service: void stopSelf()> -> _NONE_
<java.net.Socket: boolean isOutputShutdown()> -> _NONE_
<android.app.ActivityManager: void dumpPackageState(java.io.FileDescriptor,java.lang.String)> -> _NONE_
<android.graphics.Matrix: int hashCode()> -> _SINK_ 
<android.app.Activity: boolean onCreateThumbnail(android.graphics.Bitmap,android.graphics.Canvas)> -> _NONE_
<android.graphics.Canvas: android.graphics.Matrix getMatrix()> -> _SOURCE_
<java.net.DatagramSocket: int getTrafficClass()> -> _SOURCE_
<java.lang.ExceptionInInitializerError: void <init>(java.lang.String)> -> _NONE_
<android.net.wifi.WifiManager$WifiLock: void <init>(android.net.wifi.WifiManager)> -> _NONE_
<android.view.KeyEvent: int getMetaState()> -> _SOURCE_
<android.view.Display: int getOrientation()> -> _SOURCE_
<android.content.ContentValues: void <clinit>()> -> _NONE_
<android.database.sqlite.SQLiteDatabase: long insertWithOnConflict(java.lang.String,java.lang.String,android.content.ContentValues,int)> -> _NONE_
<android.app.Fragment$SavedState: int describeContents()> -> _SINK_ 
<android.content.IntentSender$SendIntentException: void <init>(java.lang.String)> -> _NONE_
<java.io.File: java.net.URI toURI()> -> _NONE_
<android.text.style.CharacterStyle: android.text.style.CharacterStyle wrap(android.text.style.CharacterStyle)> -> _NONE_
<android.bluetooth.BluetoothGattCharacteristic: java.lang.Integer getIntValue(int,int)> -> _SOURCE_
<android.content.ContentValues: java.lang.Boolean getAsBoolean(java.lang.String)> -> _SOURCE_
<android.view.animation.Transformation: float getAlpha()> -> _SOURCE_
<android.webkit.WebBackForwardList: int getSize()> -> _SOURCE_
<android.bluetooth.BluetoothGatt: java.util.List getConnectedDevices()> -> _SOURCE_
<android.telephony.CellInfo: void <init>()> -> _NONE_
<android.content.ContentProviderResult: void <init>(android.os.Parcel)> -> _NONE_
<java.nio.charset.CharsetEncoder: java.nio.charset.Charset charset()> -> _NONE_
<android.content.res.TypedArray: android.content.res.ColorStateList getColorStateList(int)> -> _SOURCE_
<android.webkit.WebView: void onVisibilityChanged(android.view.View,int)> -> _NONE_
<android.content.ContextWrapper: java.io.File getExternalCacheDir()> -> _SOURCE_
<java.net.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)> -> _NONE_
<android.widget.ListView: void dispatchDraw(android.graphics.Canvas)> -> _NONE_
<android.graphics.Rect: float exactCenterX()> -> _NONE_
<android.accessibilityservice.AccessibilityServiceInfo: android.content.pm.ResolveInfo getResolveInfo()> -> _SOURCE_
<android.accounts.AccountManager: android.accounts.AccountManagerFuture confirmCredentials(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> -> _SOURCE_
<android.os.Parcel: void writeSerializable(java.io.Serializable)> -> _NONE_
<android.os.Bundle: java.lang.Object clone()> -> _NONE_
<android.telephony.ServiceState: java.lang.String getOperatorNumeric()> -> _SOURCE_
<java.util.Locale: java.util.Locale getDefault()> -> _SOURCE_
<android.content.ContentValues: void put(java.lang.String,java.lang.Byte)> -> _NONE_
<android.content.res.Resources: java.lang.String getString(int)> -> _SOURCE_
<android.content.res.TypedArray: int getResourceId(int,int)> -> _SOURCE_
<android.os.Bundle: void putBinder(java.lang.String,android.os.IBinder)> -> _NONE_
<android.app.PendingIntent$CanceledException: void <init>(java.lang.Exception)> -> _NONE_
<android.content.ContextWrapper: void clearWallpaper()> -> _NONE_
<android.telephony.PhoneNumberFormattingTextWatcher: void <init>()> -> _NONE_
<java.net.URLConnection: long getDate()> -> _SOURCE_
<java.math.BigInteger: java.math.BigInteger pow(int)> -> _NONE_
<android.os.Parcel: void readStringArray(java.lang.String[])> -> _NONE_
<android.os.Parcel: void writeParcelable(android.os.Parcelable,int)> -> _NONE_
<android.graphics.Canvas: boolean clipRect(android.graphics.RectF,android.graphics.Region$Op)> -> _NONE_
<android.content.res.Configuration: int compareTo(java.lang.Object)> -> _SINK_ 
<android.print.PrintDocumentAdapter$WriteResultCallback: void onWriteCancelled()> -> _NONE_
<android.os.Parcel: void <init>()> -> _NONE_
<android.widget.AbsListView: void onCancelPendingInputEvents()> -> _NONE_
<java.lang.Enum: void finalize()> -> _NONE_
<android.content.ContentProviderClient: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String,android.os.CancellationSignal)> -> _NONE_
<android.widget.TextView: boolean extractText(android.view.inputmethod.ExtractedTextRequest,android.view.inputmethod.ExtractedText)> -> _NONE_
<java.io.File: void <init>(java.lang.String,java.lang.String)> -> _NONE_
<java.util.AbstractList: java.util.Iterator iterator()> -> _NONE_
<android.webkit.WebView: void onConfigurationChanged(android.content.res.Configuration)> -> _NONE_
<java.nio.channels.SocketChannel: long write(java.nio.ByteBuffer[])> -> _SOURCE_
<android.hardware.Camera$Parameters: void unflatten(java.lang.String)> -> _NONE_
<android.animation.Animator: void start()> -> _NONE_
<java.io.FileOutputStream: void close()> -> _NONE_
<android.content.ContextWrapper: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)> -> _SINK_ 
<android.print.PrintAttributes$MediaSize: int getHeightMils()> -> _SOURCE_
<android.widget.ExpandableListView: long getSelectedPosition()> -> _SOURCE_
<android.content.ContextWrapper: android.graphics.drawable.Drawable peekWallpaper()> -> _NONE_
<android.webkit.WebSettings: boolean getBlockNetworkLoads()> -> _SOURCE_
<java.util.AbstractMap: boolean containsKey(java.lang.Object)> -> _NONE_
<android.webkit.WebView: void clearCache(boolean)> -> _NONE_
<java.math.BigInteger: java.math.BigInteger or(java.math.BigInteger)> -> _NONE_
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator rotationY(float)> -> _NONE_
<android.content.pm.ResolveInfo: void <init>()> -> _NONE_
<java.net.InetAddress: byte[] getAddress()> -> _SOURCE_
<java.lang.Long: java.lang.String toOctalString(long)> -> _SINK_ 
<android.graphics.Bitmap: int getHeight()> -> _SOURCE_
<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()> -> _SOURCE_
<android.view.ViewGroup: int indexOfChild(android.view.View)> -> _NONE_
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,android.database.DatabaseErrorHandler)> -> _SINK_ 
<android.content.res.Resources: void updateConfiguration(android.content.res.Configuration,android.util.DisplayMetrics)> -> _NONE_
<android.view.accessibility.AccessibilityNodeInfo: void setEditable(boolean)> -> _SINK_ 
<java.nio.channels.FileChannel$MapMode: void <init>()> -> _NONE_
<java.security.cert.X509Certificate: java.util.List getExtendedKeyUsage()> -> _SOURCE_
<android.telephony.CellSignalStrengthCdma: int getEvdoLevel()> -> _SOURCE_
<java.lang.VerifyError: void <init>(java.lang.String)> -> _NONE_
<android.widget.TextView: boolean getFreezesText()> -> _SOURCE_
<android.widget.TextView: boolean isInputMethodTarget()> -> _NONE_
<android.bluetooth.BluetoothAdapter: void <init>()> -> _NONE_
<android.view.MotionEvent: float getTouchMinor(int)> -> _SOURCE_
<android.graphics.Movie: void <init>()> -> _NONE_
<android.content.pm.ActivityInfo: java.lang.String toString()> -> _NONE_
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.util.DisplayMetrics,int,int,android.graphics.Bitmap$Config)> -> _SINK_ 
<android.bluetooth.BluetoothAdapter: boolean getProfileProxy(android.content.Context,android.bluetooth.BluetoothProfile$ServiceListener,int)> -> _SOURCE_
<java.nio.IntBuffer: java.nio.IntBuffer get(int[])> -> _SOURCE_
<android.widget.AdapterView: void dispatchRestoreInstanceState(android.util.SparseArray)> -> _NONE_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SINK_ 
<java.net.Socket: java.nio.channels.SocketChannel getChannel()> -> _SOURCE_
<android.accounts.AccountManager: void removeOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener)> -> _NONE_
<android.content.ContentProviderOperation: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<android.util.SparseArray: java.lang.Object get(int)> -> _SOURCE_
<android.content.pm.ServiceInfo: void <clinit>()> -> _NONE_
<android.widget.TextView: int getRightPaddingOffset()> -> _SOURCE_
<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)> -> _NONE_
<java.lang.Class: java.lang.reflect.Type[] getGenericInterfaces()> -> _SOURCE_
<android.content.ContentProviderOperation$Builder: android.content.ContentProviderOperation$Builder withSelectionBackReference(int,int)> -> _NONE_
<java.security.spec.ECPoint: boolean equals(java.lang.Object)> -> _NONE_
<java.nio.ByteBuffer: int compareTo(java.nio.ByteBuffer)> -> _NONE_
<android.widget.TextView: void setInputExtras(int)> -> _SINK_ 
<org.apache.http.message.BasicLineParser: org.apache.http.ProtocolVersion parseProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<java.net.URLConnection: boolean getDefaultAllowUserInteraction()> -> _SOURCE_
<android.graphics.Paint: android.graphics.Paint$Align getTextAlign()> -> _SOURCE_
<android.webkit.WebSettings: boolean getJavaScriptEnabled()> -> _SOURCE_
<android.webkit.WebSettings: android.webkit.WebSettings$ZoomDensity getDefaultZoom()> -> _SOURCE_
<android.net.wifi.WifiManager: int addNetwork(android.net.wifi.WifiConfiguration)> -> _SOURCE_
<android.content.pm.ConfigurationInfo: int describeContents()> -> _SINK_ 
<android.view.View: void setSystemUiVisibility(int)> -> _SINK_ 
<android.view.View: android.graphics.drawable.Drawable getBackground()> -> _SOURCE_
<java.net.DatagramSocket: void setSendBufferSize(int)> -> _SINK_ 
<java.net.URLStreamHandler: java.net.URLConnection openConnection(java.net.URL,java.net.Proxy)> -> _NONE_
<java.lang.reflect.Method: boolean isSynthetic()> -> _NONE_
<android.graphics.Rect: java.lang.String toString()> -> _NONE_
<android.view.View: void dispatchSetSelected(boolean)> -> _NONE_
<java.lang.ClassFormatError: void <init>(java.lang.String)> -> _NONE_
<android.content.IntentFilter: java.lang.String matchCategories(java.util.Set)> -> _NONE_
<java.lang.Class: java.lang.String getSimpleName()> -> _SOURCE_
<android.graphics.Matrix: void finalize()> -> _NONE_
<android.widget.AbsListView: void onInitializeAccessibilityNodeInfoForItem(android.view.View,int,android.view.accessibility.AccessibilityNodeInfo)> -> _NONE_
<android.text.style.URLSpan: void <init>(java.lang.String)> -> _NONE_
<android.view.accessibility.AccessibilityNodeInfo: android.os.Bundle getExtras()> -> _SOURCE_
<android.net.wifi.WifiManager$WifiLock: void setWorkSource(android.os.WorkSource)> -> _SINK_ 
<android.print.PrintAttributes$Resolution: void <init>(java.lang.String,java.lang.String,int,int)> -> _NONE_
<android.widget.ExpandableListView: void <init>(android.content.Context)> -> _NONE_
<android.widget.TextView: int getLineCount()> -> _SOURCE_
<android.graphics.RectF: boolean intersects(android.graphics.RectF,android.graphics.RectF)> -> _NONE_
<android.database.sqlite.SQLiteDatabase: java.lang.String toString()> -> _NONE_
<java.net.URLConnection: java.lang.Object getContent()> -> _SOURCE_
<java.lang.Integer: int bitCount(int)> -> _SINK_ 
<android.view.MotionEvent: java.lang.String axisToString(int)> -> _SINK_ 
<android.content.BroadcastReceiver: void abortBroadcast()> -> _NONE_
<android.net.wifi.WifiInfo: void <init>()> -> _NONE_
<android.net.sip.SipException: void <init>(java.lang.String,java.lang.Throwable)> -> _NONE_
<android.widget.TextView: int getCompoundPaddingTop()> -> _SOURCE_
<android.widget.AbsListView: void setFastScrollEnabled(boolean)> -> _NONE_
<java.nio.charset.CharacterCodingException: void <init>()> -> _NONE_
<android.location.Location: float getSpeed()> -> _SOURCE_
<android.graphics.Typeface: android.graphics.Typeface createFromFile(java.io.File)> -> _SOURCE_
<android.webkit.WebViewClient: void <init>()> -> _NONE_
<org.xmlpull.v1.XmlPullParserException: java.lang.Throwable getDetail()> -> _SOURCE_
<android.view.View: boolean dispatchGenericFocusedEvent(android.view.MotionEvent)> -> _NONE_
<android.graphics.drawable.Drawable: int getLevel()> -> _SOURCE_
<java.util.Date: java.lang.String toString()> -> _NONE_
<android.view.View: int getLeft()> -> _SOURCE_
<android.content.Intent: void <clinit>()> -> _NONE_
<android.view.View: void draw(android.graphics.Canvas)> -> _NONE_
<android.view.accessibility.AccessibilityNodeInfo: void addChild(android.view.View,int)> -> _NONE_
<android.graphics.Path: boolean op(android.graphics.Path,android.graphics.Path,android.graphics.Path$Op)> -> _NONE_
<android.animation.ValueAnimator: void setCurrentPlayTime(long)> -> _SINK_ 
<java.nio.channels.SelectionKey: boolean isAcceptable()> -> _NONE_
<java.math.BigInteger: java.lang.String toString()> -> _NONE_
<android.graphics.Path: boolean op(android.graphics.Path,android.graphics.Path$Op)> -> _NONE_
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable$ConstantState getConstantState()> -> _SOURCE_
<android.graphics.RectF: void roundOut(android.graphics.Rect)> -> _NONE_
<java.lang.Thread: boolean isAlive()> -> _NONE_
<android.app.ExpandableListActivity: void <init>()> -> _NONE_
<android.content.IntentSender: void <init>()> -> _NONE_
<android.util.Property: android.util.Property of(java.lang.Class,java.lang.Class,java.lang.String)> -> _NONE_
<android.view.accessibility.AccessibilityNodeInfo$RangeInfo: void <init>()> -> _NONE_
<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)> -> _NONE_
<java.net.URLConnection: void setIfModifiedSince(long)> -> _NONE_
<android.widget.AbsListView: void addTouchables(java.util.ArrayList)> -> _NONE_
<android.view.ViewGroup: boolean isChildrenDrawnWithCacheEnabled()> -> _NONE_
<android.graphics.Bitmap: void <clinit>()> -> _NONE_
<android.view.MotionEvent: float getAxisValue(int,int)> -> _SOURCE_
<android.content.BroadcastReceiver$PendingResult: void <init>()> -> _NONE_
<java.lang.String: boolean contentEquals(java.lang.CharSequence)> -> _NONE_
<android.nfc.NdefMessage: byte[] toByteArray()> -> _NONE_
<java.lang.reflect.Field: java.lang.annotation.Annotation[] getDeclaredAnnotations()> -> _SOURCE_
<android.graphics.Bitmap: android.graphics.Bitmap createScaledBitmap(android.graphics.Bitmap,int,int,boolean)> -> _SINK_ 
<android.app.Activity: android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback)> -> _NONE_
<android.content.ContentProvider: void onTrimMemory(int)> -> _NONE_
<java.lang.Character: boolean isHighSurrogate(char)> -> _NONE_
<android.widget.ListView: int getHeaderViewsCount()> -> _SOURCE_
<java.net.URL: java.net.URI toURI()> -> _NONE_
<android.media.MediaFormat: boolean containsKey(java.lang.String)> -> _NONE_
<java.lang.StringBuilder: char charAt(int)> -> _NONE_
<android.animation.ValueAnimator: float getAnimatedFraction()> -> _SOURCE_
<android.content.BroadcastReceiver: void setDebugUnregister(boolean)> -> _NONE_
<android.widget.Scroller: void extendDuration(int)> -> _NONE_
<android.app.Activity: void onWindowAttributesChanged(android.view.WindowManager$LayoutParams)> -> _NONE_
<java.util.Random: float nextFloat()> -> _NONE_
<android.view.InputDevice$MotionRange: float getResolution()> -> _SOURCE_
<android.widget.ListView: void setSelection(int)> -> _SINK_ 
<android.telephony.TelephonyManager: boolean isNetworkRoaming()> -> _NONE_
<android.hardware.Camera$Parameters: android.hardware.Camera$Size getJpegThumbnailSize()> -> _SOURCE_
<android.widget.AbsListView: long[] getCheckedItemIds()> -> _SOURCE_
<android.graphics.Rect: void sort()> -> _NONE_
<android.view.ContextThemeWrapper: void <init>(android.content.Context,int)> -> _NONE_
<android.os.Handler: boolean postAtTime(java.lang.Runnable,long)> -> _NONE_
<android.view.InputDevice: int getKeyboardType()> -> _SOURCE_
<android.animation.ValueAnimator: void setRepeatMode(int)> -> _SINK_ 
<android.content.ContextWrapper: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,int,android.database.sqlite.SQLiteDatabase$CursorFactory,android.database.DatabaseErrorHandler)> -> _NONE_
<android.app.Activity: void startActivities(android.content.Intent[])> -> _SINK_ 
<android.content.ContextWrapper: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,int,android.database.sqlite.SQLiteDatabase$CursorFactory)> -> _NONE_
<android.content.res.Resources$Theme: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[],int,int)> -> _NONE_
<android.content.pm.FeatureInfo: int describeContents()> -> _SINK_ 
<android.view.View: void setBottom(int)> -> _SINK_ 
<java.lang.Character: int codePointBefore(char[],int,int)> -> _SINK_ 
<android.graphics.Canvas: boolean getClipBounds(android.graphics.Rect)> -> _SOURCE_
<android.app.Application: void onTerminate()> -> _NONE_
<android.webkit.WebView: void setWebViewClient(android.webkit.WebViewClient)> -> _SINK_ 
<android.app.Dialog: void onWindowAttributesChanged(android.view.WindowManager$LayoutParams)> -> _NONE_
<android.bluetooth.BluetoothClass: int getMajorDeviceClass()> -> _SOURCE_
<android.view.ViewGroup: boolean canAnimate()> -> _NONE_
<android.net.wifi.WifiManager: void finalize()> -> _NONE_
<android.hardware.Camera$Parameters: void setPictureSize(int,int)> -> _SINK_ 
<android.content.Intent: android.content.ComponentName resolveActivity(android.content.pm.PackageManager)> -> _NONE_
<android.content.ClipData: void <init>(java.lang.CharSequence,java.lang.String[],android.content.ClipData$Item)> -> _NONE_
<java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable,boolean,boolean)> -> _NONE_
<java.util.UUID: int compareTo(java.lang.Object)> -> _SINK_ 
<android.webkit.WebSettings: void setLoadWithOverviewMode(boolean)> -> _NONE_
<java.lang.String: int length()> -> _SINK_ 
<android.content.Intent: long[] getLongArrayExtra(java.lang.String)> -> _SOURCE_
<java.lang.SecurityException: void <init>(java.lang.Throwable)> -> _NONE_
<android.app.Fragment: android.app.Fragment getTargetFragment()> -> _SOURCE_
<android.telephony.CellSignalStrengthCdma: void <init>()> -> _NONE_
<android.graphics.Paint$Align: android.graphics.Paint$Align[] values()> -> _NONE_
<android.view.Window: void setIcon(int)> -> _NONE_
<android.view.ViewGroup: void addView(android.view.View,android.view.ViewGroup$LayoutParams)> -> _NONE_
<java.lang.Integer: java.lang.String toString(int)> -> _SINK_ 
<java.lang.Thread: void sleep(long,int)> -> _NONE_
<android.widget.TextView: java.lang.CharSequence getText()> -> _SOURCE_
<android.os.ParcelFileDescriptor: int parseMode(java.lang.String)> -> _SINK_ 
<android.location.Criteria: void setBearingAccuracy(int)> -> _SINK_ 
<java.lang.IllegalStateException: void <init>(java.lang.String)> -> _NONE_
<android.animation.ValueAnimator: void cancel()> -> _NONE_
<java.util.AbstractMap: void clear()> -> _NONE_
<android.widget.TextView: void setWidth(int)> -> _SINK_ 
<android.telephony.SignalStrength: int describeContents()> -> _NONE_
<android.graphics.Path: boolean isEmpty()> -> _NONE_
<android.view.ViewGroup: void dispatchDraw(android.graphics.Canvas)> -> _NONE_
<android.bluetooth.BluetoothGatt: boolean writeCharacteristic(android.bluetooth.BluetoothGattCharacteristic)> -> _NONE_
<android.widget.TextView: void onRtlPropertiesChanged(int)> -> _NONE_
<android.widget.TextView: void setTextScaleX(float)> -> _SINK_ 
<android.webkit.WebSettings: android.webkit.WebSettings$PluginState getPluginState()> -> _SOURCE_
<android.view.KeyEvent$DispatcherState: void startTracking(android.view.KeyEvent,java.lang.Object)> -> _NONE_
<java.net.DatagramSocket: int getReceiveBufferSize()> -> _SOURCE_
<android.content.BroadcastReceiver: boolean getDebugUnregister()> -> _SOURCE_
<android.app.Activity: void overridePendingTransition(int,int)> -> _NONE_
<android.os.Parcel: int dataPosition()> -> _SINK_ 
<java.lang.reflect.AccessibleObject: void setAccessible(java.lang.reflect.AccessibleObject[],boolean)> -> _SINK_ 
<android.view.MotionEvent: android.view.MotionEvent obtain(android.view.MotionEvent)> -> _SINK_ 
<android.nfc.NfcAdapter: void disableForegroundNdefPush(android.app.Activity)> -> _NONE_
<android.net.sip.SipAudioCall$Listener: void onRinging(android.net.sip.SipAudioCall,android.net.sip.SipProfile)> -> _NONE_
<java.util.BitSet: int size()> -> _SINK_ 
<android.view.View: boolean onKeyUp(int,android.view.KeyEvent)> -> _NONE_
<java.nio.channels.FileLock: void close()> -> _NONE_
<android.app.Activity: void startActivity(android.content.Intent,android.os.Bundle)> -> _SINK_ 
<java.io.PrintWriter: void write(java.lang.String,int,int)> -> _NONE_
<android.content.res.ColorStateList: int describeContents()> -> _SINK_ 
<java.lang.StringBuffer: void ensureCapacity(int)> -> _NONE_
<java.lang.reflect.Constructor: java.lang.Class[] getExceptionTypes()> -> _SOURCE_
<android.view.accessibility.AccessibilityEvent: java.lang.String toString()> -> _NONE_
<android.net.sip.SipAudioCall: void holdCall(int)> -> _NONE_
<android.animation.Keyframe: android.animation.Keyframe ofInt(float,int)> -> _NONE_
<android.app.Fragment: android.content.res.Resources getResources()> -> _SOURCE_
<java.io.PrintStream: void println(boolean)> -> _NONE_
<android.hardware.Camera$Parameters: java.util.List getSupportedPictureSizes()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeProvider: boolean performAction(int,int,android.os.Bundle)> -> _NONE_
<android.content.ContentProvider: void setPathPermissions(android.content.pm.PathPermission[])> -> _NONE_
<android.view.WindowId: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<java.net.DatagramSocket: void <init>(java.net.DatagramSocketImpl)> -> _NONE_
<android.graphics.Matrix: void setSkew(float,float,float,float)> -> _SINK_ 
<android.view.KeyEvent: void setSource(int)> -> _SINK_ 
<android.view.View: void setTranslationX(float)> -> _SINK_ 
<android.graphics.RectF: void round(android.graphics.Rect)> -> _NONE_
<android.app.Notification$Builder: android.app.Notification$Builder setDeleteIntent(android.app.PendingIntent)> -> _SINK_ 
<android.view.animation.Animation: void setAnimationListener(android.view.animation.Animation$AnimationListener)> -> _NONE_
<android.widget.ExpandableListView: boolean isGroupExpanded(int)> -> _NONE_
<android.app.backup.BackupAgentHelper: void onBackup(android.os.ParcelFileDescriptor,android.app.backup.BackupDataOutput,android.os.ParcelFileDescriptor)> -> _NONE_
<android.graphics.Paint: boolean isSubpixelText()> -> _NONE_
<java.net.UnknownHostException: void <init>(java.lang.String)> -> _NONE_
<java.net.URLConnection: void <init>(java.net.URL)> -> _NONE_
<android.content.ClipDescription: void <clinit>()> -> _NONE_
<android.graphics.Region: boolean set(int,int,int,int)> -> _SINK_ 
<java.lang.ReflectiveOperationException: void <init>()> -> _NONE_
<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)> -> _NONE_
<java.lang.Character: int compareTo(java.lang.Object)> -> _SINK_ 
<java.io.PrintStream: void println()> -> _NONE_
<android.graphics.RectF: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<android.text.Spannable$Factory: void <init>()> -> _NONE_
<android.view.ViewGroup: void dispatchSetSelected(boolean)> -> _NONE_
<java.security.CodeSource: void <init>(java.net.URL,java.security.CodeSigner[])> -> _NONE_
<android.widget.TextView: int getShadowColor()> -> _SOURCE_
<android.view.View: boolean requestFocus()> -> _NONE_
<java.lang.Byte: java.lang.Byte valueOf(java.lang.String,int)> -> _SINK_ 
<android.hardware.Camera$Parameters: void setSceneMode(java.lang.String)> -> _SINK_ 
<android.view.ViewGroup: void onAnimationEnd()> -> _NONE_
<android.hardware.Camera$Parameters: boolean getAutoExposureLock()> -> _SOURCE_
<android.location.LocationManager: void addProximityAlert(double,double,float,long,android.app.PendingIntent)> -> _NONE_
<java.lang.reflect.Method: boolean isVarArgs()> -> _NONE_
<android.view.accessibility.AccessibilityNodeInfo: boolean isAccessibilityFocused()> -> _NONE_
<android.graphics.SurfaceTexture: void getTransformMatrix(float[])> -> _SOURCE_
<android.webkit.WebView: int findAll(java.lang.String)> -> _NONE_
<android.os.WorkSource: boolean remove(android.os.WorkSource)> -> _NONE_
<android.widget.AbsListView: void setItemChecked(int,boolean)> -> _NONE_
<android.widget.AbsListView: void smoothScrollBy(int,int)> -> _NONE_
<android.view.animation.Animation: void ensureInterpolator()> -> _NONE_
<android.database.ContentObserver: void onChange(boolean,android.net.Uri)> -> _NONE_
<android.telephony.ServiceState: void setIsManualSelection(boolean)> -> _SINK_ 
<android.media.MediaFormat: void setString(java.lang.String,java.lang.String)> -> _SINK_ 
<java.lang.Error: void <init>(java.lang.String,java.lang.Throwable)> -> _NONE_
<java.lang.Double: long longValue()> -> _NONE_
<android.view.ViewGroup: void dispatchRestoreInstanceState(android.util.SparseArray)> -> _NONE_
<android.widget.RemoteViews: void showNext(int)> -> _NONE_
<java.io.PrintWriter: void print(double)> -> _NONE_
<android.content.res.TypedArray: int getIndexCount()> -> _SOURCE_
<android.graphics.Path$Op: android.graphics.Path$Op[] values()> -> _NONE_
<android.webkit.WebViewClient: void onReceivedError(android.webkit.WebView,int,java.lang.String,java.lang.String)> -> _NONE_
<android.content.Context: void <init>()> -> _NONE_
<android.view.View: void setLongClickable(boolean)> -> _SINK_ 
<android.content.pm.ResolveInfo: void dump(android.util.Printer,java.lang.String)> -> _NONE_
<android.net.sip.SipManager: boolean isVoipSupported(android.content.Context)> -> _NONE_
<java.lang.OutOfMemoryError: void <init>()> -> _NONE_
<android.bluetooth.BluetoothGatt: void abortReliableWrite()> -> _NONE_
<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String)> -> _NONE_
<android.location.GpsStatus: int getTimeToFirstFix()> -> _SOURCE_
<android.widget.AbsListView: void handleDataChanged()> -> _NONE_
<android.app.Activity: void removeDialog(int)> -> _NONE_
<java.lang.Character: int codePointAt(char[],int)> -> _SINK_ 
<android.util.AndroidException: void <init>(java.lang.String)> -> _NONE_
<android.webkit.WebViewClient: boolean shouldOverrideKeyEvent(android.webkit.WebView,android.view.KeyEvent)> -> _NONE_
<android.view.animation.LayoutAnimationController: void setDelay(float)> -> _SINK_ 
<android.view.accessibility.AccessibilityNodeInfo$RangeInfo: int getType()> -> _SOURCE_
<android.graphics.Bitmap: void setWidth(int)> -> _SINK_ 
<java.net.Socket: void sendUrgentData(int)> -> _SINK_ 
<android.media.MediaPlayer: void setDataSource(java.lang.String)> -> _SINK_ 
<android.content.Loader: void onForceLoad()> -> _NONE_
<android.util.SparseBooleanArray: void append(int,boolean)> -> _NONE_
<android.net.wifi.WifiManager: android.net.wifi.WifiManager$WifiLock createWifiLock(java.lang.String)> -> _SOURCE_
<java.lang.OutOfMemoryError: void <init>(java.lang.String)> -> _NONE_
<android.nfc.NdefMessage: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<android.widget.RemoteViews: void setScrollPosition(int,int)> -> _SINK_ 
<android.widget.TextView: android.text.Layout getLayout()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: void setFocused(boolean)> -> _SINK_ 
<android.widget.ExpandableListView: void setOnGroupCollapseListener(android.widget.ExpandableListView$OnGroupCollapseListener)> -> _SINK_ 
<java.lang.reflect.Field: int getModifiers()> -> _SOURCE_
<android.net.Uri$Builder: android.net.Uri$Builder authority(java.lang.String)> -> _NONE_
<java.nio.channels.spi.AbstractSelector: void deregister(java.nio.channels.spi.AbstractSelectionKey)> -> _NONE_
<android.print.PrintAttributes$Margins: int hashCode()> -> _SINK_ 
<android.bluetooth.BluetoothAdapter: boolean disable()> -> _NONE_
<android.graphics.Canvas: int saveLayerAlpha(float,float,float,float,int,int)> -> _SINK_ 
<android.widget.TextView: float getShadowDy()> -> _SOURCE_
<android.text.Layout: java.lang.CharSequence getText()> -> _SOURCE_
<android.app.Dialog: boolean onKeyUp(int,android.view.KeyEvent)> -> _NONE_
<android.database.CharArrayBuffer: void <init>(int)> -> _NONE_
<android.util.Pair: android.util.Pair create(java.lang.Object,java.lang.Object)> -> _NONE_
<android.nfc.tech.IsoDep: boolean isConnected()> -> _NONE_
<java.io.File: boolean setExecutable(boolean)> -> _SINK_ 
<java.util.Date: void setSeconds(int)> -> _SINK_ 
<android.content.ContentResolver: void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)> -> _NONE_
<java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult implFlush(java.nio.ByteBuffer)> -> _NONE_
<android.accessibilityservice.AccessibilityService: android.view.accessibility.AccessibilityNodeInfo getRootInActiveWindow()> -> _SOURCE_
<java.nio.charset.CharsetDecoder: void implOnUnmappableCharacter(java.nio.charset.CodingErrorAction)> -> _NONE_
<java.security.cert.CertificateEncodingException: void <init>()> -> _NONE_
<android.util.SparseArray: void removeAtRange(int,int)> -> _NONE_
<android.media.MediaPlayer: void setOnVideoSizeChangedListener(android.media.MediaPlayer$OnVideoSizeChangedListener)> -> _SINK_ 
<android.view.inputmethod.ExtractedTextRequest: int describeContents()> -> _SINK_ 
<android.webkit.WebView: void resumeTimers()> -> _NONE_
<android.text.Layout$Alignment: void <clinit>()> -> _NONE_
<android.content.res.ColorStateList: int getColorForState(int[],int)> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: boolean equals(java.lang.Object)> -> _NONE_
<java.nio.DoubleBuffer: java.nio.DoubleBuffer wrap(double[],int,int)> -> _NONE_
<android.view.View: void setOnFocusChangeListener(android.view.View$OnFocusChangeListener)> -> _SINK_ 
<android.app.Activity: boolean onKeyUp(int,android.view.KeyEvent)> -> _NONE_
<java.lang.RuntimeException: void <init>(java.lang.Throwable)> -> _NONE_
<java.lang.StringBuffer: java.lang.StringBuffer append(long)> -> _NONE_
<java.lang.SecurityException: void <init>(java.lang.String,java.lang.Throwable)> -> _NONE_
<android.view.KeyEvent: boolean isPrintingKey()> -> _NONE_
<java.nio.Buffer: java.nio.Buffer mark()> -> _NONE_
<android.os.Handler: void <init>()> -> _NONE_
<android.graphics.Matrix: boolean preTranslate(float,float)> -> _NONE_
<android.content.ClipData: void addItem(android.content.ClipData$Item)> -> _NONE_
<android.content.IntentFilter: boolean hasCategory(java.lang.String)> -> _NONE_
<java.net.NetworkInterface: int hashCode()> -> _SINK_ 
<java.lang.Thread: void setDaemon(boolean)> -> _SINK_ 
<android.view.ViewTreeObserver: void addOnTouchModeChangeListener(android.view.ViewTreeObserver$OnTouchModeChangeListener)> -> _NONE_
<android.os.Parcel: void readException(int,java.lang.String)> -> _NONE_
<android.widget.ListView: boolean removeHeaderView(android.view.View)> -> _NONE_
<java.io.Reader: boolean markSupported()> -> _NONE_
<android.webkit.WebSettings$RenderPriority: android.webkit.WebSettings$RenderPriority[] values()> -> _NONE_
<android.graphics.RectF: boolean isEmpty()> -> _NONE_
<android.view.View: void cancelLongPress()> -> _NONE_
<android.graphics.Paint$Style: android.graphics.Paint$Style valueOf(java.lang.String)> -> _SINK_ 
<android.bluetooth.BluetoothDevice: boolean setPin(byte[])> -> _SINK_ 
<android.os.Parcel: byte readByte()> -> _NONE_
<android.view.KeyEvent: int getModifiers()> -> _SOURCE_
<android.net.sip.SipSession$Listener: void <init>()> -> _NONE_
<android.app.Notification$Builder: android.app.Notification$Builder setSmallIcon(int,int)> -> _SINK_ 
<android.view.View: boolean isHardwareAccelerated()> -> _NONE_
<android.widget.ListView: void setDivider(android.graphics.drawable.Drawable)> -> _SINK_ 
<android.app.Service: void onCreate()> -> _NONE_
<android.location.LocationProvider: int getAccuracy()> -> _SOURCE_
<java.lang.Object: void finalize()> -> _NONE_
<android.view.Display: int getWidth()> -> _SOURCE_
<java.nio.LongBuffer: java.nio.LongBuffer put(long[])> -> _SOURCE_
<java.security.cert.CertificateEncodingException: void <init>(java.lang.String)> -> _NONE_
<android.widget.ExpandableListView: android.widget.ExpandableListAdapter getExpandableListAdapter()> -> _SOURCE_
<android.content.pm.PackageInfo: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<android.app.Dialog: void onStop()> -> _NONE_
<android.webkit.WebChromeClient: void onHideCustomView()> -> _NONE_
<android.widget.RemoteViews: void removeAllViews(int)> -> _NONE_
<android.content.ContentValues: java.util.Set valueSet()> -> _NONE_
<android.nfc.tech.NfcB: byte[] getProtocolInfo()> -> _SOURCE_
<android.view.View: void sendAccessibilityEvent(int)> -> _NONE_
<android.widget.AbsListView: void deferNotifyDataSetChanged()> -> _NONE_
<java.lang.Short: int compare(short,short)> -> _SINK_ 
<java.lang.ThreadGroup: void uncaughtException(java.lang.Thread,java.lang.Throwable)> -> _NONE_
<android.media.MediaPlayer: void addTimedTextSource(android.content.Context,android.net.Uri,java.lang.String)> -> _NONE_
<java.util.Date: long parse(java.lang.String)> -> _NONE_
<android.view.Surface: android.graphics.Canvas lockCanvas(android.graphics.Rect)> -> _NONE_
<android.app.Fragment: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> -> _NONE_
<android.graphics.Paint$Style: void <clinit>()> -> _NONE_
<android.graphics.Canvas: boolean quickReject(android.graphics.Path,android.graphics.Canvas$EdgeType)> -> _NONE_
<android.graphics.Bitmap: boolean isPremultiplied()> -> _NONE_
<android.os.PowerManager: void wakeUp(long)> -> _NONE_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<java.net.Socket: boolean getKeepAlive()> -> _SOURCE_
<java.net.URLConnection: java.lang.String guessContentTypeFromStream(java.io.InputStream)> -> _NONE_
<android.view.ViewOverlay: void <init>()> -> _NONE_
<android.app.ActivityManager: java.util.List getRecentTasks(int,int)> -> _SOURCE_
<android.graphics.Path: void toggleInverseFillType()> -> _NONE_
<java.util.ArrayList: void add(int,java.lang.Object)> -> _NONE_
<android.widget.AbsoluteLayout: void <init>(android.content.Context)> -> _NONE_
<android.app.Fragment: android.app.FragmentManager getChildFragmentManager()> -> _SOURCE_
<android.content.OperationApplicationException: void <init>(java.lang.String,int)> -> _NONE_
<android.util.DisplayMetrics: java.lang.String toString()> -> _NONE_
<java.lang.StringBuffer: java.lang.StringBuffer replace(int,int,java.lang.String)> -> _NONE_
<android.content.Intent: float[] getFloatArrayExtra(java.lang.String)> -> _SOURCE_
<java.lang.ClassLoader: java.lang.ClassLoader getParent()> -> _SOURCE_
<android.view.View: void setScrollBarDefaultDelayBeforeFade(int)> -> _SINK_ 
<android.animation.ValueAnimator: java.lang.String toString()> -> _NONE_
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo$RangeInfo getRangeInfo()> -> _SOURCE_
<android.graphics.Paint: android.graphics.Shader getShader()> -> _SOURCE_
<java.nio.charset.CodingErrorAction: void <clinit>()> -> _NONE_
<android.text.style.ImageSpan: void <init>(android.content.Context,int)> -> _NONE_
<android.view.LayoutInflater: android.view.View onCreateView(android.view.View,java.lang.String,android.util.AttributeSet)> -> _NONE_
<android.view.KeyEvent: void <init>(android.view.KeyEvent)> -> _NONE_
<android.view.MotionEvent: float getOrientation()> -> _SOURCE_
<android.app.ActivityManager$RunningAppProcessInfo: void <init>(java.lang.String,int,java.lang.String[])> -> _NONE_
<android.content.ContentProviderClient: boolean release()> -> _NONE_
<java.lang.reflect.Constructor: boolean isVarArgs()> -> _NONE_
<android.location.LocationManager: void removeUpdates(android.app.PendingIntent)> -> _NONE_
<java.lang.String: boolean matches(java.lang.String)> -> _NONE_
<android.graphics.Shader: void finalize()> -> _NONE_
<java.net.SocketImpl: void shutdownOutput()> -> _NONE_
<java.lang.String: java.lang.String toString()> -> _NONE_
<java.lang.UnsatisfiedLinkError: void <init>()> -> _NONE_
<android.animation.ValueAnimator: void pause()> -> _NONE_
<android.app.Fragment: android.animation.Animator onCreateAnimator(int,boolean,int)> -> _NONE_
<android.view.View: void getHitRect(android.graphics.Rect)> -> _SOURCE_
<android.content.ClipData: void <clinit>()> -> _NONE_
<android.widget.ListView: void onMeasure(int,int)> -> _NONE_
<java.util.UUID: int variant()> -> _SINK_ 
<android.database.ContentObserver: void <init>(android.os.Handler)> -> _NONE_
<java.lang.String: char[] toCharArray()> -> _NONE_
<android.app.LocalActivityManager: android.app.Activity getCurrentActivity()> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: java.util.List getAttachedDbs()> -> _SOURCE_
<java.lang.reflect.Constructor: boolean isSynthetic()> -> _NONE_
<android.media.MediaPlayer: void addTimedTextSource(java.io.FileDescriptor,long,long,java.lang.String)> -> _NONE_
<android.content.ComponentName: android.content.ComponentName readFromParcel(android.os.Parcel)> -> _SINK_ 
<java.lang.Thread: void run()> -> _NONE_
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)> -> _NONE_
<android.app.ActionBar$LayoutParams: void <init>(android.app.ActionBar$LayoutParams)> -> _NONE_
<android.location.Location: void reset()> -> _NONE_
<java.io.InputStream: void <init>()> -> _NONE_
<android.content.pm.PackageManager$NameNotFoundException: void <init>()> -> _NONE_
<android.view.accessibility.AccessibilityRecord: void setEnabled(boolean)> -> _SINK_ 
<android.view.accessibility.AccessibilityRecord: void setItemCount(int)> -> _SINK_ 
<java.lang.String: void <init>(byte[],int,int,java.lang.String)> -> _NONE_
<android.util.SparseArray: void <init>(int)> -> _NONE_
<android.location.LocationManager: void requestLocationUpdates(long,float,android.location.Criteria,android.location.LocationListener,android.os.Looper)> -> _NONE_
<android.webkit.WebView: void onSizeChanged(int,int,int,int)> -> _NONE_
<android.view.accessibility.AccessibilityNodeInfo: boolean isCheckable()> -> _NONE_
<android.graphics.BitmapFactory$Options: void <init>()> -> _NONE_
<android.content.ContentValues: boolean containsKey(java.lang.String)> -> _NONE_
<android.view.View: void <init>(android.content.Context,android.util.AttributeSet,int)> -> _NONE_
<android.view.View: void postOnAnimationDelayed(java.lang.Runnable,long)> -> _NONE_
<org.apache.http.util.CharArrayBuffer: void append(java.lang.Object)> -> _NONE_
<android.telephony.CellIdentityCdma: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String)> -> _NONE_
<android.graphics.Paint: float getFontSpacing()> -> _SOURCE_
<android.content.ContentProviderOperation: java.lang.String toString()> -> _NONE_
<android.app.Activity: void setTitle(int)> -> _SINK_ 
<javax.security.auth.x500.X500Principal: void <init>(java.lang.String)> -> _NONE_
<android.view.ViewGroup: void setDescendantFocusability(int)> -> _NONE_
<android.net.Uri: int hashCode()> -> _NONE_
<android.os.PowerManager$WakeLock: boolean isHeld()> -> _NONE_
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int[],int,int,int,int,android.graphics.Bitmap$Config)> -> _SINK_ 
<android.os.Bundle: boolean getBoolean(java.lang.String,boolean)> -> _SOURCE_
<android.content.ContentResolver: void validateSyncExtrasBundle(android.os.Bundle)> -> _NONE_
<android.content.pm.ProviderInfo: int describeContents()> -> _SINK_ 
<java.util.AbstractList: boolean addAll(int,java.util.Collection)> -> _NONE_
<java.lang.StringBuilder: java.lang.StringBuilder insert(int,long)> -> _NONE_
<java.net.ServerSocket: java.net.InetAddress getInetAddress()> -> _SOURCE_
<android.os.Parcel: android.os.Parcel obtain()> -> _NONE_
<android.print.PrintAttributes$MediaSize: void <init>(java.lang.String,java.lang.String,int,int)> -> _NONE_
<java.nio.channels.spi.AbstractSelector: void begin()> -> _NONE_
<android.location.Location: long getTime()> -> _SOURCE_
<android.os.Looper: void quit()> -> _NONE_
<java.net.URI: java.lang.String getPath()> -> _SOURCE_
<android.net.sip.SipAudioCall: void sendDtmf(int)> -> _SINK_ 
<java.util.BitSet: byte[] toByteArray()> -> _NONE_
<java.lang.ClassLoader: java.lang.Class findLoadedClass(java.lang.String)> -> _NONE_
<android.view.ViewGroup: void detachViewFromParent(int)> -> _NONE_
<android.app.Dialog: void onContextMenuClosed(android.view.Menu)> -> _NONE_
<android.telephony.CellSignalStrengthCdma: boolean equals(java.lang.Object)> -> _NONE_
<android.text.Layout: float getDesiredWidth(java.lang.CharSequence,int,int,android.text.TextPaint)> -> _SOURCE_
<android.net.http.SslError: void <init>(int,android.net.http.SslCertificate)> -> _NONE_
<android.view.MotionEvent: void recycle()> -> _NONE_
<java.util.Date: java.lang.Object clone()> -> _NONE_
<android.view.View: boolean hasOverlappingRendering()> -> _NONE_
<android.graphics.Picture: android.graphics.Canvas beginRecording(int,int)> -> _NONE_
<android.util.Property: boolean isReadOnly()> -> _NONE_
<android.os.ParcelFileDescriptor: void <init>(android.os.ParcelFileDescriptor)> -> _NONE_
<android.database.DataSetObserver: void <init>()> -> _NONE_
<android.widget.TextView: void setText(java.lang.CharSequence)> -> _SINK_ 
<android.app.ActivityManager: int getLauncherLargeIconSize()> -> _SOURCE_
<java.net.SocketException: void <init>(java.lang.String)> -> _NONE_
<android.content.ContentProviderOperation: android.content.ContentProviderResult apply(android.content.ContentProvider,android.content.ContentProviderResult[],int)> -> _NONE_
<android.content.ClipData$Item: void <init>(android.net.Uri)> -> _NONE_
<android.net.http.SslError: void <init>(int,java.security.cert.X509Certificate)> -> _NONE_
<java.lang.String: java.lang.String[] split(java.lang.String,int)> -> _NONE_
<android.widget.TextView: int getCompoundPaddingRight()> -> _SOURCE_
<android.view.View: int getMeasuredHeight()> -> _SOURCE_
<android.view.KeyEvent: int normalizeMetaState(int)> -> _SINK_ 
<android.view.inputmethod.CorrectionInfo: void <init>(int,java.lang.CharSequence,java.lang.CharSequence)> -> _NONE_
<android.net.sip.SipProfile: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<java.security.SignatureException: void <init>()> -> _NONE_
<android.content.IntentFilter: android.content.IntentFilter$AuthorityEntry getDataAuthority(int)> -> _SOURCE_
<android.text.Layout: float getLineRight(int)> -> _SOURCE_
<android.hardware.Camera: void <init>()> -> _NONE_
<android.net.sip.SipManager: boolean isRegistered(java.lang.String)> -> _NONE_
<android.webkit.WebSettings: void setAllowFileAccess(boolean)> -> _NONE_
<android.net.wifi.WifiManager$MulticastLock: void setReferenceCounted(boolean)> -> _SINK_ 
<android.view.ViewGroup: void updateViewLayout(android.view.View,android.view.ViewGroup$LayoutParams)> -> _NONE_
<android.os.Bundle: void putChar(java.lang.String,char)> -> _NONE_
<java.net.URL: java.lang.Object getContent(java.lang.Class[])> -> _SOURCE_
<android.text.Layout: float getLineMax(int)> -> _SOURCE_
<java.nio.charset.Charset: boolean isSupported(java.lang.String)> -> _NONE_
<android.bluetooth.BluetoothAdapter: boolean cancelDiscovery()> -> _NONE_
<java.lang.Error: void <init>(java.lang.Throwable)> -> _NONE_
<android.view.View: int getTopPaddingOffset()> -> _SOURCE_
<android.content.IntentFilter: android.content.IntentFilter create(java.lang.String,java.lang.String)> -> _NONE_
<android.app.Activity: android.view.View onCreateView(java.lang.String,android.content.Context,android.util.AttributeSet)> -> _NONE_
<android.accounts.AccountManager: android.content.Intent newChooseAccountIntent(android.accounts.Account,java.util.ArrayList,java.lang.String[],boolean,java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)> -> _SOURCE_
<android.widget.Scroller: void forceFinished(boolean)> -> _NONE_
<android.content.pm.Signature: void <init>(java.lang.String)> -> _NONE_
<android.app.Notification$Builder: android.app.Notification$Builder setNumber(int)> -> _SINK_ 
<android.view.View: void scrollTo(int,int)> -> _NONE_
<android.net.Uri: android.net.Uri fromParts(java.lang.String,java.lang.String,java.lang.String)> -> _NONE_
<android.content.res.Resources: void finishPreloading()> -> _NONE_
<java.lang.Double: boolean equals(java.lang.Object)> -> _NONE_
<android.graphics.drawable.Drawable: void jumpToCurrentState()> -> _NONE_
<android.widget.AdapterView: int getSelectedItemPosition()> -> _SOURCE_
<java.net.DatagramPacket: void setLength(int)> -> _SINK_ 
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator rotationX(float)> -> _NONE_
<java.lang.Double: void <init>(double)> -> _NONE_
<javax.security.auth.x500.X500Principal: int hashCode()> -> _SINK_ 
<android.accessibilityservice.AccessibilityServiceInfo: java.lang.String capabilityToString(int)> -> _NONE_
<android.view.View: int getScrollBarStyle()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getSimSerialNumber()> -> _SOURCE_
<android.app.Activity: void onOptionsMenuClosed(android.view.Menu)> -> _NONE_
<android.view.View: int getWindowSystemUiVisibility()> -> _SOURCE_
<android.graphics.Bitmap: int getGenerationId()> -> _SOURCE_
<android.widget.AdapterView: void setFocusable(boolean)> -> _NONE_
<android.app.Activity: void onApplyThemeResource(android.content.res.Resources$Theme,int,boolean)> -> _NONE_
<org.apache.http.message.ParserCursor: int getUpperBound()> -> _SOURCE_
<android.view.InputDevice: android.view.KeyCharacterMap getKeyCharacterMap()> -> _SOURCE_
<android.net.sip.SipAudioCall$Listener: void onCallHeld(android.net.sip.SipAudioCall)> -> _NONE_
<java.net.URI: java.lang.String getRawQuery()> -> _SOURCE_
<java.util.Locale: int hashCode()> -> _SINK_ 
<android.graphics.drawable.Drawable: void setBounds(android.graphics.Rect)> -> _NONE_
<android.view.View: int getWidth()> -> _SOURCE_
<java.io.PrintStream: void print(char)> -> _NONE_
<android.graphics.RectF: boolean intersects(float,float,float,float)> -> _NONE_
<android.util.DisplayMetrics: boolean equals(android.util.DisplayMetrics)> -> _NONE_
<android.view.View: void onCreateContextMenu(android.view.ContextMenu)> -> _NONE_
<android.app.LocalActivityManager: android.app.Activity getActivity(java.lang.String)> -> _SOURCE_
<android.provider.Browser: void <init>()> -> _NONE_
<android.content.ContextWrapper: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)> -> _NONE_
<android.media.MediaPlayer: void pause()> -> _NONE_
<android.location.LocationManager: void clearTestProviderEnabled(java.lang.String)> -> _NONE_
<android.view.View: boolean isHorizontalFadingEdgeEnabled()> -> _NONE_
<android.text.Layout: int getParagraphLeft(int)> -> _SOURCE_
<android.view.View: android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo)> -> _NONE_
<android.view.animation.Animation: boolean getDetachWallpaper()> -> _SOURCE_
<android.app.Activity: boolean onCreateOptionsMenu(android.view.Menu)> -> _NONE_
<android.webkit.WebChromeClient: boolean onJsPrompt(android.webkit.WebView,java.lang.String,java.lang.String,java.lang.String,android.webkit.JsPromptResult)> -> _NONE_
<android.view.View: boolean isActivated()> -> _NONE_
<java.net.ServerSocket: void <init>(int,int,java.net.InetAddress)> -> _NONE_
<android.app.Fragment: void onStart()> -> _NONE_
<android.graphics.SurfaceTexture: long getTimestamp()> -> _SOURCE_
<java.net.DatagramSocket: java.net.InetAddress getInetAddress()> -> _SOURCE_
<android.view.ViewGroup$MarginLayoutParams: void <init>(android.view.ViewGroup$MarginLayoutParams)> -> _NONE_
<android.content.ClipDescription: boolean hasMimeType(java.lang.String)> -> _NONE_
<java.util.concurrent.TimeUnit: long toMicros(long)> -> _NONE_
<android.view.LayoutInflater: android.view.View inflate(org.xmlpull.v1.XmlPullParser,android.view.ViewGroup)> -> _NONE_
<android.bluetooth.BluetoothClass: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<org.apache.http.message.BasicLineParser: org.apache.http.StatusLine parseStatusLine(java.lang.String,org.apache.http.message.LineParser)> -> _NONE_
<java.util.AbstractMap: void putAll(java.util.Map)> -> _NONE_
<android.accounts.AccountManager: android.accounts.Account[] getAccountsByTypeForPackage(java.lang.String,java.lang.String)> -> _SOURCE_
<android.content.ContextWrapper: int getWallpaperDesiredMinimumHeight()> -> _SOURCE_
<android.os.Bundle: void putStringArrayList(java.lang.String,java.util.ArrayList)> -> _NONE_
<android.graphics.Region: android.graphics.Path getBoundaryPath()> -> _SOURCE_
<android.webkit.WebChromeClient: void onCloseWindow(android.webkit.WebView)> -> _NONE_
<android.graphics.drawable.Drawable: void setAutoMirrored(boolean)> -> _NONE_
<java.net.DatagramPacket: void <init>(byte[],int,int)> -> _NONE_
<android.graphics.Typeface: android.graphics.Typeface createFromFile(java.lang.String)> -> _NONE_
<java.util.ArrayList: java.lang.Object[] toArray()> -> _NONE_
<android.view.MotionEvent: void setLocation(float,float)> -> _SINK_ 
<android.content.ContextWrapper: void <init>(android.content.Context)> -> _NONE_
<java.lang.AssertionError: void <init>()> -> _NONE_
<java.lang.reflect.Field: short getShort(java.lang.Object)> -> _SOURCE_
<java.net.DatagramSocket: void <init>(int,java.net.InetAddress)> -> _NONE_
<java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])> -> _NONE_
<android.hardware.Camera$Parameters: void getFocusDistances(float[])> -> _SOURCE_
<android.view.accessibility.AccessibilityRecord: void recycle()> -> _NONE_
<android.view.View: void startAnimation(android.view.animation.Animation)> -> _NONE_
<android.view.View: void setMinimumHeight(int)> -> _SINK_ 
<android.app.Activity: void onPause()> -> _NONE_
<android.content.res.AssetFileDescriptor: long getStartOffset()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo getCollectionItemInfo()> -> _SOURCE_
<android.graphics.Region: boolean setPath(android.graphics.Path,android.graphics.Region)> -> _SINK_ 
<android.content.IntentSender: android.os.UserHandle getCreatorUserHandle()> -> _SOURCE_
<java.nio.channels.Pipe$SourceChannel: int validOps()> -> _NONE_
<java.io.PrintStream: void print(float)> -> _NONE_
<android.animation.LayoutTransition: void setAnimateParentHierarchy(boolean)> -> _SINK_ 
<android.graphics.Canvas: int saveLayerAlpha(android.graphics.RectF,int,int)> -> _SINK_ 
<android.view.View: void offsetTopAndBottom(int)> -> _NONE_
<java.net.InetAddress: boolean isLoopbackAddress()> -> _NONE_
<android.hardware.Camera$Parameters: float getFocalLength()> -> _SOURCE_
<java.net.ServerSocket: int getReceiveBufferSize()> -> _SOURCE_
<java.lang.Enum: int compareTo(java.lang.Enum)> -> _NONE_
<java.math.BigInteger: float floatValue()> -> _NONE_
<android.net.http.SslCertificate: java.util.Date getValidNotBeforeDate()> -> _SOURCE_
<java.net.Socket: void bind(java.net.SocketAddress)> -> _NONE_
<java.net.URI: java.lang.String getRawUserInfo()> -> _SOURCE_
<android.view.View: void setImportantForAccessibility(int)> -> _SINK_ 
<android.app.Dialog: boolean dispatchTouchEvent(android.view.MotionEvent)> -> _NONE_
<android.webkit.WebSettings: void setDomStorageEnabled(boolean)> -> _NONE_
<android.view.KeyEvent: void <init>(long,long,int,int,int)> -> _NONE_
<android.view.DragEvent: void <clinit>()> -> _NONE_
<android.content.res.TypedArray: android.util.TypedValue peekValue(int)> -> _NONE_
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setStartDelay(long)> -> _SINK_ 
<java.nio.charset.CharsetEncoder: void <init>(java.nio.charset.Charset,float,float)> -> _NONE_
<java.util.AbstractCollection: void clear()> -> _NONE_
<android.content.ContextWrapper: android.content.Context getBaseContext()> -> _SOURCE_
<android.graphics.RectF: void union(float,float,float,float)> -> _NONE_
<java.util.AbstractCollection: java.lang.Object[] toArray()> -> _NONE_
<java.nio.charset.UnmappableCharacterException: int getInputLength()> -> _SOURCE_
<android.accounts.AccountManager: void setUserData(android.accounts.Account,java.lang.String,java.lang.String)> -> _SINK_ 
<java.lang.StringBuffer: void <init>(int)> -> _NONE_
<android.nfc.Tag: java.lang.String toString()> -> _NONE_
<android.location.LocationManager: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> -> _SOURCE_
<android.content.pm.PermissionInfo: int describeContents()> -> _SINK_ 
<android.webkit.WebSettings: boolean supportMultipleWindows()> -> _NONE_
<android.view.ViewGroup: void removeViewsInLayout(int,int)> -> _NONE_
<android.text.Layout: float getDesiredWidth(java.lang.CharSequence,android.text.TextPaint)> -> _SOURCE_
<java.util.ArrayList: void clear()> -> _NONE_
<java.lang.String: boolean contains(java.lang.CharSequence)> -> _NONE_
<android.webkit.WebView: void setVerticalScrollbarOverlay(boolean)> -> _SINK_ 
<android.view.accessibility.AccessibilityRecord: void setBeforeText(java.lang.CharSequence)> -> _SINK_ 
<android.graphics.Paint$Style: android.graphics.Paint$Style[] values()> -> _NONE_
<android.view.ViewGroup: int getDescendantFocusability()> -> _SOURCE_
<java.lang.StringBuffer: void trimToSize()> -> _NONE_
<android.content.res.Resources$Theme: void finalize()> -> _NONE_
<android.view.View: int resolveSizeAndState(int,int,int)> -> _SINK_ 
<android.view.View: void announceForAccessibility(java.lang.CharSequence)> -> _NONE_
<android.os.Parcel: void readTypedList(java.util.List,android.os.Parcelable$Creator)> -> _NONE_
<android.location.Criteria: void <clinit>()> -> _NONE_
<java.math.BigInteger: int bitCount()> -> _SINK_ 
<android.app.Dialog: void onOptionsMenuClosed(android.view.Menu)> -> _NONE_
<android.app.Activity: boolean dispatchTouchEvent(android.view.MotionEvent)> -> _NONE_
<android.os.Parcel: android.os.Bundle readBundle(java.lang.ClassLoader)> -> _NONE_
<java.lang.Integer: int lowestOneBit(int)> -> _SINK_ 
<java.lang.String: java.lang.String valueOf(char[],int,int)> -> _SINK_ 
<java.net.NetworkInterface: java.util.Enumeration getInetAddresses()> -> _SOURCE_
<android.graphics.Rect: void <init>(int,int,int,int)> -> _NONE_
<java.net.URI: java.lang.String getRawSchemeSpecificPart()> -> _SOURCE_
<android.view.accessibility.AccessibilityRecord: void setChecked(boolean)> -> _SINK_ 
<android.view.TouchDelegate: boolean onTouchEvent(android.view.MotionEvent)> -> _NONE_
<android.widget.TextView: void setTextSize(float)> -> _SINK_ 
<android.webkit.WebViewClient: void onReceivedLoginRequest(android.webkit.WebView,java.lang.String,java.lang.String,java.lang.String)> -> _NONE_
<android.net.wifi.WifiEnterpriseConfig: void <clinit>()> -> _NONE_
<android.content.res.TypedArray: void <init>()> -> _NONE_
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor[] createReliablePipe()> -> _NONE_
<android.view.accessibility.AccessibilityNodeInfo: java.util.List findAccessibilityNodeInfosByViewId(java.lang.String)> -> _NONE_
<android.view.accessibility.AccessibilityNodeProvider: android.view.accessibility.AccessibilityNodeInfo findFocus(int)> -> _NONE_
<android.widget.AdapterView: int getLastVisiblePosition()> -> _SOURCE_
<android.content.Intent: void readFromParcel(android.os.Parcel)> -> _NONE_
<android.telephony.CellSignalStrengthCdma: int getEvdoEcio()> -> _SOURCE_
<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getIssuerX500Principal()> -> _SOURCE_
<android.graphics.Paint: void setTextAlign(android.graphics.Paint$Align)> -> _SINK_ 
<android.app.Activity: void registerForContextMenu(android.view.View)> -> _NONE_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.CharSequence[])> -> _NONE_
<android.view.View: int computeVerticalScrollOffset()> -> _NONE_
<android.provider.Telephony$Sms: void <clinit>()> -> _NONE_
<android.content.res.AssetFileDescriptor: void <init>(android.os.ParcelFileDescriptor,long,long)> -> _NONE_
<android.content.ContentValues: java.lang.Long getAsLong(java.lang.String)> -> _SOURCE_
<android.bluetooth.BluetoothGattDescriptor: byte[] getValue()> -> _SOURCE_
<java.io.PrintStream: void flush()> -> _NONE_
<android.view.ViewGroup: void addTouchables(java.util.ArrayList)> -> _NONE_
<java.net.URLConnection: void setDoInput(boolean)> -> _NONE_
<android.accounts.AccountManager: android.accounts.Account[] getAccountsByType(java.lang.String)> -> _SOURCE_
<android.view.InputEvent: int describeContents()> -> _NONE_
<android.print.PrintAttributes: int hashCode()> -> _SINK_ 
<java.lang.reflect.Field: java.lang.String toString()> -> _NONE_
<android.os.Parcel: void readByteArray(byte[])> -> _NONE_
<android.content.Intent: java.util.ArrayList getParcelableArrayListExtra(java.lang.String)> -> _SOURCE_
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator scaleYBy(float)> -> _NONE_
<android.view.accessibility.AccessibilityNodeInfo: boolean isSelected()> -> _NONE_
<android.view.animation.Animation: int getRepeatCount()> -> _SOURCE_
<java.security.cert.CertificateParsingException: void <init>(java.lang.String)> -> _NONE_
<android.content.ContentProvider: void onConfigurationChanged(android.content.res.Configuration)> -> _NONE_
<java.lang.Float: void <init>(java.lang.String)> -> _NONE_
<android.view.Surface: void unlockCanvasAndPost(android.graphics.Canvas)> -> _NONE_
<java.nio.ByteOrder: void <clinit>()> -> _NONE_
<android.app.TaskStackBuilder: void startActivities()> -> _NONE_
<android.view.ViewGroupOverlay: void <init>()> -> _NONE_
<android.app.Activity: boolean onKeyLongPress(int,android.view.KeyEvent)> -> _NONE_
<android.view.ViewGroup: boolean hasFocusable()> -> _NONE_
<android.content.Intent: android.content.Intent addFlags(int)> -> _NONE_
<android.view.View: int getVerticalScrollbarPosition()> -> _SOURCE_
<android.content.IntentFilter: void addCategory(java.lang.String)> -> _NONE_
<android.widget.TextView: void setMarqueeRepeatLimit(int)> -> _SINK_ 
<java.io.IOException: void <init>(java.lang.Throwable)> -> _NONE_
<java.lang.StringBuilder: java.lang.String toString()> -> _NONE_
<android.app.Activity: android.view.View findViewById(int)> -> _NONE_
<android.accessibilityservice.AccessibilityService: void setWallpaper(android.graphics.Bitmap)> android.permission.MANAGE_APP_TOKENS android.permission.SET_WALLPAPER -> _SINK_ 
<android.view.View: void setY(float)> -> _SINK_ 
<java.lang.Class: boolean isMemberClass()> -> _NONE_
<android.graphics.Canvas: void <init>()> -> _NONE_
<android.app.ExpandableListActivity: long getSelectedId()> -> _SOURCE_
<android.webkit.WebView: boolean performLongClick()> -> _NONE_
<java.net.URL: void setURLStreamHandlerFactory(java.net.URLStreamHandlerFactory)> -> _SINK_ 
<java.lang.AbstractStringBuilder: int codePointAt(int)> -> _NONE_
<android.view.View: java.lang.Object getTag()> -> _SOURCE_
<android.app.Fragment: int getTargetRequestCode()> -> _SOURCE_
<android.content.pm.ResolveInfo: java.lang.CharSequence loadLabel(android.content.pm.PackageManager)> -> _NONE_
<android.bluetooth.BluetoothSocket: void <init>()> -> _NONE_
<android.view.View: void getLocationOnScreen(int[])> -> _SOURCE_
<android.graphics.Point: void <init>(int,int)> -> _NONE_
<android.content.pm.ServiceInfo: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<java.lang.Object: void wait()> -> _NONE_
<android.view.View: void setKeepScreenOn(boolean)> -> _SINK_ 
<android.net.sip.SipSession$Listener: void onCalling(android.net.sip.SipSession)> -> _NONE_
<android.database.sqlite.SQLiteDatabase: void setVersion(int)> -> _SINK_ 
<java.lang.Integer: int hashCode()> -> _SINK_ 
<android.animation.ValueAnimator: void setEvaluator(android.animation.TypeEvaluator)> -> _SINK_ 
<android.graphics.Region: android.graphics.Rect getBounds()> -> _SOURCE_
<android.app.Activity: void onCreate(android.os.Bundle)> -> _NONE_
<android.accounts.AuthenticatorDescription: int hashCode()> -> _SINK_ 
<java.io.File: boolean canRead()> -> _NONE_
<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getSubjectX500Principal()> -> _SOURCE_
<java.lang.Character: boolean isDigit(int)> -> _NONE_
<android.hardware.Camera$Parameters: int getMaxZoom()> -> _SOURCE_
<android.hardware.Camera$Parameters: java.util.List getSupportedAntibanding()> -> _SOURCE_
<android.app.Activity: void onUserLeaveHint()> -> _NONE_
<android.view.View: void setActivated(boolean)> -> _SINK_ 
<android.view.Window: boolean hasSoftInputMode()> -> _NONE_
<android.webkit.WebView: android.webkit.WebBackForwardList saveState(android.os.Bundle)> -> _NONE_
<android.view.Window: void setBackgroundDrawableResource(int)> -> _NONE_
<android.content.pm.PermissionInfo: void <init>()> -> _NONE_
<android.content.res.Configuration: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<android.media.MediaPlayer: void setOnTimedTextListener(android.media.MediaPlayer$OnTimedTextListener)> -> _SINK_ 
<android.media.MediaPlayer$TrackInfo: int getTrackType()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: void setLabeledBy(android.view.View,int)> -> _SINK_ 
<android.app.Dialog: void setOnCancelListener(android.content.DialogInterface$OnCancelListener)> -> _SINK_ 
<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()> -> _SOURCE_
<android.widget.TextView: void setGravity(int)> -> _SINK_ 
<android.animation.Keyframe: android.animation.Keyframe ofFloat(float)> -> _NONE_
<android.content.Intent: int filterHashCode()> -> _SINK_ 
<android.view.accessibility.AccessibilityNodeInfo: int getActions()> -> _SOURCE_
<android.os.PowerManager: void reboot(java.lang.String)> android.permission.REBOOT -> _NONE_
<android.graphics.Paint: java.util.Locale getTextLocale()> -> _SOURCE_
<android.provider.Settings$NameValueTable: android.net.Uri getUriFor(android.net.Uri,java.lang.String)> -> _SOURCE_
<java.io.InputStream: void mark(int)> -> _NONE_
<android.webkit.WebView: void onMeasure(int,int)> -> _NONE_
<java.lang.Double: int hashCode()> -> _SINK_ 
<android.view.View: void layout(int,int,int,int)> -> _NONE_
<android.view.ViewGroup: void startViewTransition(android.view.View)> -> _NONE_
<java.io.FileOutputStream: void <init>(java.lang.String,boolean)> -> _NONE_
<android.view.ViewGroup: boolean addViewInLayout(android.view.View,int,android.view.ViewGroup$LayoutParams)> -> _NONE_
<android.net.sip.SipManager: void setRegistrationListener(java.lang.String,android.net.sip.SipRegistrationListener)> -> _SINK_ 
<android.app.ActionBar: void setHomeActionContentDescription(int)> -> _NONE_
<android.app.ActivityManager: android.content.pm.ConfigurationInfo getDeviceConfigurationInfo()> -> _SOURCE_
<android.graphics.RectF: void <init>(float,float,float,float)> -> _NONE_
<android.provider.Settings$Secure: java.lang.String getString(android.content.ContentResolver,java.lang.String)> -> _SOURCE_
<android.app.Activity: android.app.LoaderManager getLoaderManager()> -> _SOURCE_
<java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()> -> _NONE_
<java.net.URL: java.lang.String getQuery()> -> _SOURCE_
<android.hardware.Camera$Parameters: int getPreviewFormat()> -> _SOURCE_
<android.view.InflateException: void <init>(java.lang.String)> -> _NONE_
<android.graphics.Paint: int getTextWidths(java.lang.CharSequence,int,int,float[])> -> _SOURCE_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,long[])> -> _NONE_
<android.view.View: float getBottomFadingEdgeStrength()> -> _SOURCE_
<java.io.Writer: java.io.Writer append(char)> -> _NONE_
<android.view.Display: boolean isValid()> -> _NONE_
<java.lang.Integer: java.lang.Integer decode(java.lang.String)> -> _SINK_ 
<android.webkit.WebView: void addJavascriptInterface(java.lang.Object,java.lang.String)> -> _NONE_
<java.nio.channels.spi.AbstractSelectableChannel: java.nio.channels.SelectableChannel configureBlocking(boolean)> -> _SOURCE_
<java.nio.charset.CharsetEncoder: java.nio.charset.CodingErrorAction unmappableCharacterAction()> -> _NONE_
<android.view.MotionEvent: float getTouchMajor(int)> -> _SOURCE_
<android.content.res.Resources: java.lang.CharSequence[] getTextArray(int)> -> _SOURCE_
<android.os.Handler: boolean sendMessage(android.os.Message)> -> _SINK_ 
<java.lang.Thread: void join()> -> _NONE_
<android.os.Handler: android.os.Message obtainMessage()> -> _NONE_
<android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode[] values()> -> _NONE_
<java.lang.reflect.AccessibleObject: boolean isAnnotationPresent(java.lang.Class)> -> _NONE_
<java.security.PermissionCollection: void setReadOnly()> -> _NONE_
<android.location.Criteria: void setAccuracy(int)> -> _SINK_ 
<android.bluetooth.BluetoothGattDescriptor: java.util.UUID getUuid()> -> _SOURCE_
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> -> _SINK_ 
<android.animation.ValueAnimator: long getStartDelay()> -> _SOURCE_
<android.os.storage.StorageManager: boolean unmountObb(java.lang.String,boolean,android.os.storage.OnObbStateChangeListener)> -> _NONE_
<android.widget.TextView: int getTotalPaddingBottom()> -> _SOURCE_
<android.provider.CalendarContract$Instances: void <init>()> -> _NONE_
<java.lang.reflect.Method: java.lang.Class getDeclaringClass()> -> _SOURCE_
<android.graphics.Path: void close()> -> _NONE_
<android.graphics.Region: java.lang.String toString()> -> _NONE_
<java.util.BitSet: void <init>(int)> -> _NONE_
<android.net.http.SslCertificate: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _NONE_
<android.view.accessibility.AccessibilityNodeInfo: void setMultiLine(boolean)> -> _SINK_ 
<android.view.View: float getCameraDistance()> -> _SOURCE_
<java.security.cert.CertPath: int hashCode()> -> _NONE_
<android.print.PrintAttributes: int getColorMode()> -> _SOURCE_
<android.view.View: int getDrawingCacheQuality()> -> _SOURCE_
<java.nio.ByteBuffer: boolean equals(java.lang.Object)> -> _NONE_
<java.nio.channels.Pipe$SinkChannel: int validOps()> -> _NONE_
<java.net.URLStreamHandler: boolean hostsEqual(java.net.URL,java.net.URL)> -> _NONE_
<android.app.Activity: void startIntentSenderForResult(android.content.IntentSender,int,android.content.Intent,int,int,int,android.os.Bundle)> -> _SINK_ 
<android.os.WorkSource: boolean equals(java.lang.Object)> -> _NONE_
<java.lang.String: java.lang.String toUpperCase(java.util.Locale)> -> _NONE_
<android.net.wifi.WifiManager: int compareSignalLevel(int,int)> -> _SOURCE_
<android.widget.Scroller: int timePassed()> -> _SINK_ 
<android.os.Bundle: void putCharSequence(java.lang.String,java.lang.CharSequence)> -> _NONE_
<android.view.ViewGroup$LayoutParams: void <init>(int,int)> -> _NONE_
<java.lang.Class: java.lang.Class[] getClasses()> -> _SOURCE_
<java.lang.ClassLoader: void setClassAssertionStatus(java.lang.String,boolean)> -> _NONE_
<java.math.BigInteger: int intValue()> -> _SINK_ 
<java.lang.Long: java.lang.Long getLong(java.lang.String,java.lang.Long)> -> _SOURCE_
<android.graphics.Canvas: void drawBitmap(int[],int,int,int,int,int,int,boolean,android.graphics.Paint)> -> _NONE_
<android.view.inputmethod.ExtractedText: void <clinit>()> -> _NONE_
<android.animation.Keyframe: android.animation.Keyframe ofFloat(float,float)> -> _NONE_
<android.view.View: void setNextFocusDownId(int)> -> _SINK_ 
<java.security.ProtectionDomain: java.security.CodeSource getCodeSource()> -> _SOURCE_
<java.io.PrintWriter: void flush()> -> _NONE_
<android.location.LocationManager: void removeTestProvider(java.lang.String)> -> _NONE_
<android.app.TaskStackBuilder: android.app.TaskStackBuilder addParentStack(android.app.Activity)> -> _NONE_
<java.nio.charset.CharsetDecoder: java.nio.charset.Charset detectedCharset()> -> _NONE_
<android.widget.TextView: void setText(char[],int,int)> -> _SINK_ 
<android.content.res.AssetFileDescriptor: int describeContents()> -> _SINK_ 
<android.view.accessibility.AccessibilityNodeInfo: int getTextSelectionEnd()> -> _SOURCE_
<java.nio.CharBuffer: char charAt(int)> -> _SOURCE_
<org.apache.http.util.CharArrayBuffer: char[] buffer()> -> _NONE_
<android.content.pm.ApplicationInfo: void <init>()> -> _NONE_
<android.view.LayoutInflater: void setFactory2(android.view.LayoutInflater$Factory2)> -> _NONE_
<android.os.Parcel: byte[] marshall()> -> _NONE_
<java.lang.Character: byte getDirectionality(char)> -> _SOURCE_
<android.accessibilityservice.AccessibilityService: void setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)> -> _NONE_
<java.nio.charset.CoderResult: void <clinit>()> -> _NONE_
<android.view.Window: android.view.WindowManager getWindowManager()> -> _SOURCE_
<android.view.ViewGroup: boolean dispatchUnhandledMove(android.view.View,int)> -> _NONE_
<android.app.PendingIntent: void send(int,android.app.PendingIntent$OnFinished,android.os.Handler)> -> _SINK_ 
<android.animation.Keyframe: android.animation.Keyframe ofObject(float)> -> _NONE_
<android.widget.TextView: java.util.Locale getTextLocale()> -> _SOURCE_
<java.net.ServerSocket: int getLocalPort()> -> _SOURCE_
<android.view.View: boolean isClickable()> -> _NONE_
<java.lang.String: java.lang.String copyValueOf(char[],int,int)> -> _SINK_ 
<android.content.res.Configuration: void setLocale(java.util.Locale)> -> _SINK_ 
<android.util.SparseBooleanArray: void <init>()> -> _NONE_
<java.net.SocketImpl: int getPort()> -> _SOURCE_
<java.lang.Character: boolean isTitleCase(int)> -> _NONE_
<android.view.KeyCharacterMap: int getDeadChar(int,int)> -> _SOURCE_
<android.webkit.WebChromeClient: void onConsoleMessage(java.lang.String,int,java.lang.String)> -> _NONE_
<android.os.MessageQueue: void finalize()> -> _NONE_
<android.view.animation.LayoutAnimationController: void setOrder(int)> -> _SINK_ 
<android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,float,float,float,float,int,float,float,int,int)> -> _SINK_ 
<android.content.ComponentName: int compareTo(java.lang.Object)> -> _SINK_ 
<android.app.ActivityGroup: void onDestroy()> -> _NONE_
<android.content.res.AssetFileDescriptor: java.lang.String toString()> -> _NONE_
<java.io.Writer: void write(int)> -> _NONE_
<android.view.WindowManager$LayoutParams: void <init>(int,int)> -> _NONE_
<android.view.View: int getTop()> -> _SOURCE_
<android.provider.Settings$System: android.net.Uri getUriFor(java.lang.String)> -> _SOURCE_
<android.view.accessibility.AccessibilityEvent: void <init>()> -> _NONE_
<java.util.AbstractCollection: boolean retainAll(java.util.Collection)> -> _NONE_
<java.nio.ShortBuffer: java.nio.ShortBuffer put(short[])> -> _SOURCE_
<android.telephony.CellInfo: long getTimeStamp()> -> _SOURCE_
<java.security.cert.Certificate: void <init>(java.lang.String)> -> _NONE_
<android.net.wifi.WifiManager: boolean disconnect()> -> _NONE_
<android.telephony.CellInfoCdma: int hashCode()> -> _SINK_ 
<java.io.File: java.lang.String toString()> -> _NONE_
<android.util.SparseArray: void put(int,java.lang.Object)> -> _NONE_
<android.view.InputEvent: android.view.InputDevice getDevice()> -> _SOURCE_
<android.app.Application: void unregisterOnProvideAssistDataListener(android.app.Application$OnProvideAssistDataListener)> -> _NONE_
<android.view.View: boolean isLayoutDirectionResolved()> -> _NONE_
<java.nio.charset.MalformedInputException: int getInputLength()> -> _SOURCE_
<android.app.Application: void registerOnProvideAssistDataListener(android.app.Application$OnProvideAssistDataListener)> -> _NONE_
<android.net.DhcpInfo: void <init>()> -> _NONE_
<android.view.View$DragShadowBuilder: void <init>()> -> _NONE_
<java.util.AbstractMap: void <init>()> -> _NONE_
<android.view.View: void setBackgroundColor(int)> -> _SINK_ 
<android.widget.ListView: boolean onKeyMultiple(int,int,android.view.KeyEvent)> -> _NONE_
<android.telephony.TelephonyManager: java.util.List getNeighboringCellInfo()> -> _SOURCE_
<android.graphics.Canvas: void drawTextOnPath(char[],int,int,android.graphics.Path,float,float,android.graphics.Paint)> -> _NONE_
<java.io.PrintWriter: void println(long)> -> _NONE_
<java.net.URLConnection: void addRequestProperty(java.lang.String,java.lang.String)> -> _NONE_
<android.os.ParcelUuid: int describeContents()> -> _SINK_ 
<android.graphics.Paint: int breakText(java.lang.String,boolean,float,float[])> -> _SINK_ 
<android.view.View: void addTouchables(java.util.ArrayList)> -> _NONE_
<java.nio.channels.spi.SelectorProvider: java.nio.channels.Channel inheritedChannel()> -> _NONE_
<android.widget.TextView: boolean onDragEvent(android.view.DragEvent)> -> _NONE_
<android.widget.ExpandableListView: void dispatchDraw(android.graphics.Canvas)> -> _NONE_
<org.apache.http.message.BasicLineParser: void <init>(org.apache.http.ProtocolVersion)> -> _NONE_
<android.view.inputmethod.CorrectionInfo: void <clinit>()> -> _NONE_
<java.io.ObjectStreamException: void <init>(java.lang.String)> -> _NONE_
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()> -> _SOURCE_
<android.content.ContextWrapper: java.io.File getFileStreamPath(java.lang.String)> -> _SOURCE_
<java.nio.DoubleBuffer: java.nio.DoubleBuffer put(double[])> -> _SOURCE_
<android.content.ContentValues: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<android.widget.RemoteViews: void setBundle(int,java.lang.String,android.os.Bundle)> -> _SINK_ 
<android.content.ContentProviderClient: int delete(android.net.Uri,java.lang.String,java.lang.String[])> -> _SINK_ 
<java.io.PrintStream: void println(float)> -> _NONE_
<android.content.res.Resources: java.lang.CharSequence getText(int)> -> _SOURCE_
<java.lang.ThreadGroup: int enumerate(java.lang.ThreadGroup[])> -> _SINK_ 
<android.widget.ListView: void setOverscrollHeader(android.graphics.drawable.Drawable)> -> _SINK_ 
<android.view.Window: void injectInputEvent(android.view.InputEvent)> -> _NONE_
<android.content.ContentValues: void <init>(android.content.ContentValues)> -> _NONE_
<java.lang.Integer: int numberOfTrailingZeros(int)> -> _SINK_ 
<android.content.IntentFilter: int matchDataAuthority(android.net.Uri)> -> _SINK_ 
<android.widget.TextView: void onCommitCorrection(android.view.inputmethod.CorrectionInfo)> -> _NONE_
<android.webkit.WebViewClient: void doUpdateVisitedHistory(android.webkit.WebView,java.lang.String,boolean)> -> _NONE_
<java.lang.Character: boolean isUnicodeIdentifierStart(int)> -> _NONE_
<java.util.Locale: java.lang.String getDisplayName(java.util.Locale)> -> _SOURCE_
<android.view.View: void setHovered(boolean)> -> _SINK_ 
<java.net.NetworkInterface: boolean equals(java.lang.Object)> -> _NONE_
<android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityRecord getRecord(int)> -> _SOURCE_
<android.animation.PropertyValuesHolder: java.lang.String getPropertyName()> -> _SOURCE_
<android.graphics.Paint: void finalize()> -> _NONE_
<java.net.DatagramSocket: java.net.SocketAddress getRemoteSocketAddress()> -> _SOURCE_
<java.nio.charset.Charset: java.lang.String name()> -> _NONE_
<android.app.Activity: void <init>()> -> _NONE_
<android.widget.TextView: boolean onTouchEvent(android.view.MotionEvent)> -> _NONE_
<android.view.animation.Animation: long getDuration()> -> _SOURCE_
<android.os.PatternMatcher: boolean match(java.lang.String)> -> _NONE_
<android.content.IntentFilter: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<java.lang.Boolean: boolean booleanValue()> -> _NONE_
<android.graphics.Region: int describeContents()> -> _SINK_ 
<java.util.HashMap: void putAll(java.util.Map)> -> _NONE_
<android.graphics.Typeface: android.graphics.Typeface createFromAsset(android.content.res.AssetManager,java.lang.String)> -> _NONE_
<android.net.sip.SipManager: android.net.sip.SipSession createSipSession(android.net.sip.SipProfile,android.net.sip.SipSession$Listener)> -> _SOURCE_
<android.telephony.PhoneNumberFormattingTextWatcher: void onTextChanged(java.lang.CharSequence,int,int,int)> -> _NONE_
<java.lang.Float: byte byteValue()> -> _NONE_
<android.os.Message: android.os.Bundle peekData()> -> _NONE_
<java.net.NetworkInterface: boolean isUp()> -> _NONE_
<android.view.View: void onWindowFocusChanged(boolean)> -> _NONE_
<org.apache.http.message.BasicLineParser: org.apache.http.Header parseHeader(org.apache.http.util.CharArrayBuffer)> -> _NONE_
<android.net.sip.SipProfile: java.lang.String getDisplayName()> -> _SOURCE_
<java.security.CodeSigner: java.lang.String toString()> -> _NONE_
<android.graphics.Path$Direction: android.graphics.Path$Direction[] values()> -> _NONE_
<android.view.accessibility.AccessibilityEvent: void setEventType(int)> -> _SINK_ 
<android.view.Window: void <init>(android.content.Context)> -> _NONE_
<android.content.ContextWrapper: void enforceUriPermission(android.net.Uri,int,int,int,java.lang.String)> -> _NONE_
<android.animation.ValueAnimator: void resume()> -> _NONE_
<android.webkit.WebView: void onWindowVisibilityChanged(int)> -> _NONE_
<android.os.Parcel: void finalize()> -> _NONE_
<android.webkit.WebView: void postUrl(java.lang.String,byte[])> -> _NONE_
<android.bluetooth.BluetoothDevice: boolean fetchUuidsWithSdp()> -> _NONE_
<android.net.sip.SipAudioCall: void answerCall(int)> -> _NONE_
<android.view.View: void setOnTouchListener(android.view.View$OnTouchListener)> -> _SINK_ 
<java.lang.StringBuilder: java.lang.StringBuilder delete(int,int)> -> _NONE_
<android.location.LocationManager: void setTestProviderLocation(java.lang.String,android.location.Location)> -> _SINK_ 
<android.net.sip.SipSession: boolean isInCall()> -> _NONE_
<android.view.ViewPropertyAnimator: android.animation.TimeInterpolator getInterpolator()> -> _SOURCE_
<android.webkit.WebSettings: void setUseWideViewPort(boolean)> -> _NONE_
<android.telephony.TelephonyManager: int getCallState()> -> _SOURCE_
<android.content.ContextWrapper: void sendOrderedBroadcast(android.content.Intent,java.lang.String)> -> _SINK_ 
<java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)> -> _SINK_ 
<android.os.Debug$MemoryInfo: int describeContents()> -> _SINK_ 
<android.view.View: void setScrollBarStyle(int)> -> _SINK_ 
<android.database.sqlite.SQLiteDatabase: void beginTransactionWithListenerNonExclusive(android.database.sqlite.SQLiteTransactionListener)> -> _NONE_
<java.net.Socket: java.lang.String toString()> -> _NONE_
<android.graphics.RectF: boolean contains(float,float,float,float)> -> _NONE_
<android.view.MotionEvent: float getHistoricalX(int)> -> _SOURCE_
<android.webkit.WebSettings: void setBuiltInZoomControls(boolean)> -> _NONE_
<android.view.MotionEvent$PointerCoords: void copyFrom(android.view.MotionEvent$PointerCoords)> -> _NONE_
<android.os.Parcel: void writeInterfaceToken(java.lang.String)> -> _NONE_
<java.lang.Long: int hashCode()> -> _SINK_ 
<java.nio.charset.CharsetEncoder: boolean canEncode(char)> -> _NONE_
<java.io.File: boolean canWrite()> -> _NONE_
<android.nfc.NfcAdapter: void disableReaderMode(android.app.Activity)> -> _NONE_
<android.view.accessibility.AccessibilityNodeInfo: void addChild(android.view.View)> -> _NONE_
<android.view.MotionEvent: int getPointerCount()> -> _SOURCE_
<android.app.Application: void onTrimMemory(int)> -> _NONE_
<android.webkit.WebView: void computeScroll()> -> _NONE_
<android.webkit.WebSettings: void setFixedFontFamily(java.lang.String)> -> _NONE_
<android.app.Activity: void setProgressBarVisibility(boolean)> -> _SINK_ 
<android.view.View: void setVisibility(int)> -> _SINK_ 
<java.lang.Long: java.lang.String toBinaryString(long)> -> _SINK_ 
<java.security.KeyException: void <init>(java.lang.String)> -> _NONE_
<android.animation.Animator: void setupStartValues()> -> _NONE_
<java.security.SignatureException: void <init>(java.lang.Throwable)> -> _NONE_
<android.content.pm.ProviderInfo: java.lang.String toString()> -> _NONE_
<java.lang.Class: java.lang.Object newInstance()> -> _NONE_
<android.view.View: void setSaveEnabled(boolean)> -> _SINK_ 
<android.webkit.WebSettings: java.lang.String getSerifFontFamily()> -> _SOURCE_
<android.print.PrintDocumentInfo: java.lang.String getName()> -> _SOURCE_
<java.lang.reflect.Field: java.lang.Class getDeclaringClass()> -> _SOURCE_
<android.hardware.Camera: void release()> -> _NONE_
<android.accounts.AccountManager: android.accounts.Account[] getAccounts()> -> _SOURCE_
<java.lang.RuntimeException: void <init>()> -> _NONE_
<android.view.View: void playSoundEffect(int)> -> _NONE_
<android.print.PrintDocumentInfo: java.lang.String toString()> -> _NONE_
<android.os.ParcelUuid: java.lang.String toString()> -> _NONE_
<android.animation.Keyframe: java.lang.Object clone()> -> _NONE_
<android.app.Service: void onTaskRemoved(android.content.Intent)> -> _NONE_
<android.app.Fragment: java.lang.String getTag()> -> _SOURCE_
<java.lang.ClassLoader: java.lang.Package[] getPackages()> -> _SOURCE_
<java.net.URI: boolean equals(java.lang.Object)> -> _NONE_
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getClassName()> -> _SOURCE_
<android.telephony.CellLocation: void <init>()> -> _NONE_
<android.widget.AbsListView: void setRemoteViewsAdapter(android.content.Intent)> -> _SINK_ 
<android.app.Notification$Builder: android.app.Notification$Builder setExtras(android.os.Bundle)> -> _SINK_ 
<android.app.Dialog: void setCanceledOnTouchOutside(boolean)> -> _SINK_ 
<java.lang.InternalError: void <init>(java.lang.String)> -> _NONE_
<android.widget.TextView: void setTextLocale(java.util.Locale)> -> _SINK_ 
<android.graphics.drawable.Drawable: boolean isStateful()> -> _NONE_
<android.webkit.WebView: void onAttachedToWindow()> -> _NONE_
<android.view.View: boolean post(java.lang.Runnable)> -> _NONE_
<android.content.Intent: android.os.Bundle getExtras()> -> _SOURCE_
<org.apache.http.util.ByteArrayBuffer: int byteAt(int)> -> _SINK_ 
<android.webkit.WebView$HitTestResult: void <init>()> -> _NONE_
<android.print.PrintAttributes$MediaSize: boolean equals(java.lang.Object)> -> _NONE_
<android.content.ContextWrapper: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)> -> _SINK_ 
<android.content.ContentProviderOperation: void <clinit>()> -> _NONE_
<android.content.ContentResolver: android.content.SyncAdapterType[] getSyncAdapterTypes()> -> _SOURCE_
<android.graphics.Canvas: void drawPicture(android.graphics.Picture,android.graphics.RectF)> -> _NONE_
<android.view.View: int computeHorizontalScrollExtent()> -> _NONE_
<android.net.Uri: int compareTo(android.net.Uri)> -> _SOURCE_
<android.content.Intent: android.content.Intent parseUri(java.lang.String,int)> -> _NONE_
<java.util.UUID: java.util.UUID nameUUIDFromBytes(byte[])> -> _SINK_ 
<java.util.BitSet: int nextClearBit(int)> -> _SINK_ 
<android.view.animation.Transformation: void set(android.view.animation.Transformation)> -> _SINK_ 
<android.util.SparseBooleanArray: boolean get(int)> -> _SOURCE_
<android.graphics.Region: void <init>(android.graphics.Rect)> -> _NONE_
<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofKeyframe(android.util.Property,android.animation.Keyframe[])> -> _NONE_
<java.lang.StringBuffer: void <init>(java.lang.CharSequence)> -> _NONE_
<android.media.MediaPlayer: void setSurface(android.view.Surface)> -> _SINK_ 
<android.app.Fragment: boolean onOptionsItemSelected(android.view.MenuItem)> -> _NONE_
<android.content.IntentFilter: void dump(android.util.Printer,java.lang.String)> -> _NONE_
<android.net.sip.SipManager: void register(android.net.sip.SipProfile,int,android.net.sip.SipRegistrationListener)> -> _NONE_
<android.app.Activity: void onSaveInstanceState(android.os.Bundle)> -> _NONE_
<android.accessibilityservice.AccessibilityServiceInfo: java.lang.String feedbackTypeToString(int)> -> _NONE_
<android.graphics.Paint: float measureText(java.lang.String)> android.permission.STOP_APP_SWITCHES -> _NONE_
<android.graphics.Region: void finalize()> -> _NONE_
<java.net.URISyntaxException: java.lang.String getInput()> -> _SOURCE_
<android.accounts.AccountAuthenticatorActivity: void sendBroadcast(android.content.Intent,java.lang.String)> android.permission.BROADCAST_STICKY android.permission.MANAGE_APP_TOKENS -> _SINK_ 
<java.nio.charset.CoderResult: boolean isMalformed()> -> _NONE_
<android.content.ContentProvider: android.content.res.AssetFileDescriptor openTypedAssetFile(android.net.Uri,java.lang.String,android.os.Bundle)> -> _NONE_
<java.nio.LongBuffer: boolean equals(java.lang.Object)> -> _NONE_
<java.lang.String: int lastIndexOf(int,int)> -> _SINK_ 
<android.webkit.WebView: void pauseTimers()> -> _NONE_
<android.accounts.AccountManager: void addOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener,android.os.Handler,boolean)> -> _NONE_
<android.widget.AbsListView: boolean performAccessibilityAction(int,android.os.Bundle)> -> _NONE_
<android.telephony.SignalStrength: int getCdmaEcio()> -> _SOURCE_
<android.graphics.drawable.Drawable: int getIntrinsicHeight()> -> _SOURCE_
<android.webkit.WebView: void setWebChromeClient(android.webkit.WebChromeClient)> -> _SINK_ 
<android.location.Location: java.lang.String convert(double,int)> -> _NONE_
<java.nio.charset.CharsetDecoder: void implReplaceWith(java.lang.String)> -> _NONE_
<android.view.DragEvent: java.lang.Object getLocalState()> -> _SOURCE_
<android.webkit.WebSettings: boolean getLightTouchEnabled()> -> _SOURCE_
<android.widget.AbsListView: void beforeTextChanged(java.lang.CharSequence,int,int,int)> -> _NONE_
<java.lang.Class: java.lang.Class[] getDeclaredClasses()> -> _SOURCE_
<android.view.View: void setLeft(int)> -> _SINK_ 
<java.lang.Byte: double doubleValue()> -> _NONE_
<java.net.ServerSocket: void bind(java.net.SocketAddress,int)> -> _NONE_
<java.net.Socket: void setSocketImplFactory(java.net.SocketImplFactory)> -> _SINK_ 
<android.view.View: void forceLayout()> -> _NONE_
<android.provider.Browser: void <clinit>()> -> _NONE_
<java.lang.Float: boolean isNaN()> -> _NONE_
<java.security.NoSuchAlgorithmException: void <init>()> -> _NONE_
<android.view.accessibility.AccessibilityNodeInfo: void setMovementGranularities(int)> -> _SINK_ 
<android.widget.TextView: void setMinWidth(int)> -> _SINK_ 
<android.graphics.Matrix: void setRotate(float,float,float)> -> _SINK_ 
<java.lang.CloneNotSupportedException: void <init>(java.lang.String)> -> _NONE_
<android.app.Fragment: void setTargetFragment(android.app.Fragment,int)> -> _SINK_ 
<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)> -> _SINK_ 
<android.animation.LayoutTransition: void hideChild(android.view.ViewGroup,android.view.View,int)> -> _NONE_
<java.lang.Object: void wait(long)> -> _NONE_
<android.graphics.Canvas: void drawCircle(float,float,float,android.graphics.Paint)> -> _NONE_
<android.text.Layout: android.text.TextPaint getPaint()> -> _SOURCE_
<android.view.KeyEvent: int getUnicodeChar()> -> _SOURCE_
<java.lang.StackOverflowError: void <init>(java.lang.String)> -> _NONE_
<java.util.ArrayList: void <init>(java.util.Collection)> -> _NONE_
<android.content.Intent: android.content.Intent putCharSequenceArrayListExtra(java.lang.String,java.util.ArrayList)> -> _NONE_
<android.app.Activity: void onActionModeStarted(android.view.ActionMode)> -> _NONE_
<android.hardware.Camera$Parameters: void setPictureFormat(int)> -> _SINK_ 
<android.widget.TextView: void setTextAppearance(android.content.Context,int)> -> _SINK_ 
<android.content.ContentResolver: void notifyChange(android.net.Uri,android.database.ContentObserver,boolean)> -> _NONE_
<android.app.PendingIntent: android.app.PendingIntent getActivity(android.content.Context,int,android.content.Intent,int)> -> _SOURCE_
<android.content.ContentResolver: java.io.OutputStream openOutputStream(android.net.Uri)> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: void setCanOpenPopup(boolean)> -> _SINK_ 
<android.telephony.ServiceState: void copyFrom(android.telephony.ServiceState)> -> _NONE_
<android.os.Parcel: void writeIntArray(int[])> -> _NONE_
<android.content.Intent: android.content.Intent makeMainSelectorActivity(java.lang.String,java.lang.String)> -> _NONE_
<java.util.Random: int nextInt()> -> _SINK_ 
<android.util.SparseArray: int size()> -> _SINK_ 
<android.view.MotionEvent: float getTouchMinor()> -> _SOURCE_
<android.webkit.WebSettings: java.lang.String getDefaultTextEncodingName()> -> _SOURCE_
<android.view.KeyEvent: char getDisplayLabel()> -> _SOURCE_
<android.app.Notification: int describeContents()> -> _SINK_ 
<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long)> -> _NONE_
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)> android.permission.ACCESS_FINE_LOCATION -> _SOURCE_
<java.util.Date: void <init>(int,int,int,int,int)> -> _NONE_
<java.lang.Character: boolean isLowerCase(int)> -> _NONE_
<android.widget.ListView: int getMaxScrollAmount()> -> _SOURCE_
<android.view.View: boolean dispatchHoverEvent(android.view.MotionEvent)> -> _NONE_
<java.nio.charset.CharsetEncoder: boolean isLegalReplacement(byte[])> -> _NONE_
<android.graphics.RectF: float centerY()> -> _NONE_
<android.content.res.Resources: android.content.res.AssetManager getAssets()> -> _SOURCE_
<android.widget.AbsListView: void setMultiChoiceModeListener(android.widget.AbsListView$MultiChoiceModeListener)> -> _NONE_
<android.view.animation.Animation: boolean isInitialized()> -> _NONE_
<android.view.ViewGroup: boolean fitSystemWindows(android.graphics.Rect)> -> _NONE_
<android.os.Parcel: int[] createIntArray()> -> _NONE_
<java.net.Socket: void connect(java.net.SocketAddress)> -> _NONE_
<java.net.DatagramSocket: void setTrafficClass(int)> -> _SINK_ 
<android.content.res.Resources: int[] getIntArray(int)> -> _SOURCE_
<android.view.KeyEvent: android.view.KeyEvent changeTimeRepeat(android.view.KeyEvent,long,int)> -> _NONE_
<org.apache.http.util.CharArrayBuffer: int capacity()> -> _SINK_ 
<android.nfc.NfcAdapter: boolean isEnabled()> -> _NONE_
<android.location.Location: void setAccuracy(float)> -> _SINK_ 
<android.graphics.Paint: android.graphics.Rasterizer getRasterizer()> -> _SOURCE_
<android.widget.AbsListView: void onOverScrolled(int,int,boolean,boolean)> -> _NONE_
<android.widget.TextView: java.lang.CharSequence getHint()> -> _SOURCE_
<android.location.LocationManager: void setTestProviderEnabled(java.lang.String,boolean)> -> _SINK_ 
<java.security.spec.EllipticCurve: byte[] getSeed()> -> _SOURCE_
<android.webkit.WebView: android.webkit.WebSettings getSettings()> -> _SOURCE_
<android.content.pm.Signature: int hashCode()> -> _SINK_ 
<android.os.Parcel: int dataAvail()> -> _SINK_ 
<android.graphics.drawable.Drawable: android.graphics.Region getTransparentRegion()> -> _SOURCE_
<android.content.ContextWrapper: java.io.File getFilesDir()> -> _SOURCE_
<android.content.ContentProvider: android.os.ParcelFileDescriptor openFileHelper(android.net.Uri,java.lang.String)> -> _NONE_
<android.widget.Scroller: void startScroll(int,int,int,int,int)> -> _NONE_
<java.util.HashMap: boolean isEmpty()> -> _NONE_
<org.apache.http.ProtocolVersion: boolean equals(java.lang.Object)> -> _NONE_
<android.app.Notification$Action: void <clinit>()> -> _NONE_
<android.app.Activity: java.lang.String getCallingPackage()> -> _SOURCE_
<java.nio.charset.CharsetEncoder: void implOnMalformedInput(java.nio.charset.CodingErrorAction)> -> _NONE_
<android.util.SparseBooleanArray: int indexOfKey(int)> -> _SINK_ 
<java.net.URLStreamHandler: boolean sameFile(java.net.URL,java.net.URL)> -> _NONE_
<java.nio.charset.CharsetDecoder: void implReset()> -> _NONE_
<java.lang.Character: boolean isJavaLetter(char)> -> _NONE_
<android.app.Activity: void onResume()> -> _NONE_
<android.hardware.Camera: void takePicture(android.hardware.Camera$ShutterCallback,android.hardware.Camera$PictureCallback,android.hardware.Camera$PictureCallback,android.hardware.Camera$PictureCallback)> -> _NONE_
<android.hardware.Camera$Parameters: int getMaxNumFocusAreas()> -> _SOURCE_
<android.app.Dialog: void onWindowFocusChanged(boolean)> -> _NONE_
<java.lang.String: void <init>()> -> _NONE_
<android.accounts.OperationCanceledException: void <init>(java.lang.String)> -> _NONE_
<android.content.ContextWrapper: java.io.File[] getExternalFilesDirs(java.lang.String)> -> _SOURCE_
<java.security.cert.Certificate: java.lang.String getType()> -> _SOURCE_
<android.view.View: void getWindowVisibleDisplayFrame(android.graphics.Rect)> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: boolean isOpen()> -> _NONE_
<android.widget.ListView: void setRemoteViewsAdapter(android.content.Intent)> -> _SINK_ 
<android.view.animation.Transformation: java.lang.String toShortString()> -> _NONE_
<android.graphics.Bitmap: void setPixels(int[],int,int,int,int,int,int)> -> _SINK_ 
<android.content.ContentResolver: android.os.ParcelFileDescriptor openFileDescriptor(android.net.Uri,java.lang.String,android.os.CancellationSignal)> -> _NONE_
<android.webkit.WebSettings: void setDefaultFixedFontSize(int)> -> _NONE_
<java.util.HashMap: void <init>(int)> -> _NONE_
<android.view.View: void dispatchWindowFocusChanged(boolean)> -> _NONE_
<android.view.View: void setOnDragListener(android.view.View$OnDragListener)> -> _SINK_ 
<android.widget.TextView: int getBaseline()> -> _SOURCE_
<android.content.pm.ActivityInfo: int getThemeResource()> -> _SOURCE_
<java.net.DatagramPacket: void setData(byte[])> -> _SINK_ 
<android.widget.TextView: void setSingleLine(boolean)> -> _SINK_ 
<android.widget.AbsListView: void onFilterComplete(int)> -> _NONE_
<android.content.ContentProviderOperation$Builder: android.content.ContentProviderOperation$Builder withValueBackReferences(android.content.ContentValues)> -> _NONE_
<android.widget.RemoteViews: void setBoolean(int,java.lang.String,boolean)> -> _SINK_ 
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromResourceStream(android.content.res.Resources,android.util.TypedValue,java.io.InputStream,java.lang.String,android.graphics.BitmapFactory$Options)> -> _NONE_
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo focusSearch(int)> -> _NONE_
<android.graphics.Point: boolean equals(java.lang.Object)> -> _NONE_
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)> -> _SINK_ 
<android.view.accessibility.AccessibilityNodeInfo: void addAction(int)> -> _NONE_
<android.telephony.PhoneStateListener: void <init>()> -> _NONE_
<android.widget.AbsListView: void onMeasure(int,int)> -> _NONE_
<android.os.Parcel: void writeCharArray(char[])> -> _NONE_
<android.app.Activity: void startManagingCursor(android.database.Cursor)> -> _SINK_ 
<java.io.PrintWriter: void write(char[],int,int)> -> _NONE_
<android.hardware.Camera$Parameters: boolean getAutoWhiteBalanceLock()> -> _SOURCE_
<android.text.style.ImageSpan: void <init>(android.graphics.Bitmap)> -> _NONE_
<android.graphics.Rect: boolean intersect(int,int,int,int)> -> _NONE_
<android.view.animation.Animation: void finalize()> -> _NONE_
<android.os.Looper: void quitSafely()> -> _NONE_
<android.hardware.Camera$Parameters: void setExposureCompensation(int)> -> _SINK_ 
<java.util.BitSet: java.util.BitSet valueOf(long[])> -> _NONE_
<android.content.pm.ComponentInfo: int getLogoResource()> -> _SOURCE_
<android.content.Loader: void onContentChanged()> -> _NONE_
<android.widget.ExpandableListView: boolean expandGroup(int,boolean)> -> _NONE_
<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)> -> _NONE_
<android.content.res.AssetManager: void close()> -> _NONE_
<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder onMalformedInput(java.nio.charset.CodingErrorAction)> -> _SOURCE_
<android.net.sip.SipSession: java.lang.String getCallId()> -> _SOURCE_
<android.content.pm.Signature: char[] toChars()> -> _NONE_
<android.text.style.CharacterStyle: android.text.style.CharacterStyle getUnderlying()> -> _SOURCE_
<android.view.View: void setScrollContainer(boolean)> -> _SINK_ 
<java.util.Date: int getYear()> -> _SOURCE_
<android.app.Dialog: boolean onKeyDown(int,android.view.KeyEvent)> -> _NONE_
<android.animation.Keyframe: android.animation.TimeInterpolator getInterpolator()> -> _SOURCE_
<android.graphics.Region: void translate(int,int)> -> _NONE_
<android.content.pm.PermissionGroupInfo: void <init>()> -> _NONE_
<java.net.URI: java.net.URI parseServerAuthority()> -> _NONE_
<android.util.Log: int wtf(java.lang.String,java.lang.String)> -> _SINK_ 
<java.lang.Enum: int hashCode()> -> _NONE_
<android.view.accessibility.AccessibilityRecord: java.lang.CharSequence getClassName()> -> _SOURCE_
<java.math.BigInteger: java.math.BigInteger clearBit(int)> -> _NONE_
<android.webkit.WebChromeClient: boolean onJsConfirm(android.webkit.WebView,java.lang.String,java.lang.String,android.webkit.JsResult)> -> _NONE_
<android.hardware.Camera$Face: void <init>()> -> _NONE_
<java.lang.annotation.ElementType: java.lang.annotation.ElementType valueOf(java.lang.String)> -> _NONE_
<android.webkit.WebSettings: void setUserAgentString(java.lang.String)> -> _NONE_
<android.view.View: android.graphics.Bitmap getDrawingCache()> -> _SOURCE_
<android.text.Layout: boolean isSpanned()> -> _NONE_
<java.lang.StringBuilder: java.lang.StringBuilder append(long)> -> _NONE_
<android.app.Dialog: void setDismissMessage(android.os.Message)> -> _SINK_ 
<android.view.View: int getScrollBarFadeDuration()> -> _SOURCE_
<java.lang.Long: void <clinit>()> -> _NONE_
<java.lang.AssertionError: void <init>(float)> -> _NONE_
<android.animation.LayoutTransition: void disableTransitionType(int)> -> _NONE_
<android.view.accessibility.AccessibilityRecord: java.lang.String toString()> -> _NONE_
<android.view.MotionEvent: void <init>()> -> _NONE_
<android.content.ContextWrapper: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> -> _SINK_ 
<android.animation.Animator: void pause()> -> _NONE_
<android.hardware.Camera$Parameters: int getJpegQuality()> -> _SOURCE_
<android.view.WindowId: void <init>()> -> _NONE_
<android.app.Activity: boolean hasWindowFocus()> -> _NONE_
<java.io.IOException: void <init>(java.lang.String)> -> _NONE_
<android.widget.AbsListView: boolean isSmoothScrollbarEnabled()> -> _NONE_
<android.content.Intent: android.content.Intent replaceExtras(android.content.Intent)> -> _SINK_ 
<android.app.Fragment: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)> -> _NONE_
<android.app.Dialog: void openContextMenu(android.view.View)> -> _NONE_
<android.content.SyncAdapterType: java.lang.String toString()> -> _NONE_
<android.os.Bundle: void putShort(java.lang.String,short)> -> _NONE_
<android.telephony.ServiceState: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<android.view.Window: void setContainer(android.view.Window)> -> _NONE_
<android.content.pm.PackageItemInfo: void <init>(android.os.Parcel)> -> _NONE_
<android.app.TaskStackBuilder: android.app.TaskStackBuilder addNextIntent(android.content.Intent)> -> _SINK_ 
<java.lang.StringBuilder: java.lang.StringBuilder insert(int,float)> -> _NONE_
<android.graphics.Canvas$EdgeType: android.graphics.Canvas$EdgeType[] values()> -> _NONE_
<java.lang.Boolean: java.lang.String toString()> -> _NONE_
<java.lang.String: java.lang.String substring(int,int)> -> _NONE_
<android.bluetooth.BluetoothGattCharacteristic: int getPermissions()> -> _SOURCE_
<android.webkit.WebView: void goForward()> -> _NONE_
<android.content.ComponentName: boolean equals(java.lang.Object)> -> _NONE_
<android.view.ViewGroup: void setAlwaysDrawnWithCacheEnabled(boolean)> -> _NONE_
<android.telephony.CellInfoCdma: void <clinit>()> -> _NONE_
<android.view.accessibility.AccessibilityRecord: boolean isEnabled()> -> _NONE_
<java.lang.Enum: java.lang.String name()> -> _NONE_
<android.animation.Animator: boolean isPaused()> -> _NONE_
<android.app.Notification$Builder: android.app.Notification$Builder setWhen(long)> -> _SINK_ 
<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()> -> _SOURCE_
<java.security.cert.Certificate: boolean equals(java.lang.Object)> -> _NONE_
<android.content.ContextWrapper: int checkPermission(java.lang.String,int,int)> -> _SINK_ 
<android.hardware.Camera$Parameters: void setJpegThumbnailSize(int,int)> -> _SINK_ 
<android.bluetooth.BluetoothDevice: int hashCode()> -> _SINK_ 
<android.view.View: boolean getFilterTouchesWhenObscured()> -> _SOURCE_
<android.os.Bundle: boolean isEmpty()> -> _NONE_
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator scaleX(float)> -> _NONE_
<java.util.HashMap: void <init>(int,float)> -> _NONE_
<android.graphics.Matrix: boolean postScale(float,float)> -> _NONE_
<java.net.URL: void <init>(java.lang.String)> -> _NONE_
<android.view.View: int getNextFocusDownId()> -> _SOURCE_
<android.provider.Browser: void addSearchUrl(android.content.ContentResolver,java.lang.String)> -> _NONE_
<android.view.View: void buildLayer()> -> _NONE_
<android.graphics.Rect: boolean contains(int,int)> -> _NONE_
<android.widget.TextView: void setError(java.lang.CharSequence,android.graphics.drawable.Drawable)> -> _SINK_ 
<android.view.View: void dispatchSetPressed(boolean)> -> _NONE_
<android.content.ComponentName: void <init>(android.os.Parcel)> -> _NONE_
<android.media.MediaFormat: java.lang.String toString()> -> _NONE_
<android.view.View: void onCancelPendingInputEvents()> -> _NONE_
<android.app.backup.BackupDataOutput: void <init>()> -> _NONE_
<android.graphics.MaskFilter: void finalize()> -> _NONE_
<android.graphics.RectF: void set(float,float,float,float)> -> _SINK_ 
<android.view.accessibility.AccessibilityRecord: int getWindowId()> -> _SOURCE_
<java.lang.ClassCastException: void <init>(java.lang.String)> -> _NONE_
<android.view.InputDevice$MotionRange: float getRange()> -> _SOURCE_
<java.lang.Class: java.lang.Class asSubclass(java.lang.Class)> -> _NONE_
<android.content.Intent: int getFlags()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo obtain(android.view.View)> -> _NONE_
<android.os.Bundle: void putInt(java.lang.String,int)> -> _NONE_
<android.content.pm.Signature: java.lang.String toCharsString()> -> _NONE_
<android.location.LocationManager: void <init>()> -> _NONE_
<java.lang.Character: boolean isBmpCodePoint(int)> -> _NONE_
<android.view.View: int getScrollBarSize()> -> _SOURCE_
<java.lang.ClassLoader: void clearAssertionStatus()> -> _NONE_
<java.nio.Buffer: boolean hasRemaining()> -> _NONE_
<android.nfc.FormatException: void <init>(java.lang.String,java.lang.Throwable)> -> _NONE_
<android.app.Service: void onLowMemory()> -> _NONE_
<android.app.LocalActivityManager: android.os.Bundle saveInstanceState()> -> _SOURCE_
<android.view.View: boolean isInTouchMode()> -> _NONE_
<android.view.Display: int getHeight()> -> _SOURCE_
<android.graphics.Rect: void set(int,int,int,int)> -> _SINK_ 
<java.io.PrintWriter: void print(char)> -> _NONE_
<java.io.FileInputStream: java.io.FileDescriptor getFD()> -> _SOURCE_
<android.view.View: boolean verifyDrawable(android.graphics.drawable.Drawable)> -> _NONE_
<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[],int,int)> -> _NONE_
<android.os.UserHandle: boolean equals(java.lang.Object)> -> _NONE_
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)> -> _NONE_
<android.content.ContextWrapper: android.content.ContentResolver getContentResolver()> -> _SOURCE_
<java.nio.charset.CharsetDecoder: java.nio.charset.CoderResult decode(java.nio.ByteBuffer,java.nio.CharBuffer,boolean)> -> _SOURCE_
<android.view.InputDevice: java.lang.String getDescriptor()> -> _SOURCE_
<android.app.Dialog: boolean onMenuOpened(int,android.view.Menu)> -> _NONE_
<android.webkit.WebSettings: boolean getDisplayZoomControls()> -> _SOURCE_
<android.widget.AbsListView: boolean checkLayoutParams(android.view.ViewGroup$LayoutParams)> -> _NONE_
<android.content.ContentProvider: java.lang.String[] getStreamTypes(android.net.Uri,java.lang.String)> -> _SOURCE_
<java.net.URLConnection: void setUseCaches(boolean)> -> _NONE_
<android.widget.ExpandableListView: android.widget.ListAdapter getAdapter()> -> _SOURCE_
<android.view.MotionEvent: void setSource(int)> -> _SINK_ 
<android.app.Notification$Builder: android.app.Notification$Builder setShowWhen(boolean)> -> _SINK_ 
<java.net.Proxy: java.lang.String toString()> -> _NONE_
<android.content.SyncAdapterType: void <init>(java.lang.String,java.lang.String,boolean,boolean)> -> _NONE_
<android.view.View: void onStartTemporaryDetach()> -> _NONE_
<java.nio.CharBuffer: java.nio.CharBuffer allocate(int)> -> _NONE_
<android.os.Bundle: void putStringArray(java.lang.String,java.lang.String[])> -> _NONE_
<android.view.View: void setOnClickListener(android.view.View$OnClickListener)> -> _SINK_ 
<android.provider.Browser: void deleteHistoryTimeFrame(android.content.ContentResolver,long,long)> -> _NONE_
<android.os.Parcel: void writeBooleanArray(boolean[])> -> _NONE_
<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo: boolean isHeading()> -> _NONE_
<android.webkit.WebView: void invokeZoomPicker()> -> _NONE_
<android.view.InputEvent: boolean isFromSource(int)> -> _NONE_
<android.content.IntentFilter: boolean hasAction(java.lang.String)> -> _NONE_
<android.os.Handler: void <init>(android.os.Looper)> -> _NONE_
<android.net.sip.SipAudioCall: android.net.sip.SipProfile getLocalProfile()> -> _SOURCE_
<java.util.Date: boolean after(java.util.Date)> -> _NONE_
<java.lang.StringBuilder: java.lang.StringBuilder append(char)> -> _NONE_
<android.view.View: void setBackground(android.graphics.drawable.Drawable)> -> _SINK_ 
<android.widget.AbsListView: int getTopPaddingOffset()> -> _SOURCE_
<android.net.wifi.SupplicantState: boolean isValidState(android.net.wifi.SupplicantState)> -> _NONE_
<java.util.BitSet: void set(int)> -> _SINK_ 
<android.database.sqlite.SQLiteProgram: void bindString(int,java.lang.String)> -> _NONE_
<android.widget.TextView: void setTypeface(android.graphics.Typeface,int)> -> _SINK_ 
<android.graphics.Paint: android.graphics.Paint$FontMetrics getFontMetrics()> -> _SOURCE_
<android.os.Parcel: int readInt()> -> _SINK_ 
<android.media.MediaPlayer$TrackInfo: int describeContents()> -> _SINK_ 
<android.os.WorkSource: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<android.net.http.SslCertificate: android.os.Bundle saveState(android.net.http.SslCertificate)> -> _NONE_
<java.nio.channels.SelectionKey: boolean isReadable()> -> _NONE_
<android.widget.ListView: void addFooterView(android.view.View,java.lang.Object,boolean)> -> _NONE_
<android.widget.AbsListView: void onAttachedToWindow()> -> _NONE_
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor dup()> -> _NONE_
<android.widget.RemoteViews: void addView(int,android.widget.RemoteViews)> -> _NONE_
<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence,int,int)> -> _NONE_
<java.net.URLConnection: int getHeaderFieldInt(java.lang.String,int)> -> _SOURCE_
<android.view.Display: void <init>()> -> _NONE_
<android.view.View: int getOverScrollMode()> -> _SOURCE_
<android.widget.TextView: android.text.InputFilter[] getFilters()> -> _SOURCE_
<android.view.View: int getSolidColor()> -> _SOURCE_
<android.webkit.WebSettings: void setPluginState(android.webkit.WebSettings$PluginState)> -> _NONE_
<java.lang.Class: java.lang.reflect.Constructor[] getConstructors()> -> _SOURCE_
<android.text.Layout: void getSelectionPath(int,int,android.graphics.Path)> -> _SOURCE_
<android.view.View: boolean onKeyLongPress(int,android.view.KeyEvent)> -> _NONE_
<android.os.ParcelUuid: void <init>(java.util.UUID)> -> _NONE_
<java.util.Locale: java.lang.String getDisplayName()> -> _SOURCE_
<java.lang.ClassLoader: java.lang.Class findClass(java.lang.String)> -> _NONE_
<android.view.accessibility.AccessibilityNodeInfo$CollectionInfo: boolean isHierarchical()> -> _NONE_
<android.animation.ValueAnimator: void setInterpolator(android.animation.TimeInterpolator)> -> _SINK_ 
<android.widget.AbsListView: void afterTextChanged(android.text.Editable)> -> _NONE_
<android.database.sqlite.SQLiteDatabase: void beginTransactionNonExclusive()> -> _NONE_
<android.text.style.ImageSpan: void <init>(android.graphics.drawable.Drawable,java.lang.String)> -> _NONE_
<android.net.sip.SipAudioCall$Listener: void onCallBusy(android.net.sip.SipAudioCall)> -> _NONE_
<android.graphics.drawable.Drawable: boolean onLevelChange(int)> -> _NONE_
<android.view.View: boolean isSoundEffectsEnabled()> -> _NONE_
<android.content.ContextWrapper: int checkCallingOrSelfUriPermission(android.net.Uri,int)> -> _SINK_ 
<java.util.BitSet: boolean isEmpty()> -> _NONE_
<android.graphics.Bitmap: boolean isRecycled()> -> _NONE_
<java.math.BigInteger: java.math.BigInteger setBit(int)> -> _SINK_ 
<android.app.Activity: boolean onGenericMotionEvent(android.view.MotionEvent)> -> _NONE_
<java.nio.IntBuffer: java.nio.IntBuffer wrap(int[],int,int)> -> _NONE_
<android.widget.RemoteViews: void reapply(android.content.Context,android.view.View)> -> _NONE_
<android.content.ClipDescription: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<android.util.SparseBooleanArray: java.lang.String toString()> -> _NONE_
<java.io.File: boolean mkdir()> -> _NONE_
<java.lang.ClassCastException: void <init>()> -> _NONE_
<java.util.AbstractCollection: boolean containsAll(java.util.Collection)> -> _NONE_
<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()> -> _SOURCE_
<android.os.Parcel: float readFloat()> -> _NONE_
<android.os.Bundle: void <clinit>()> -> _NONE_
<android.media.TimedText: android.graphics.Rect getBounds()> -> _SOURCE_
<android.view.View: void setNextFocusForwardId(int)> -> _SINK_ 
<java.nio.charset.UnmappableCharacterException: void <init>(int)> -> _NONE_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQueryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)> -> _SOURCE_
<java.io.File: java.lang.String getName()> -> _SOURCE_
<android.view.animation.LayoutAnimationController: void <init>(android.view.animation.Animation,float)> -> _NONE_
<android.content.OperationApplicationException: int getNumSuccessfulYieldPoints()> -> _SOURCE_
<android.nfc.NdefRecord: android.nfc.NdefRecord createApplicationRecord(java.lang.String)> -> _SINK_ 
<android.test.mock.MockContentResolver: void notifyChange(android.net.Uri,android.database.ContentObserver,boolean)> -> _NONE_
<java.lang.ThreadGroup: boolean isDaemon()> -> _NONE_
<android.webkit.JsPromptResult: void confirm(java.lang.String)> -> _NONE_
<android.database.sqlite.SQLiteDatabase: boolean inTransaction()> -> _NONE_
<android.view.InputDevice: android.view.InputDevice$MotionRange getMotionRange(int)> -> _SOURCE_
<android.graphics.Bitmap: void setHasMipMap(boolean)> -> _SINK_ 
<android.graphics.Canvas: boolean clipRect(float,float,float,float,android.graphics.Region$Op)> -> _NONE_
<android.os.Messenger: void <init>(android.os.IBinder)> -> _NONE_
<java.lang.Character: boolean isSpaceChar(char)> -> _NONE_
<android.view.View$AccessibilityDelegate: boolean performAccessibilityAction(android.view.View,int,android.os.Bundle)> -> _NONE_
<android.content.IntentFilter: boolean hasDataType(java.lang.String)> -> _NONE_
<android.view.accessibility.AccessibilityNodeInfo: void setViewIdResourceName(java.lang.String)> -> _SINK_ 
<android.location.Criteria: void setAltitudeRequired(boolean)> -> _SINK_ 
<android.net.sip.SipAudioCall$Listener: void onCallEstablished(android.net.sip.SipAudioCall)> -> _NONE_
<android.webkit.WebSettings: void setSupportMultipleWindows(boolean)> -> _NONE_
<android.view.ViewPropertyAnimator: void start()> -> _NONE_
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor fromDatagramSocket(java.net.DatagramSocket)> -> _NONE_
<android.os.storage.StorageManager: java.lang.String getMountedObbPath(java.lang.String)> -> _SOURCE_
<java.lang.NoSuchFieldError: void <init>()> -> _NONE_
<org.apache.http.util.CharArrayBuffer: void append(java.lang.String)> -> _NONE_
<java.nio.charset.CharsetEncoder: float averageBytesPerChar()> -> _NONE_
<java.lang.Thread: int activeCount()> -> _SINK_ 
<android.graphics.Canvas: int saveLayer(float,float,float,float,android.graphics.Paint,int)> -> _SINK_ 
<android.view.MotionEvent$PointerProperties: void copyFrom(android.view.MotionEvent$PointerProperties)> -> _NONE_
<android.view.MotionEvent$PointerCoords: void setAxisValue(int,float)> -> _SINK_ 
<android.bluetooth.BluetoothAdapter: boolean checkBluetoothAddress(java.lang.String)> -> _NONE_
<android.app.ActionBar$LayoutParams: void <init>(int)> -> _NONE_
<android.content.ContextWrapper: java.io.File getObbDir()> -> _SOURCE_
<android.graphics.Matrix: void set(android.graphics.Matrix)> -> _SINK_ 
<android.database.sqlite.SQLiteProgram: void clearBindings()> -> _NONE_
<android.net.wifi.WifiManager: android.net.wifi.WifiInfo getConnectionInfo()> android.permission.ACCESS_WIFI_STATE -> _SOURCE_
<java.net.InetAddress: java.lang.String getHostAddress()> -> _SOURCE_
<android.telephony.CellInfo: boolean isRegistered()> -> _NONE_
<java.net.ServerSocket: boolean isClosed()> -> _NONE_
<android.net.wifi.WifiManager: boolean saveConfiguration()> -> _NONE_
<android.content.pm.ServiceInfo: void dump(android.util.Printer,java.lang.String)> -> _NONE_
<android.view.View: int combineMeasuredStates(int,int)> -> _SINK_ 
<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)> -> _SOURCE_
<android.text.Layout: android.text.Layout$Alignment getParagraphAlignment(int)> -> _SOURCE_
<java.nio.ShortBuffer: boolean hasArray()> -> _NONE_
<java.nio.charset.CharsetDecoder: java.nio.CharBuffer decode(java.nio.ByteBuffer)> -> _SOURCE_
<android.app.Activity: boolean isChangingConfigurations()> -> _NONE_
<android.view.ViewGroup: boolean onInterceptHoverEvent(android.view.MotionEvent)> -> _NONE_
<android.app.Activity: void dismissDialog(int)> -> _NONE_
<android.view.View: void setHapticFeedbackEnabled(boolean)> -> _SINK_ 
<android.content.ContentProvider: android.content.ContentProviderResult[] applyBatch(java.util.ArrayList)> -> _NONE_
<android.view.KeyCharacterMap: int getKeyboardType()> -> _SOURCE_
<javax.security.auth.x500.X500Principal: void <init>(java.io.InputStream)> -> _NONE_
<android.net.sip.SipProfile: java.lang.String getAuthUserName()> -> _SOURCE_
<android.nfc.NdefRecord: java.lang.String toMimeType()> -> _NONE_
<android.app.TaskStackBuilder: android.app.TaskStackBuilder addParentStack(java.lang.Class)> -> _NONE_
<android.view.inputmethod.EditorInfo: int describeContents()> -> _SINK_ 
<java.net.Socket: boolean isInputShutdown()> -> _NONE_
<android.content.Intent: android.content.Intent putStringArrayListExtra(java.lang.String,java.util.ArrayList)> -> _NONE_
<android.view.ViewGroup: void requestTransparentRegion(android.view.View)> -> _NONE_
<android.widget.RemoteViews: void setImageViewBitmap(int,android.graphics.Bitmap)> -> _SINK_ 
<java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)> -> _NONE_
<android.view.View: boolean isHapticFeedbackEnabled()> -> _NONE_
<android.nfc.Tag: void <clinit>()> -> _NONE_
<android.database.sqlite.SQLiteStatement: long executeInsert()> android.permission.STOP_APP_SWITCHES -> _NONE_
<android.accessibilityservice.AccessibilityService: boolean performGlobalAction(int)> -> _NONE_
<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder replaceWith(byte[])> -> _SOURCE_
<java.net.URI: void <init>(java.lang.String,java.lang.String,java.lang.String)> -> _NONE_
<android.content.pm.ActivityInfo: void dump(android.util.Printer,java.lang.String)> -> _NONE_
<android.app.Fragment: java.lang.CharSequence getText(int)> -> _SOURCE_
<android.app.Notification$Builder: android.app.Notification$Builder setSound(android.net.Uri,int)> -> _SINK_ 
<android.net.wifi.WifiEnterpriseConfig: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<android.widget.TextView: int getCurrentHintTextColor()> -> _SOURCE_
<android.app.Activity: boolean onMenuItemSelected(int,android.view.MenuItem)> -> _NONE_
<android.widget.TextView: void setCompoundDrawablesRelative(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)> -> _SINK_ 
<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])> -> _NONE_
<java.lang.Thread: void start()> -> _NONE_
<android.os.UserHandle: void writeToParcel(android.os.UserHandle,android.os.Parcel)> -> _NONE_
<android.view.View: boolean getFitsSystemWindows()> -> _SOURCE_
<java.util.UUID: int version()> -> _SINK_ 
<android.view.ViewGroup: void startLayoutAnimation()> -> _NONE_
<android.graphics.Picture: void writeToStream(java.io.OutputStream)> -> _NONE_
<android.view.View: java.util.ArrayList getTouchables()> -> _SOURCE_
<android.view.WindowManager$LayoutParams: void <init>(android.os.Parcel)> -> _NONE_
<android.content.pm.ComponentInfo: java.lang.CharSequence loadLabel(android.content.pm.PackageManager)> -> _NONE_
<android.view.ViewGroup: boolean isMotionEventSplittingEnabled()> -> _NONE_
<android.content.pm.PackageManager: void <init>()> -> _NONE_
<android.webkit.WebHistoryItem: void <init>()> -> _NONE_
<android.view.accessibility.AccessibilityNodeInfo: boolean canOpenPopup()> -> _NONE_
<android.net.sip.SipAudioCall$Listener: void onCalling(android.net.sip.SipAudioCall)> -> _NONE_
<android.webkit.WebView: boolean overlayVerticalScrollbar()> -> _NONE_
<org.apache.http.util.CharArrayBuffer: void append(org.apache.http.util.CharArrayBuffer)> -> _NONE_
<java.io.File: void <init>(java.io.File,java.lang.String)> -> _NONE_
<android.content.Loader: void onStopLoading()> -> _NONE_
<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.Object)> -> _NONE_
<android.view.accessibility.AccessibilityNodeInfo: int getChildCount()> -> _SOURCE_
<java.net.URL: java.lang.String getUserInfo()> -> _SOURCE_
<android.app.Activity: android.app.FragmentManager getFragmentManager()> -> _SOURCE_
<android.content.BroadcastReceiver: void setResult(int,java.lang.String,android.os.Bundle)> -> _NONE_
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int,android.database.DatabaseErrorHandler)> -> _SINK_ 
<android.app.Service: boolean onUnbind(android.content.Intent)> -> _NONE_
<java.lang.NoSuchFieldError: void <init>(java.lang.String)> -> _NONE_
<android.view.View: void dispatchDraw(android.graphics.Canvas)> -> _NONE_
<android.telephony.ServiceState: boolean getRoaming()> -> _SOURCE_
<android.view.ViewGroup: void measureChildWithMargins(android.view.View,int,int,int,int)> -> _NONE_
<java.io.PrintWriter: void println()> -> _NONE_
<android.content.ContentResolver: void takePersistableUriPermission(android.net.Uri,int)> -> _NONE_
<android.accounts.AccountAuthenticatorActivity: void finish()> -> _NONE_
<java.lang.Byte: byte parseByte(java.lang.String)> -> _SINK_ 
<android.content.BroadcastReceiver$PendingResult: void setResultData(java.lang.String)> -> _SINK_ 
<java.io.SyncFailedException: void <init>(java.lang.String)> -> _NONE_
<java.net.SocketImpl: void setPerformancePreferences(int,int,int)> -> _NONE_
<java.util.concurrent.TimeUnit: void <clinit>()> -> _NONE_
<android.content.Loader: void <init>(android.content.Context)> -> _NONE_
<android.view.View: boolean awakenScrollBars(int,boolean)> -> _NONE_
<android.animation.ValueAnimator: void addUpdateListener(android.animation.ValueAnimator$AnimatorUpdateListener)> -> _NONE_
<java.math.BigInteger: void <init>(int,java.util.Random)> -> _NONE_
<android.widget.TextView: java.lang.CharSequence getImeActionLabel()> -> _SOURCE_
<android.view.View: int getImportantForAccessibility()> -> _SOURCE_
<android.app.ActivityManager: void restartPackage(java.lang.String)> -> _NONE_
<android.content.IntentSender: int describeContents()> -> _SINK_ 
<android.view.View: boolean hasFocus()> -> _NONE_
<android.widget.AdapterView: void setEmptyView(android.view.View)> -> _NONE_
<android.graphics.Path: void lineTo(float,float)> -> _NONE_
<android.view.View: boolean hasFocusable()> -> _NONE_
<android.view.KeyEvent: void <init>(int,int)> -> _NONE_
<android.view.Window: void setFormat(int)> -> _NONE_
<android.webkit.WebSettings$PluginState: android.webkit.WebSettings$PluginState valueOf(java.lang.String)> -> _NONE_
<android.view.View: void setTouchDelegate(android.view.TouchDelegate)> -> _SINK_ 
<android.graphics.drawable.Drawable: void setColorFilter(int,android.graphics.PorterDuff$Mode)> -> _NONE_
<android.view.View$DragShadowBuilder: void onProvideShadowMetrics(android.graphics.Point,android.graphics.Point)> -> _NONE_
<android.os.Bundle: void putBooleanArray(java.lang.String,boolean[])> -> _NONE_
<android.content.res.TypedArray: android.graphics.drawable.Drawable getDrawable(int)> -> _SOURCE_
<android.text.style.MetricAffectingSpan: android.text.style.MetricAffectingSpan getUnderlying()> -> _SOURCE_
<android.accessibilityservice.AccessibilityServiceInfo: int describeContents()> -> _SINK_ 
<android.content.res.Resources: java.io.InputStream openRawResource(int,android.util.TypedValue)> -> _NONE_
<java.lang.Integer: short shortValue()> -> _NONE_
<android.app.Fragment: void onDestroyView()> -> _NONE_
<android.app.Activity: java.lang.Object getLastNonConfigurationInstance()> -> _SOURCE_
<android.widget.ListView: void layoutChildren()> -> _NONE_
<java.lang.reflect.Method: java.lang.annotation.Annotation[][] getParameterAnnotations()> -> _SOURCE_
<android.graphics.Paint: void set(android.graphics.Paint)> -> _SINK_ 
<java.net.Socket: void setOOBInline(boolean)> -> _SINK_ 
<android.view.MotionEvent: float getY()> -> _SOURCE_
<android.net.Uri$Builder: android.net.Uri$Builder encodedPath(java.lang.String)> -> _NONE_
<org.apache.http.util.ByteArrayBuffer: void append(byte[],int,int)> -> _NONE_
<android.text.Layout: int getOffsetForHorizontal(int,float)> -> _SOURCE_
<android.app.Application: void <init>()> -> _NONE_
<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)> -> _SOURCE_
<java.io.File: long getFreeSpace()> -> _SOURCE_
<android.net.wifi.WifiInfo: int describeContents()> -> _SINK_ 
<android.net.wifi.WifiManager: boolean disableNetwork(int)> -> _NONE_
<android.telephony.CellLocation: android.telephony.CellLocation getEmpty()> -> _SOURCE_
<android.graphics.Picture: void endRecording()> -> _NONE_
<java.nio.IntBuffer: int hashCode()> -> _NONE_
<android.view.MotionEvent: float getToolMinor(int)> -> _SOURCE_
<android.view.ViewGroup: boolean dispatchGenericFocusedEvent(android.view.MotionEvent)> -> _NONE_
<java.util.Locale: java.lang.String getDisplayVariant(java.util.Locale)> -> _SOURCE_
<java.lang.Double: short shortValue()> -> _NONE_
<android.net.wifi.SupplicantState: android.net.wifi.SupplicantState valueOf(java.lang.String)> -> _SINK_ 
<android.provider.ContactsContract$ProfileSyncState: void <init>()> -> _NONE_
<android.app.PendingIntent: void send(int)> -> _SINK_ 
<android.app.Notification$Style: void internalSetSummaryText(java.lang.CharSequence)> -> _NONE_
<java.nio.ShortBuffer: short[] array()> -> _NONE_
<android.content.ContextWrapper: android.content.pm.PackageManager getPackageManager()> -> _SOURCE_
<android.net.wifi.WifiConfiguration: void <init>()> -> _NONE_
<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofObject(android.util.Property,android.animation.TypeEvaluator,java.lang.Object[])> -> _NONE_
<android.content.BroadcastReceiver$PendingResult: boolean getAbortBroadcast()> -> _SOURCE_
<android.view.ActionMode: void setTitleOptionalHint(boolean)> -> _NONE_
<android.graphics.Picture: void <init>(android.graphics.Picture)> -> _NONE_
<android.graphics.drawable.Drawable: void setDither(boolean)> -> _NONE_
<android.view.ViewGroup: void requestChildFocus(android.view.View,android.view.View)> -> _NONE_
<java.nio.ByteBuffer: int compareTo(java.lang.Object)> -> _NONE_
<android.widget.TextView: boolean onPrivateIMECommand(java.lang.String,android.os.Bundle)> -> _NONE_
<android.app.PendingIntent: void cancel()> -> _NONE_
<java.lang.Character: boolean isWhitespace(char)> -> _NONE_
<android.view.Surface: void <clinit>()> -> _NONE_
<android.net.sip.SipManager: boolean isOpened(java.lang.String)> -> _NONE_
<android.location.LocationProvider: boolean supportsSpeed()> -> _NONE_
<android.widget.TextView: void setMinLines(int)> -> _SINK_ 
<java.nio.charset.CoderResult: java.nio.charset.CoderResult unmappableForLength(int)> -> _NONE_
<android.widget.TextView: int getTopPaddingOffset()> -> _SOURCE_
<java.io.FilterOutputStream: void flush()> -> _NONE_
<android.animation.ValueAnimator: android.animation.ValueAnimator ofInt(int[])> -> _NONE_
<android.location.GpsStatus: int getMaxSatellites()> -> _SOURCE_
<android.telephony.gsm.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> -> _SINK_ 
<android.app.Dialog: void setOnKeyListener(android.content.DialogInterface$OnKeyListener)> -> _SINK_ 
<java.net.URI: boolean isAbsolute()> -> _NONE_
<java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()> -> _SOURCE_
<android.content.Intent: long getLongExtra(java.lang.String,long)> -> _SOURCE_
<android.media.MediaFormat: java.nio.ByteBuffer getByteBuffer(java.lang.String)> -> _SOURCE_
<java.lang.Double: java.lang.String toString(double)> -> _SINK_ 
<android.view.View: boolean dispatchTrackballEvent(android.view.MotionEvent)> -> _NONE_
<android.widget.TextView: int getLineHeight()> -> _SOURCE_
<android.widget.AbsListView: void reclaimViews(java.util.List)> -> _NONE_
<java.net.URI: java.lang.String getFragment()> -> _SOURCE_
<android.graphics.PathEffect: void <init>()> -> _NONE_
<android.webkit.WebSettings: boolean getSavePassword()> -> _SOURCE_
<java.util.AbstractCollection: java.lang.Object[] toArray(java.lang.Object[])> -> _NONE_
<android.net.sip.SipSession$Listener: void onCallBusy(android.net.sip.SipSession)> -> _NONE_
<java.lang.Class: int getModifiers()> -> _SOURCE_
<android.graphics.Canvas: void drawPosText(java.lang.String,float[],android.graphics.Paint)> -> _NONE_
<android.app.Dialog: boolean dispatchKeyEvent(android.view.KeyEvent)> -> _NONE_
<java.net.Socket: boolean isBound()> -> _NONE_
<android.os.Debug$MemoryInfo: void readFromParcel(android.os.Parcel)> -> _NONE_
<android.provider.Settings$System: boolean putInt(android.content.ContentResolver,java.lang.String,int)> android.permission.WRITE_SETTINGS -> _NONE_
<android.view.accessibility.AccessibilityNodeInfo: void setPackageName(java.lang.CharSequence)> -> _SINK_ 
<android.text.style.MetricAffectingSpan: void <init>()> -> _NONE_
<android.app.Notification: void <init>(int,java.lang.CharSequence,long)> -> _NONE_
<java.lang.NoSuchMethodError: void <init>()> -> _NONE_
<android.view.MotionEvent: int getActionMasked()> -> _SOURCE_
<org.apache.http.message.BasicLineParser: boolean hasProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> -> _NONE_
<android.os.Handler: void dump(android.util.Printer,java.lang.String)> -> _NONE_
<android.app.Activity: android.database.Cursor managedQuery(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SOURCE_
<java.lang.NoSuchMethodError: void <init>(java.lang.String)> -> _NONE_
<java.lang.Package: java.lang.String getImplementationTitle()> -> _SOURCE_
<android.graphics.Region$Op: android.graphics.Region$Op[] values()> -> _NONE_
<android.accessibilityservice.AccessibilityServiceInfo: int getCapabilities()> -> _SOURCE_
<android.database.SQLException: void <init>()> -> _NONE_
<android.graphics.drawable.Drawable: void unscheduleSelf(java.lang.Runnable)> -> _NONE_
<android.app.Activity: void startActivityFromChild(android.app.Activity,android.content.Intent,int)> -> _SINK_ 
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap,int,int,int,int)> -> _SINK_ 
<android.bluetooth.BluetoothGattCallback: void onCharacteristicWrite(android.bluetooth.BluetoothGatt,android.bluetooth.BluetoothGattCharacteristic,int)> -> _NONE_
<java.nio.charset.Charset: java.lang.String toString()> -> _NONE_
<java.lang.Integer: int reverse(int)> -> _SINK_ 
<android.graphics.Bitmap: android.graphics.Bitmap extractAlpha(android.graphics.Paint,int[])> -> _NONE_
<android.content.ContentValues: java.lang.Byte getAsByte(java.lang.String)> -> _SOURCE_
<android.app.Activity: void setFeatureDrawable(int,android.graphics.drawable.Drawable)> -> _SINK_ 
<android.app.Activity: void onTrimMemory(int)> -> _NONE_
<android.app.Fragment: java.lang.String getString(int)> -> _SOURCE_
<android.content.ContentValues: java.lang.Short getAsShort(java.lang.String)> -> _SOURCE_
<android.view.View: java.util.ArrayList getFocusables(int)> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: void beginTransaction()> -> _NONE_
<android.app.Dialog: boolean requestWindowFeature(int)> -> _NONE_
<android.widget.AbsListView: int getRightPaddingOffset()> -> _SOURCE_
<java.util.Date: java.lang.String toLocaleString()> -> _NONE_
<java.util.AbstractList: void <init>()> -> _NONE_
<android.os.Bundle: boolean hasFileDescriptors()> -> _NONE_
<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)> -> _NONE_
<java.nio.charset.CharsetDecoder: java.nio.charset.CoderResult flush(java.nio.CharBuffer)> -> _SOURCE_
<android.graphics.Path: void addPath(android.graphics.Path)> -> _NONE_
<android.graphics.Paint: android.graphics.ColorFilter getColorFilter()> -> _SOURCE_
<android.content.res.AssetManager: android.content.res.XmlResourceParser openXmlResourceParser(int,java.lang.String)> -> _SINK_ 
<java.math.BigInteger: void <init>(java.lang.String,int)> -> _NONE_
<android.view.animation.Animation: int getRepeatMode()> -> _SOURCE_
<android.app.Notification$Builder: android.app.Notification build()> -> _NONE_
<android.view.accessibility.AccessibilityNodeInfo: void <init>()> -> _NONE_
<java.lang.Byte: java.lang.String toString(byte)> -> _SINK_ 
<java.util.Date: int getMonth()> -> _SOURCE_
<android.os.Parcel: java.io.Serializable readSerializable()> -> _NONE_
<java.net.SocketImpl: java.net.InetAddress getInetAddress()> -> _SOURCE_
<android.view.Window: void addFlags(int)> -> _NONE_
<android.widget.AdapterView: int getPositionForView(android.view.View)> -> _SOURCE_
<android.widget.TextView: void setTextColor(android.content.res.ColorStateList)> -> _SINK_ 
<android.app.PendingIntent: java.lang.String getTargetPackage()> -> _SOURCE_
<android.widget.AdapterView: void setOnItemLongClickListener(android.widget.AdapterView$OnItemLongClickListener)> -> _NONE_
<android.widget.ListView: void onInitializeAccessibilityNodeInfoForItem(android.view.View,int,android.view.accessibility.AccessibilityNodeInfo)> -> _NONE_
<android.graphics.Paint: void setARGB(int,int,int,int)> -> _SINK_ 
<android.content.SyncRequest: void <clinit>()> -> _NONE_
<java.lang.Character: boolean isLetterOrDigit(char)> -> _NONE_
<android.view.View: boolean isSelected()> -> _NONE_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,short[])> -> _NONE_
<android.app.Fragment: android.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle)> -> _NONE_
<android.print.PageRange: int hashCode()> -> _SINK_ 
<android.content.OperationApplicationException: void <init>()> -> _NONE_
<android.content.OperationApplicationException: void <init>(java.lang.String)> -> _NONE_
<android.os.Looper: void loop()> -> _NONE_
<android.app.Notification$Builder: void <init>(android.content.Context)> -> _NONE_
<android.app.Notification: java.lang.String toString()> -> _NONE_
<java.net.DatagramPacket: void setSocketAddress(java.net.SocketAddress)> -> _SINK_ 
<android.view.animation.Animation: void cancel()> -> _NONE_
<android.location.LocationManager: void requestLocationUpdates(long,float,android.location.Criteria,android.app.PendingIntent)> -> _NONE_
<android.animation.Keyframe: void <init>()> -> _NONE_
<java.lang.Integer: int compare(int,int)> -> _SINK_ 
<org.apache.http.util.ByteArrayBuffer: void append(org.apache.http.util.CharArrayBuffer,int,int)> -> _NONE_
<android.app.ActivityManager: void moveTaskToFront(int,int,android.os.Bundle)> -> _NONE_
<android.view.animation.Animation: boolean getFillAfter()> -> _SOURCE_
<android.graphics.RectF: void inset(float,float)> -> _NONE_
<android.app.Activity: void setFeatureDrawableResource(int,int)> -> _SINK_ 
<android.view.View: void invalidateDrawable(android.graphics.drawable.Drawable)> -> _NONE_
<java.io.FileInputStream: int read()> -> _SINK_ 
<java.lang.Character: int getNumericValue(char)> -> _SOURCE_
<android.bluetooth.BluetoothSocket: void connect()> -> _NONE_
<android.content.ContentProviderClient: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> -> _SINK_ 
<java.lang.Integer: java.lang.Integer getInteger(java.lang.String,int)> -> _SOURCE_
<java.lang.Short: java.lang.Short valueOf(short)> -> _SINK_ 
<android.nfc.tech.BasicTagTechnology: void <init>()> -> _NONE_
<android.app.Activity: java.lang.String getLocalClassName()> -> _SOURCE_
<java.lang.Short: void <init>(short)> -> _NONE_
<android.view.KeyCharacterMap: char getMatch(int,char[],int)> -> _SOURCE_
<android.widget.TextView: void setHint(java.lang.CharSequence)> -> _SINK_ 
<java.nio.charset.Charset: int compareTo(java.nio.charset.Charset)> -> _NONE_
<android.bluetooth.BluetoothGatt: boolean beginReliableWrite()> -> _NONE_
<android.widget.ListView: android.graphics.drawable.Drawable getOverscrollFooter()> -> _SOURCE_
<java.math.BigInteger: void <init>(int,int,java.util.Random)> -> _NONE_
<android.telephony.CellInfo: void <clinit>()> -> _NONE_
<java.util.AbstractList: void add(int,java.lang.Object)> -> _NONE_
<android.view.inputmethod.CompletionInfo: java.lang.CharSequence getText()> -> _SOURCE_
<android.view.Window: android.view.Window getContainer()> -> _SOURCE_
<android.view.KeyEvent: void <init>(long,long,int,int,int,int,int,int,int)> -> _NONE_
<android.accounts.Account: void <init>(android.os.Parcel)> -> _NONE_
<android.graphics.Matrix: boolean postSkew(float,float)> -> _NONE_
<java.net.Socket: void <init>()> -> _NONE_
<android.os.Bundle: void putLongArray(java.lang.String,long[])> -> _NONE_
<android.bluetooth.BluetoothGatt: void <init>()> -> _NONE_
<android.os.Parcel: int dataCapacity()> -> _SINK_ 
<java.nio.channels.FileLock: long size()> -> _NONE_
<android.util.SparseArray: java.lang.Object valueAt(int)> -> _NONE_
<java.security.cert.CertPath: java.lang.String toString()> -> _NONE_
<android.view.InputDevice: android.os.Vibrator getVibrator()> -> _SOURCE_
<android.telephony.TelephonyManager: int getDataActivity()> -> _SOURCE_
<android.nfc.tech.IsoDep: android.nfc.tech.IsoDep get(android.nfc.Tag)> -> _SOURCE_
<android.view.KeyEvent: long getDownTime()> -> _SOURCE_
<android.app.ActivityManager$RunningAppProcessInfo: void <clinit>()> -> _NONE_
<java.net.DatagramSocketImpl: void connect(java.net.InetAddress,int)> -> _NONE_
<android.os.ParcelFileDescriptor: int detachFd()> -> _SINK_ 
<android.view.View: boolean onFilterTouchEventForSecurity(android.view.MotionEvent)> -> _NONE_
<android.net.http.SslCertificate$DName: java.lang.String getDName()> -> _SOURCE_
<android.text.style.ImageSpan: void <init>(android.graphics.drawable.Drawable)> -> _NONE_
<java.lang.reflect.Field: void setBoolean(java.lang.Object,boolean)> -> _SINK_ 
<android.view.KeyCharacterMap: boolean deviceHasKey(int)> -> _NONE_
<android.view.View: void onAnimationEnd()> -> _NONE_
<java.io.PrintWriter: void <init>(java.io.OutputStream,boolean)> -> _NONE_
<android.app.Fragment: void startActivityForResult(android.content.Intent,int)> -> _SINK_ 
<android.app.Dialog: boolean isShowing()> -> _NONE_
<java.nio.charset.CharsetEncoder: void implOnUnmappableCharacter(java.nio.charset.CodingErrorAction)> -> _NONE_
<android.widget.ListView: void setCacheColorHint(int)> -> _SINK_ 
<java.math.BigInteger: java.math.BigInteger and(java.math.BigInteger)> -> _NONE_
<android.graphics.Bitmap: android.graphics.Bitmap copy(android.graphics.Bitmap$Config,boolean)> -> _NONE_
<java.lang.Exception: void <init>(java.lang.Throwable)> -> _NONE_
<android.database.sqlite.SQLiteDatabase: boolean deleteDatabase(java.io.File)> -> _SINK_ 
<java.io.InputStream: int read(byte[],int,int)> -> _NONE_
<android.widget.TextView: int getLineBounds(int,android.graphics.Rect)> -> _SOURCE_
<java.io.PrintStream: void println(int)> -> _NONE_
<java.lang.StringBuffer: java.lang.CharSequence subSequence(int,int)> -> _NONE_
<android.content.pm.ComponentInfo: void <init>(android.content.pm.ComponentInfo)> -> _NONE_
<android.accessibilityservice.AccessibilityServiceInfo: java.lang.String getSettingsActivityName()> -> _SOURCE_
<java.nio.charset.CharsetDecoder: java.lang.String replacement()> -> _NONE_
<android.database.SQLException: void <init>(java.lang.String)> -> _NONE_
<java.net.Socket: void setSendBufferSize(int)> -> _SINK_ 
<android.view.View: int getDefaultSize(int,int)> -> _SOURCE_
<java.lang.String: void <init>(byte[],int,int,int)> -> _NONE_
<java.lang.AssertionError: void <init>(int)> -> _NONE_
<java.lang.Class: java.security.ProtectionDomain getProtectionDomain()> -> _SOURCE_
<java.lang.Package: java.lang.Package getPackage(java.lang.String)> -> _SOURCE_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)> -> _NONE_
<android.content.pm.Signature: byte[] toByteArray()> -> _NONE_
<java.io.PrintWriter: void println(boolean)> -> _NONE_
<android.telephony.CellSignalStrengthCdma: int getDbm()> -> _SOURCE_
<android.widget.TextView: int getAutoLinkMask()> -> _SOURCE_
<android.view.Window: void setLogo(int)> -> _NONE_
<android.content.pm.ConfigurationInfo: java.lang.String getGlEsVersion()> -> _SOURCE_
<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)> -> _NONE_
<android.content.res.AssetManager: java.io.InputStream open(java.lang.String)> -> _SINK_ 
<android.net.sip.SipSession: int getState()> -> _SOURCE_
<android.graphics.Rect: void union(android.graphics.Rect)> -> _NONE_
<java.nio.CharBuffer: boolean equals(java.lang.Object)> -> _NONE_
<android.graphics.Matrix: void setRotate(float)> -> _SINK_ 
<java.lang.Long: int numberOfLeadingZeros(long)> -> _SINK_ 
<android.app.Activity: void onActivityResult(int,int,android.content.Intent)> -> _SINK_ 
<android.print.PrintDocumentInfo: void <init>()> -> _NONE_
<android.view.MenuInflater: void <init>(android.content.Context)> -> _NONE_
<android.graphics.Bitmap: void setHeight(int)> -> _SINK_ 
<java.lang.Character: int digit(char,int)> -> _SINK_ 
<java.lang.Long: double doubleValue()> -> _NONE_
<android.widget.TextView: android.content.res.ColorStateList getTextColors()> -> _SOURCE_
<java.security.CodeSigner: void <init>(java.security.cert.CertPath,java.security.Timestamp)> -> _NONE_
<android.graphics.Canvas: void drawBitmap(int[],int,int,float,float,int,int,boolean,android.graphics.Paint)> -> _NONE_
<android.text.Layout: void draw(android.graphics.Canvas,android.graphics.Path,android.graphics.Paint,int)> -> _NONE_
<java.net.Socket: void shutdownInput()> -> _NONE_
<java.math.BigInteger: java.math.BigInteger negate()> -> _NONE_
<android.content.ContextWrapper: java.lang.String getPackageName()> -> _SOURCE_
<android.app.Dialog: void onDetachedFromWindow()> -> _NONE_
<java.util.Date: java.lang.String toGMTString()> -> _NONE_
<android.view.View: void invalidate(android.graphics.Rect)> -> _NONE_
<android.graphics.drawable.Drawable: void scheduleSelf(java.lang.Runnable,long)> -> _NONE_
<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()> -> _SOURCE_
<android.app.Notification$Builder: android.app.Notification$Builder setLargeIcon(android.graphics.Bitmap)> -> _SINK_ 
<android.content.pm.PackageInfo: void <clinit>()> -> _NONE_
<java.util.Date: boolean equals(java.lang.Object)> -> _NONE_
<android.content.res.TypedArray: int getInt(int,int)> -> _SOURCE_
<java.util.BitSet: boolean intersects(java.util.BitSet)> -> _NONE_
<java.nio.IntBuffer: java.nio.IntBuffer put(java.nio.IntBuffer)> -> _NONE_
<android.os.Bundle: android.util.SparseArray getSparseParcelableArray(java.lang.String)> -> _SOURCE_
<java.lang.Long: java.lang.String toHexString(long)> -> _SINK_ 
<android.content.ClipData$Item: void <init>(java.lang.CharSequence)> -> _NONE_
<android.provider.Settings$System: void <init>()> -> _NONE_
<java.net.URLStreamHandler: void <init>()> -> _NONE_
<android.app.backup.BackupDataInputStream: void <init>()> -> _NONE_
<android.widget.TextView: int getMaxLines()> -> _SOURCE_
<android.hardware.Camera: void setPreviewCallbackWithBuffer(android.hardware.Camera$PreviewCallback)> -> _SINK_ 
<android.view.MotionEvent: int getSource()> -> _SOURCE_
<java.lang.Thread: void setName(java.lang.String)> -> _SINK_ 
<android.app.ActionBar: void setStackedBackgroundDrawable(android.graphics.drawable.Drawable)> -> _NONE_
<android.animation.ValueAnimator: boolean isRunning()> -> _NONE_
<android.webkit.WebView: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)> -> _NONE_
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()> -> _SOURCE_
<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder reset()> -> _NONE_
<android.view.View: boolean requestRectangleOnScreen(android.graphics.Rect,boolean)> -> _NONE_
<android.os.ParcelUuid: java.util.UUID getUuid()> -> _SOURCE_
<android.view.MotionEvent: int getDeviceId()> -> _SOURCE_
<android.app.Dialog: void setCancelMessage(android.os.Message)> -> _SINK_ 
<android.graphics.Canvas: void drawLine(float,float,float,float,android.graphics.Paint)> -> _NONE_
<android.view.View: void setRight(int)> -> _SINK_ 
<java.io.File: boolean setReadable(boolean,boolean)> -> _SINK_ 
<android.telephony.SignalStrength: int getEvdoSnr()> -> _SOURCE_
<java.lang.Thread: boolean isInterrupted()> -> _NONE_
<android.app.backup.BackupAgent: void <init>()> -> _NONE_
<android.content.ContentResolver: void cancelSync(android.net.Uri)> -> _NONE_
<android.print.PrintAttributes: boolean equals(java.lang.Object)> -> _NONE_
<android.widget.TextView: int getTextColor(android.content.Context,android.content.res.TypedArray,int)> -> _SOURCE_
<android.nfc.NfcAdapter: void setOnNdefPushCompleteCallback(android.nfc.NfcAdapter$OnNdefPushCompleteCallback,android.app.Activity,android.app.Activity[])> -> _SINK_ 
<android.print.PageRange: int getEnd()> -> _SOURCE_
<android.bluetooth.BluetoothDevice: android.os.ParcelUuid[] getUuids()> -> _SOURCE_
<android.content.IntentFilter: int countDataPaths()> -> _SINK_ 
<android.graphics.RectF: boolean contains(android.graphics.RectF)> -> _NONE_
<android.bluetooth.BluetoothGatt: boolean discoverServices()> -> _NONE_
<android.graphics.Canvas: boolean clipPath(android.graphics.Path)> -> _NONE_
<android.view.WindowManager$LayoutParams: boolean mayUseInputMethod(int)> -> _NONE_
<android.provider.Settings$System: void getConfiguration(android.content.ContentResolver,android.content.res.Configuration)> -> _SOURCE_
<java.security.ProtectionDomain: java.lang.ClassLoader getClassLoader()> -> _SOURCE_
<java.lang.Short: int compareTo(java.lang.Object)> -> _SINK_ 
<android.os.Bundle: void <init>(int)> -> _NONE_
<android.util.AndroidException: void <init>(java.lang.String,java.lang.Throwable)> -> _NONE_
<android.bluetooth.BluetoothClass: void <init>()> -> _NONE_
<android.nfc.tech.BasicTagTechnology: boolean isConnected()> -> _NONE_
<android.view.KeyEvent: int getRepeatCount()> -> _SOURCE_
<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)> -> _NONE_
<android.util.TypedValue: java.lang.String toString()> -> _NONE_
<android.widget.Scroller: int getCurrX()> -> _SOURCE_
<android.widget.TextView: void onStartTemporaryDetach()> -> _NONE_
<android.content.Loader: boolean isStarted()> -> _NONE_
<android.graphics.Canvas: void drawText(char[],int,int,float,float,android.graphics.Paint)> -> _NONE_
<android.os.Message: void setTarget(android.os.Handler)> -> _SINK_ 
<android.content.Intent: android.content.Intent putExtra(java.lang.String,char)> -> _NONE_
<android.hardware.Camera$Parameters: void setAutoExposureLock(boolean)> -> _SINK_ 
<android.content.ClipDescription: int describeContents()> -> _SINK_ 
<android.app.ActivityManager: int getLargeMemoryClass()> -> _SOURCE_
<android.webkit.WebView: void setMapTrackballToArrowKeys(boolean)> -> _SINK_ 
<android.provider.Settings$System: float getFloat(android.content.ContentResolver,java.lang.String,float)> -> _SOURCE_
<android.telephony.CellInfoCdma: int describeContents()> -> _SINK_ 
<android.widget.RemoteViews: java.lang.String getPackage()> -> _SOURCE_
<android.graphics.Rect: java.lang.String toShortString()> -> _NONE_
<android.os.Parcel: void writeSparseBooleanArray(android.util.SparseBooleanArray)> -> _NONE_
<android.webkit.WebSettings$ZoomDensity: android.webkit.WebSettings$ZoomDensity valueOf(java.lang.String)> -> _NONE_
<android.view.ViewGroup: void setChildrenDrawnWithCacheEnabled(boolean)> -> _NONE_
<android.view.inputmethod.ExtractedText: void <init>()> -> _NONE_
<java.lang.Thread: java.util.Map getAllStackTraces()> -> _SOURCE_
<android.webkit.WebSettings: boolean getAllowContentAccess()> -> _SOURCE_
<android.view.animation.Animation: void applyTransformation(float,android.view.animation.Transformation)> -> _NONE_
<java.nio.channels.DatagramChannel: long read(java.nio.ByteBuffer[])> -> _SOURCE_
<android.widget.RemoteViews: void setOnClickFillInIntent(int,android.content.Intent)> -> _SINK_ 
<android.graphics.drawable.Drawable: void clearColorFilter()> -> _NONE_
<java.net.URLConnection: void setConnectTimeout(int)> -> _NONE_
<android.nfc.NdefRecord: android.nfc.NdefRecord createMime(java.lang.String,byte[])> -> _SINK_ 
<android.widget.TextView: android.text.TextUtils$TruncateAt getEllipsize()> -> _SOURCE_
<android.os.PowerManager: boolean isScreenOn()> -> _NONE_
<android.net.sip.SipAudioCall: void setSpeakerMode(boolean)> -> _SINK_ 
<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)> -> _NONE_
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAccountsByTypeAndFeatures(java.lang.String,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)> android.permission.GET_ACCOUNTS android.permission.MANAGE_ACCOUNTS -> _SOURCE_
<java.lang.Class: void <init>()> -> _NONE_
<android.database.sqlite.SQLiteProgram: void bindBlob(int,byte[])> -> _NONE_
<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)> -> _NONE_
<android.view.View: void setOnHoverListener(android.view.View$OnHoverListener)> -> _SINK_ 
<android.bluetooth.BluetoothGatt: void close()> -> _NONE_
<android.webkit.WebSettings: boolean getLoadWithOverviewMode()> -> _SOURCE_
<java.nio.channels.spi.AbstractSelectableChannel: boolean isBlocking()> -> _NONE_
<android.content.res.Resources: android.graphics.drawable.Drawable getDrawable(int)> -> _SOURCE_
<java.lang.reflect.Field: java.lang.annotation.Annotation getAnnotation(java.lang.Class)> -> _SOURCE_
<android.webkit.WebSettings: void setLightTouchEnabled(boolean)> -> _NONE_
<android.app.Application: void registerComponentCallbacks(android.content.ComponentCallbacks)> -> _NONE_
<android.view.View: boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> -> _NONE_
<java.net.ServerSocket: void <init>()> -> _NONE_
<android.os.Bundle: boolean containsKey(java.lang.String)> -> _NONE_
<android.os.Parcel: void writeStrongBinder(android.os.IBinder)> -> _NONE_
<java.security.InvalidKeyException: void <init>(java.lang.String)> -> _NONE_
<android.print.PrintAttributes$Margins: int getLeftMils()> -> _SOURCE_
<android.accounts.AuthenticatorDescription: java.lang.String toString()> -> _NONE_
<android.widget.TextView: void setText(int)> -> _SINK_ 
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator scaleXBy(float)> -> _NONE_
<android.graphics.Rect: boolean intersects(android.graphics.Rect,android.graphics.Rect)> -> _NONE_
<android.net.sip.SipAudioCall: void endCall()> -> _NONE_
<java.net.Proxy$Type: java.net.Proxy$Type[] values()> -> _NONE_
<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothSocket createInsecureRfcommSocketToServiceRecord(java.util.UUID)> -> _NONE_
<android.app.Activity: android.content.ComponentName getCallingActivity()> -> _SOURCE_
<android.content.IntentFilter: boolean hasDataAuthority(android.net.Uri)> -> _NONE_
<android.graphics.DrawFilter: void finalize()> -> _NONE_
<java.io.PrintWriter: java.io.PrintWriter format(java.util.Locale,java.lang.String,java.lang.Object[])> -> _NONE_
<android.view.Window: android.content.Context getContext()> -> _SOURCE_
<android.graphics.Canvas: void drawText(java.lang.CharSequence,int,int,float,float,android.graphics.Paint)> -> _NONE_
<android.webkit.WebView: void loadUrl(java.lang.String,java.util.Map)> -> _NONE_
<android.content.ClipDescription: java.lang.String toString()> -> _NONE_
<java.lang.IllegalArgumentException: void <init>(java.lang.String)> -> _NONE_
<android.view.animation.Animation: void setInterpolator(android.view.animation.Interpolator)> -> _NONE_
<android.view.View: boolean performAccessibilityAction(int,android.os.Bundle)> -> _NONE_
<android.graphics.Typeface: int hashCode()> -> _SINK_ 
<java.nio.channels.spi.AbstractSelectableChannel: void <init>(java.nio.channels.spi.SelectorProvider)> -> _NONE_
<android.app.Dialog: boolean onKeyShortcut(int,android.view.KeyEvent)> -> _NONE_
<android.view.animation.Animation: void setFillAfter(boolean)> -> _NONE_
<android.content.Intent: void <init>(java.lang.String)> -> _NONE_
<java.net.URLConnection: java.lang.String getContentEncoding()> -> _SOURCE_
<android.webkit.WebView: void <init>(android.content.Context,android.util.AttributeSet,int)> android.permission.INTERNET -> _NONE_
<android.view.ViewPropertyAnimator: void <init>()> -> _NONE_
<java.net.URI: java.net.URL toURL()> -> _NONE_
<java.io.PrintStream: void setError()> -> _SINK_ 
<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo: android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo obtain(int,int,int,int,boolean)> -> _SINK_ 
<java.net.URLConnection: java.io.InputStream getInputStream()> -> _SOURCE_
<android.content.Loader: boolean isReset()> -> _NONE_
<android.media.MediaPlayer: void addTimedTextSource(java.io.FileDescriptor,java.lang.String)> -> _NONE_
<android.app.Dialog: void onActionModeFinished(android.view.ActionMode)> -> _NONE_
<android.os.Parcel: void writeStringArray(java.lang.String[])> -> _NONE_
<android.hardware.Camera: void getCameraInfo(int,android.hardware.Camera$CameraInfo)> -> _SOURCE_
<java.io.FileOutputStream: java.io.FileDescriptor getFD()> -> _SOURCE_
<android.graphics.Paint: int breakText(char[],int,int,float,float[])> -> _SINK_ 
<android.os.Bundle: boolean[] getBooleanArray(java.lang.String)> -> _SOURCE_
<android.app.Notification$Style: void internalSetBigContentTitle(java.lang.CharSequence)> -> _NONE_
<java.io.ObjectStreamException: void <init>()> -> _NONE_
<android.net.sip.SipManager: void <init>()> -> _NONE_
<android.os.PowerManager$WakeLock: void setWorkSource(android.os.WorkSource)> -> _SINK_ 
<java.util.Date: int getHours()> -> _SOURCE_
<java.util.BitSet: java.util.BitSet valueOf(byte[])> -> _NONE_
<android.accounts.AccountManager: android.accounts.AccountManagerFuture removeAccount(android.accounts.Account,android.accounts.AccountManagerCallback,android.os.Handler)> -> _SOURCE_
<android.text.TextPaint: void <init>()> -> _NONE_
<android.telephony.gsm.SmsManager: android.telephony.gsm.SmsManager getDefault()> -> _SOURCE_
<java.lang.String: void <init>(byte[],int)> -> _NONE_
<java.lang.SecurityException: void <init>(java.lang.String)> -> _NONE_
<android.net.sip.SipManager: android.net.sip.SipAudioCall makeAudioCall(java.lang.String,java.lang.String,android.net.sip.SipAudioCall$Listener,int)> -> _SOURCE_
<android.graphics.Rasterizer: void finalize()> -> _NONE_
<java.net.DatagramSocket: void disconnect()> -> _NONE_
<android.view.accessibility.AccessibilityEvent: int getContentChangeTypes()> -> _SOURCE_
<android.accounts.OperationCanceledException: void <init>(java.lang.String,java.lang.Throwable)> -> _NONE_
<android.widget.ExpandableListView: void setChildDivider(android.graphics.drawable.Drawable)> -> _SINK_ 
<android.view.KeyEvent: int getAction()> -> _SOURCE_
<org.apache.http.util.ByteArrayBuffer: int length()> -> _SINK_ 
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,char)> -> _NONE_
<android.provider.Browser: void sendString(android.content.Context,java.lang.String)> -> _SINK_ 
<android.view.accessibility.AccessibilityEvent: int getMovementGranularity()> -> _SOURCE_
<android.accounts.AuthenticatorDescription: int describeContents()> -> _SINK_ 
<android.app.TaskStackBuilder: void startActivities(android.os.Bundle)> -> _NONE_
<android.view.MotionEvent: void addBatch(long,android.view.MotionEvent$PointerCoords[],int)> -> _NONE_
<android.widget.TextView: void onEndBatchEdit()> -> _NONE_
<android.content.IntentFilter: boolean hasDataSchemeSpecificPart(java.lang.String)> -> _NONE_
<android.content.res.ColorStateList: void <clinit>()> -> _NONE_
<android.widget.AbsListView: void onTouchModeChanged(boolean)> -> _NONE_
<android.content.ContentResolver: int delete(android.net.Uri,java.lang.String,java.lang.String[])> -> _NONE_
<java.lang.InstantiationError: void <init>()> -> _NONE_
<android.provider.Settings$System: boolean putFloat(android.content.ContentResolver,java.lang.String,float)> -> _NONE_
<java.nio.channels.DatagramChannel: java.nio.channels.DatagramChannel open()> -> _NONE_
<android.webkit.WebView: void reload()> -> _NONE_
<android.hardware.Camera$Size: int hashCode()> -> _SINK_ 
<android.view.accessibility.AccessibilityEvent: void setPackageName(java.lang.CharSequence)> -> _SINK_ 
<android.print.PrintDocumentAdapter$WriteResultCallback: void <init>()> -> _NONE_
<android.widget.RemoteViews: void setDouble(int,java.lang.String,double)> -> _SINK_ 
<org.apache.http.message.BasicLineParser: void <clinit>()> -> _NONE_
<android.view.View: boolean dispatchUnhandledMove(android.view.View,int)> -> _NONE_
<android.net.Uri$Builder: android.net.Uri$Builder encodedQuery(java.lang.String)> -> _NONE_
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo obtain(android.view.View,int)> -> _NONE_
<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)> -> _NONE_
<java.lang.Long: java.lang.Long getLong(java.lang.String)> -> _SOURCE_
<android.util.Property: void set(java.lang.Object,java.lang.Object)> -> _NONE_
<android.bluetooth.BluetoothSocket: boolean isConnected()> -> _NONE_
<android.app.Activity: void invalidateOptionsMenu()> -> _NONE_
<android.widget.TextView: android.content.res.ColorStateList getLinkTextColors()> -> _SOURCE_
<android.view.View: int resolveSize(int,int)> -> _SINK_ 
<android.bluetooth.BluetoothGattCallback: void onDescriptorWrite(android.bluetooth.BluetoothGatt,android.bluetooth.BluetoothGattDescriptor,int)> -> _NONE_
<android.net.sip.SipManager: android.net.sip.SipSession getSessionFor(android.content.Intent)> -> _SOURCE_
<android.location.Location: boolean isFromMockProvider()> -> _NONE_
<java.net.URL: void <init>(java.net.URL,java.lang.String)> -> _NONE_
<android.view.ViewGroup: void invalidateChild(android.view.View,android.graphics.Rect)> -> _NONE_
<android.widget.ListView: void setSelectionFromTop(int,int)> -> _SINK_ 
<java.util.Date: boolean before(java.util.Date)> -> _NONE_
<android.view.View: boolean isTextDirectionResolved()> -> _NONE_
<android.database.sqlite.SQLiteDatabase: boolean yieldIfContended()> -> _NONE_
<java.lang.annotation.RetentionPolicy: java.lang.annotation.RetentionPolicy valueOf(java.lang.String)> -> _NONE_
<android.view.ViewGroup: void endViewTransition(android.view.View)> -> _NONE_
<android.view.View: android.view.ActionMode startActionMode(android.view.ActionMode$Callback)> -> _NONE_
<android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityEvent obtain(int)> -> _SINK_ 
<android.webkit.WebChromeClient: android.graphics.Bitmap getDefaultVideoPoster()> -> _SOURCE_
<java.lang.StringBuilder: void <init>(int)> -> _NONE_
<android.content.res.Resources: android.content.res.TypedArray obtainTypedArray(int)> -> _NONE_
<android.webkit.WebViewClient: void onUnhandledKeyEvent(android.webkit.WebView,android.view.KeyEvent)> -> _NONE_
<android.graphics.Point: void <init>()> -> _NONE_
<android.view.Window: boolean isActive()> -> _NONE_
<android.content.pm.PackageInfo: int describeContents()> -> _SINK_ 
<java.lang.Float: int compare(float,float)> -> _SINK_ 
<android.content.Intent: android.os.Parcelable[] getParcelableArrayExtra(java.lang.String)> -> _SOURCE_
<android.content.ContextWrapper: void sendOrderedBroadcast(android.content.Intent,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> -> _SINK_ 
<android.hardware.Camera$Parameters: java.util.List getSupportedPreviewSizes()> -> _SOURCE_
<java.io.PrintStream: java.io.PrintStream append(java.lang.CharSequence)> -> _NONE_
<java.lang.String: int offsetByCodePoints(int,int)> -> _SINK_ 
<android.graphics.Paint: int breakText(java.lang.CharSequence,int,int,boolean,float,float[])> -> _SINK_ 
<android.telephony.CellSignalStrengthCdma: int getEvdoDbm()> -> _SOURCE_
<android.view.accessibility.AccessibilityRecord: android.view.accessibility.AccessibilityRecord obtain(android.view.accessibility.AccessibilityRecord)> -> _NONE_
<java.net.DatagramSocket: void setReceiveBufferSize(int)> -> _SINK_ 
<android.widget.TextView: int getHighlightColor()> -> _SOURCE_
<android.provider.Telephony$Sms: java.lang.String getDefaultSmsPackage(android.content.Context)> -> _SOURCE_
<android.provider.CalendarContract$Instances: void <clinit>()> -> _NONE_
<android.content.ContentProvider: android.content.pm.PathPermission[] getPathPermissions()> -> _SOURCE_
<java.lang.AbstractMethodError: void <init>(java.lang.String)> -> _NONE_
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,float)> -> _NONE_
<android.webkit.WebView: boolean pageDown(boolean)> -> _NONE_
<java.util.AbstractList: java.lang.Object remove(int)> -> _NONE_
<android.graphics.Matrix: boolean rectStaysRect()> -> _NONE_
<java.lang.Integer: double doubleValue()> -> _NONE_
<java.net.URL: boolean equals(java.lang.Object)> -> _NONE_
<java.net.Socket: int getPort()> -> _SOURCE_
<android.location.LocationManager: android.location.LocationProvider getProvider(java.lang.String)> -> _SOURCE_
<android.webkit.WebSettings: int getTextZoom()> -> _SOURCE_
<android.content.res.Resources: int getColor(int)> -> _SOURCE_
<android.bluetooth.BluetoothDevice: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<android.os.Handler: android.os.Looper getLooper()> -> _SOURCE_
<android.view.ViewGroup: void removeAllViews()> -> _NONE_
<java.lang.Character: int getNumericValue(int)> -> _SOURCE_
<android.content.Intent: android.content.pm.ActivityInfo resolveActivityInfo(android.content.pm.PackageManager,int)> -> _NONE_
<java.lang.Package: java.lang.String toString()> -> _NONE_
<android.print.PrintDocumentInfo: long getDataSize()> -> _SOURCE_
<java.io.PrintWriter: void write(char[])> -> _NONE_
<android.content.Intent: byte getByteExtra(java.lang.String,byte)> -> _SOURCE_
<android.view.accessibility.AccessibilityEvent: void initFromParcel(android.os.Parcel)> -> _NONE_
<java.lang.Float: java.lang.String toString()> -> _NONE_
<java.net.Socket: int getTrafficClass()> -> _SOURCE_
<android.content.Intent: android.content.Intent parseIntent(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)> -> _NONE_
<android.app.ExpandableListActivity: void onRestoreInstanceState(android.os.Bundle)> -> _NONE_
<android.app.Dialog: void invalidateOptionsMenu()> -> _NONE_
<java.lang.StringBuilder: void setCharAt(int,char)> -> _SINK_ 
<android.net.wifi.SupplicantState: void <clinit>()> -> _NONE_
<java.lang.Double: double doubleValue()> -> _NONE_
<android.content.IntentFilter: void addDataPath(java.lang.String,int)> -> _NONE_
<android.graphics.RectF: boolean contains(float,float)> -> _NONE_
<java.io.PrintStream: void <init>(java.io.File,java.lang.String)> -> _NONE_
<android.content.ContentResolver: boolean isSyncPending(android.accounts.Account,java.lang.String)> -> _NONE_
<android.app.Activity: boolean dispatchKeyShortcutEvent(android.view.KeyEvent)> -> _NONE_
<java.nio.Buffer: java.nio.Buffer limit(int)> -> _SOURCE_
<android.content.ContextWrapper: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> -> _SINK_ 
<android.graphics.Paint: void clearShadowLayer()> -> _NONE_
<android.view.ViewGroup$LayoutParams: void setBaseAttributes(android.content.res.TypedArray,int,int)> -> _SINK_ 
<android.telephony.PhoneNumberFormattingTextWatcher: void beforeTextChanged(java.lang.CharSequence,int,int,int)> android.permission.STOP_APP_SWITCHES -> _NONE_
<android.content.Loader: void startLoading()> -> _NONE_
<java.nio.charset.CharsetDecoder: void <init>(java.nio.charset.Charset,float,float)> -> _NONE_
<android.content.ContextWrapper: void startActivity(android.content.Intent)> -> _SINK_ 
<android.os.Bundle: java.util.Set keySet()> -> _NONE_
<java.net.DatagramSocket: java.nio.channels.DatagramChannel getChannel()> -> _SOURCE_
<android.app.Dialog: void <init>(android.content.Context)> -> _NONE_
<android.view.accessibility.AccessibilityRecord: void setAddedCount(int)> -> _SINK_ 
<android.view.ViewGroup: android.view.View getChildAt(int)> -> _SOURCE_
<android.content.pm.ProviderInfo: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<java.io.PrintWriter: void setError()> -> _SINK_ 
<android.widget.AbsListView: boolean onInterceptHoverEvent(android.view.MotionEvent)> -> _NONE_
<android.content.Loader: boolean isAbandoned()> -> _NONE_
<java.math.BigInteger: double doubleValue()> -> _NONE_
<java.lang.Short: long longValue()> -> _NONE_
<android.view.MotionEvent: float getHistoricalY(int,int)> -> _SOURCE_
<android.widget.TextView: boolean performLongClick()> -> _NONE_
<android.os.Bundle: int getInt(java.lang.String,int)> -> _SOURCE_
<android.widget.TextView: void setMaxWidth(int)> -> _SINK_ 
<java.lang.IllegalStateException: void <init>(java.lang.Throwable)> -> _NONE_
<java.lang.Short: boolean equals(java.lang.Object)> -> _NONE_
<java.lang.Thread: int countStackFrames()> -> _SINK_ 
<android.app.PendingIntent: boolean equals(java.lang.Object)> -> _NONE_
<android.view.View: boolean canScrollHorizontally(int)> -> _NONE_
<java.lang.Package: java.lang.annotation.Annotation[] getAnnotations()> -> _SOURCE_
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor fromSocket(java.net.Socket)> -> _NONE_
<android.view.View: void setFitsSystemWindows(boolean)> -> _SINK_ 
<java.lang.String: java.lang.String valueOf(char[])> -> _SINK_ 
<android.os.Messenger: int describeContents()> -> _SINK_ 
<android.content.ContextWrapper: void startActivity(android.content.Intent,android.os.Bundle)> -> _SINK_ 
<android.graphics.BitmapFactory$Options: void requestCancelDecode()> -> _NONE_
<android.view.LayoutInflater: android.view.LayoutInflater$Factory getFactory()> -> _SOURCE_
<android.webkit.WebView: boolean requestChildRectangleOnScreen(android.view.View,android.graphics.Rect,boolean)> -> _NONE_
<android.view.View: int getPaddingStart()> -> _SOURCE_
<java.lang.StringBuilder: void trimToSize()> -> _NONE_
<android.graphics.Paint: android.graphics.Typeface setTypeface(android.graphics.Typeface)> -> _SINK_ 
<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder reset()> -> _NONE_
<android.content.BroadcastReceiver$PendingResult: android.os.Bundle getResultExtras(boolean)> -> _SOURCE_
<android.content.pm.ApplicationInfo: void <init>(android.content.pm.ApplicationInfo)> -> _NONE_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,byte[])> -> _NONE_
<android.view.View: void setOnGenericMotionListener(android.view.View$OnGenericMotionListener)> -> _SINK_ 
<android.net.wifi.WifiEnterpriseConfig: void <init>(android.net.wifi.WifiEnterpriseConfig)> -> _NONE_
<android.widget.ListView: void setAdapter(android.widget.Adapter)> -> _SINK_ 
<android.animation.LayoutTransition: void addChild(android.view.ViewGroup,android.view.View)> -> _NONE_
<android.graphics.Region: boolean quickReject(android.graphics.Rect)> -> _NONE_
<java.util.Locale: java.lang.String getDisplayVariant()> -> _SOURCE_
<android.graphics.SurfaceTexture: void updateTexImage()> -> _NONE_
<java.net.InetAddress: boolean isMulticastAddress()> -> _NONE_
<android.widget.ExpandableListView: void setSelectedGroup(int)> -> _SINK_ 
<android.os.Handler: java.lang.String getMessageName(android.os.Message)> -> _SOURCE_
<android.widget.RemoteViews: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<android.graphics.Canvas: void drawLines(float[],android.graphics.Paint)> -> _NONE_
<android.graphics.RectF: boolean equals(java.lang.Object)> -> _NONE_
<android.widget.AbsListView: int getTranscriptMode()> -> _SOURCE_
<android.graphics.Matrix: void setValues(float[])> -> _SINK_ 
<android.view.animation.LayoutAnimationController: float getDelay()> -> _SOURCE_
<android.net.sip.SipAudioCall: void continueCall(int)> -> _NONE_
<android.bluetooth.BluetoothGattService: android.bluetooth.BluetoothGattCharacteristic getCharacteristic(java.util.UUID)> -> _SOURCE_
<android.content.pm.PermissionInfo: void <clinit>()> -> _NONE_
<android.graphics.Matrix: boolean setConcat(android.graphics.Matrix,android.graphics.Matrix)> -> _SINK_ 
<java.nio.charset.CoderResult: boolean isUnderflow()> -> _NONE_
<java.lang.StringBuilder: java.lang.StringBuilder insert(int,boolean)> -> _NONE_
<android.graphics.Matrix$ScaleToFit: android.graphics.Matrix$ScaleToFit[] values()> -> _NONE_
<java.net.URLConnection: java.util.Map getHeaderFields()> -> _SOURCE_
<android.content.ContentProvider: android.net.Uri canonicalize(android.net.Uri)> -> _SOURCE_
<android.animation.PropertyValuesHolder: void setProperty(android.util.Property)> -> _SINK_ 
<java.net.URISyntaxException: void <init>(java.lang.String,java.lang.String)> -> _NONE_
<android.media.MediaPlayer: void setOnPreparedListener(android.media.MediaPlayer$OnPreparedListener)> -> _SINK_ 
<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()> -> _SOURCE_
<android.widget.ExpandableListView: void setIndicatorBounds(int,int)> -> _SINK_ 
<java.io.FileOutputStream: void <init>(java.io.FileDescriptor)> -> _NONE_
<android.app.backup.BackupAgentHelper: void <init>()> -> _NONE_
<android.view.ViewGroup: void requestDisallowInterceptTouchEvent(boolean)> -> _NONE_
<android.database.sqlite.SQLiteDatabase: void beginTransactionWithListener(android.database.sqlite.SQLiteTransactionListener)> -> _NONE_
<android.content.ContextWrapper: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int,android.os.Bundle)> -> _SINK_ 
<java.lang.ClassLoader: void resolveClass(java.lang.Class)> -> _NONE_
<android.widget.TextView: float getShadowRadius()> -> _SOURCE_
<android.graphics.Path: void moveTo(float,float)> -> _NONE_
<android.view.accessibility.AccessibilityNodeInfo: int getInputType()> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: int getVersion()> -> _SOURCE_
<java.security.KeyException: void <init>()> -> _NONE_
<android.content.ContextWrapper: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int)> -> _SINK_ 
<java.lang.Throwable: void printStackTrace(java.io.PrintStream)> -> _NONE_
<android.content.Intent: java.lang.String getType()> -> _SOURCE_
<java.lang.RuntimeException: void <init>(java.lang.String)> -> _NONE_
<android.os.Bundle: void putParcelableArrayList(java.lang.String,java.util.ArrayList)> -> _NONE_
<java.nio.IntBuffer: java.nio.IntBuffer allocate(int)> -> _NONE_
<android.util.DisplayMetrics: void setTo(android.util.DisplayMetrics)> -> _SINK_ 
<android.content.res.TypedArray: java.lang.String getPositionDescription()> -> _SOURCE_
<android.view.Surface: void readFromParcel(android.os.Parcel)> -> _NONE_
<android.content.ContextWrapper: void attachBaseContext(android.content.Context)> -> _NONE_
<android.widget.TextView: java.lang.CharSequence getError()> -> _SOURCE_
<java.util.Locale: java.lang.String getVariant()> -> _SOURCE_
<android.animation.ValueAnimator: int getRepeatCount()> -> _SOURCE_
<android.widget.TextView: int getImeOptions()> -> _SOURCE_
<android.view.ViewGroup: void offsetRectIntoDescendantCoords(android.view.View,android.graphics.Rect)> -> _NONE_
<java.nio.BufferUnderflowException: void <init>()> -> _NONE_
<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)> -> _NONE_
<android.content.ContentProvider: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _NONE_
<android.content.pm.ProviderInfo: void <init>(android.content.pm.ProviderInfo)> -> _NONE_
<android.app.Activity: void setProgressBarIndeterminateVisibility(boolean)> -> _SINK_ 
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)> -> _NONE_
<android.location.Location: double getLatitude()> -> _SOURCE_
<android.location.LocationProvider: boolean meetsCriteria(android.location.Criteria)> -> _NONE_
<java.security.CodeSigner: int hashCode()> -> _SINK_ 
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,long)> -> _NONE_
<android.content.IntentFilter: android.os.PatternMatcher getDataSchemeSpecificPart(int)> -> _SOURCE_
<android.content.ClipDescription: java.lang.String getMimeType(int)> -> _SOURCE_
<android.view.MotionEvent: float getToolMajor(int)> -> _SOURCE_
<java.lang.Character: boolean isJavaLetterOrDigit(char)> -> _NONE_
<android.content.Intent: char getCharExtra(java.lang.String,char)> -> _SOURCE_
<java.lang.reflect.Constructor: java.lang.String toGenericString()> -> _NONE_
<android.app.Activity: void setProgress(int)> -> _SINK_ 
<android.view.WindowManager$LayoutParams: void <init>()> -> _NONE_
<android.view.ViewGroup$MarginLayoutParams: void resolveLayoutDirection(int)> -> _NONE_
<android.os.Parcel: void enforceInterface(java.lang.String)> -> _NONE_
<android.graphics.drawable.Drawable$ConstantState: android.graphics.drawable.Drawable newDrawable(android.content.res.Resources)> -> _NONE_
<android.graphics.drawable.Drawable: void invalidateSelf()> -> _NONE_
<android.app.Notification$Builder: android.app.Notification getNotification()> -> _SOURCE_
<android.webkit.WebView: android.webkit.WebBackForwardList copyBackForwardList()> -> _NONE_
<android.content.ContentProviderClient: void finalize()> -> _NONE_
<android.print.PrintAttributes$MediaSize: java.lang.String getLabel(android.content.pm.PackageManager)> -> _SOURCE_
<android.webkit.WebChromeClient: void onProgressChanged(android.webkit.WebView,int)> -> _NONE_
<android.animation.PropertyValuesHolder: void setPropertyName(java.lang.String)> -> _SINK_ 
<java.util.HashMap: boolean containsKey(java.lang.Object)> -> _NONE_
<android.os.Debug$MemoryInfo: void <clinit>()> -> _NONE_
<android.app.Fragment: void startActivity(android.content.Intent)> -> _SINK_ 
<java.lang.InstantiationException: void <init>(java.lang.String)> -> _NONE_
<android.view.ViewGroup: boolean dispatchKeyEventPreIme(android.view.KeyEvent)> -> _NONE_
<android.net.Uri$Builder: android.net.Uri$Builder encodedAuthority(java.lang.String)> -> _NONE_
<android.widget.AbsListView: int getSolidColor()> -> _SOURCE_
<java.nio.Buffer: void <init>()> -> _NONE_
<android.view.WindowManager$LayoutParams: void <init>(int,int,int,int,int)> -> _NONE_
<android.os.PatternMatcher: int getType()> -> _SOURCE_
<android.view.ViewGroup: boolean requestSendAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)> -> _NONE_
<android.hardware.Camera$Parameters: java.lang.String getSceneMode()> -> _SOURCE_
<java.nio.FloatBuffer: void <init>()> -> _NONE_
<android.view.InputDevice: int getProductId()> -> _SOURCE_
<android.content.ContentValues: void putAll(android.content.ContentValues)> -> _NONE_
<java.io.IOException: void <init>()> -> _NONE_
<android.app.ActionBar$LayoutParams: void <init>(int,int)> -> _NONE_
<java.lang.ref.Reference: boolean isEnqueued()> -> _NONE_
<java.lang.ThreadGroup: void resume()> -> _NONE_
<android.app.Activity: void onPrepareNavigateUpTaskStack(android.app.TaskStackBuilder)> -> _NONE_
<android.widget.ListView: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> -> _NONE_
<android.provider.Browser: android.database.Cursor getAllVisitedUrls(android.content.ContentResolver)> -> _SOURCE_
<android.content.ContentProviderOperation$Builder: android.content.ContentProviderOperation$Builder withExpectedCount(int)> -> _NONE_
<android.widget.ListView: void <init>(android.content.Context)> -> _NONE_
<java.nio.channels.SelectionKey: boolean isWritable()> -> _NONE_
<android.os.Looper: void dump(android.util.Printer,java.lang.String)> -> _NONE_
<android.net.Uri: android.net.Uri parse(java.lang.String)> -> _NONE_
<java.lang.Double: java.lang.Double valueOf(java.lang.String)> -> _SINK_ 
<android.app.Dialog: boolean onContextItemSelected(android.view.MenuItem)> -> _NONE_
<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)> -> _NONE_
<java.io.PrintWriter: void <init>(java.io.File,java.lang.String)> -> _NONE_
<java.lang.Object: java.lang.String toString()> -> _NONE_
<java.lang.StackOverflowError: void <init>()> -> _NONE_
<android.content.ContentValues: java.lang.String toString()> -> _NONE_
<android.os.Debug$MemoryInfo: int getTotalPrivateClean()> -> _SOURCE_
<android.view.View: float getRotation()> -> _SOURCE_
<android.net.sip.SipAudioCall: android.net.sip.SipProfile getPeerProfile()> -> _SOURCE_
<android.accounts.Account: boolean equals(java.lang.Object)> -> _NONE_
<android.view.KeyEvent: boolean isFunctionPressed()> -> _NONE_
<android.webkit.WebView: void onResume()> -> _NONE_
<android.app.Dialog: int getVolumeControlStream()> -> _SOURCE_
<android.app.Notification$Builder: android.app.Notification$Builder addAction(int,java.lang.CharSequence,android.app.PendingIntent)> -> _NONE_
<android.app.Activity: void onActionModeFinished(android.view.ActionMode)> -> _NONE_
<android.view.View: android.view.View findViewWithTag(java.lang.Object)> -> _NONE_
<java.lang.AbstractStringBuilder: int indexOf(java.lang.String)> -> _NONE_
<android.content.pm.PackageItemInfo: void <init>(android.content.pm.PackageItemInfo)> -> _NONE_
<android.widget.ListView: void addHeaderView(android.view.View,java.lang.Object,boolean)> -> _NONE_
<java.lang.Thread: void setDefaultUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)> -> _SINK_ 
<android.content.res.Resources: android.graphics.drawable.Drawable getDrawableForDensity(int,int)> -> _SOURCE_
<android.content.ContentProviderClient: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SOURCE_
<android.view.inputmethod.CorrectionInfo: java.lang.CharSequence getOldText()> -> _SOURCE_
<android.view.ViewGroup: int getPersistentDrawingCache()> -> _SOURCE_
<android.view.KeyEvent: boolean isScrollLockOn()> -> _NONE_
<android.print.PageRange: java.lang.String toString()> -> _NONE_
<android.app.Fragment: void onLowMemory()> -> _NONE_
<android.view.animation.Animation: boolean willChangeTransformationMatrix()> -> _NONE_
<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)> -> _SOURCE_
<java.util.BitSet: long[] toLongArray()> -> _NONE_
<java.util.Locale: void <clinit>()> -> _NONE_
<java.net.URL: int getDefaultPort()> -> _SOURCE_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,float)> -> _NONE_
<java.net.DatagramSocketImpl: java.io.FileDescriptor getFileDescriptor()> -> _SOURCE_
<android.content.res.Resources: float getDimension(int)> -> _SOURCE_
<java.net.DatagramSocket: int getSoTimeout()> -> _SOURCE_
<android.animation.LayoutTransition: boolean isChangingLayout()> -> _NONE_
<android.content.ContentResolver: void cancelSync(android.accounts.Account,java.lang.String)> -> _NONE_
<android.accounts.AccountAuthenticatorActivity: void sendOrderedBroadcast(android.content.Intent,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> android.permission.BROADCAST_STICKY android.permission.MANAGE_APP_TOKENS -> _SINK_ 
<android.widget.TextView: boolean moveCursorToVisibleOffset()> -> _NONE_
<android.view.animation.LayoutAnimationController: android.view.animation.Animation getAnimationForView(android.view.View)> -> _SOURCE_
<android.view.ViewGroup: void removeView(android.view.View)> -> _NONE_
<android.accounts.AuthenticatorDescription: void <init>(java.lang.String,java.lang.String,int,int,int,int)> -> _NONE_
<android.content.pm.ComponentInfo: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<android.widget.TextView: boolean getIncludeFontPadding()> -> _SOURCE_
<android.webkit.WebSettings: boolean getDatabaseEnabled()> -> _SOURCE_
<android.content.ContentResolver: android.net.Uri uncanonicalize(android.net.Uri)> -> _SOURCE_
<android.graphics.Path: void addRoundRect(android.graphics.RectF,float[],android.graphics.Path$Direction)> -> _NONE_
<java.net.URI: java.lang.String getScheme()> -> _SOURCE_
<android.view.View: void setScrollBarSize(int)> -> _SINK_ 
<android.content.ContextWrapper: android.content.pm.ApplicationInfo getApplicationInfo()> -> _SOURCE_
<java.util.BitSet: int previousSetBit(int)> -> _SINK_ 
<android.widget.AdapterView: java.lang.Object getItemAtPosition(int)> -> _SOURCE_
<javax.security.cert.CertificateEncodingException: void <init>(java.lang.String)> android.permission.STOP_APP_SWITCHES -> _NONE_
<java.nio.ByteBuffer: void <init>()> -> _NONE_
<java.io.File: void deleteOnExit()> -> _NONE_
<java.util.ArrayList: int hashCode()> -> _SINK_ 
<java.lang.reflect.Method: int hashCode()> -> _SINK_ 
<java.lang.reflect.Constructor: void <init>()> -> _NONE_
<android.animation.Animator: void addListener(android.animation.Animator$AnimatorListener)> -> _NONE_
<android.webkit.WebView: int computeVerticalScrollOffset()> -> _NONE_
<android.webkit.WebViewClient: void onReceivedSslError(android.webkit.WebView,android.webkit.SslErrorHandler,android.net.http.SslError)> -> _NONE_
<android.view.Display: void getRectSize(android.graphics.Rect)> -> _SOURCE_
<java.nio.channels.Selector: void <init>()> -> _NONE_
<android.app.Activity: android.view.View onCreateView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet)> -> _NONE_
<android.widget.AdapterView: android.view.View getEmptyView()> -> _SOURCE_
<android.util.SparseBooleanArray: int indexOfValue(boolean)> -> _SINK_ 
<android.graphics.Canvas: void drawColor(int)> -> _NONE_
<android.widget.TextView: void setCompoundDrawablePadding(int)> -> _SINK_ 
<java.net.Socket: boolean getReuseAddress()> -> _SOURCE_
<android.print.PrintAttributes$Margins: boolean equals(java.lang.Object)> -> _NONE_
<android.database.sqlite.SQLiteDatabase: void setPageSize(long)> -> _SINK_ 
<android.content.pm.Signature: void <clinit>()> -> _NONE_
<java.math.BigInteger: java.math.BigInteger valueOf(long)> -> _NONE_
<android.view.View: void setVerticalFadingEdgeEnabled(boolean)> -> _SINK_ 
<android.view.accessibility.AccessibilityEvent: long getEventTime()> -> _SOURCE_
<android.location.Location: void setExtras(android.os.Bundle)> -> _SINK_ 
<android.widget.TextView: void debug(int)> -> _NONE_
<android.webkit.WebChromeClient: void onGeolocationPermissionsShowPrompt(java.lang.String,android.webkit.GeolocationPermissions$Callback)> -> _NONE_
<android.text.Layout: int getLineAscent(int)> -> _SOURCE_
<android.widget.RemoteViews: void setBitmap(int,java.lang.String,android.graphics.Bitmap)> -> _SINK_ 
<android.graphics.drawable.Drawable: boolean onStateChange(int[])> -> _NONE_
<java.lang.CloneNotSupportedException: void <init>()> -> _NONE_
<android.widget.TextView: void append(java.lang.CharSequence,int,int)> -> _NONE_
<java.io.PrintWriter: void print(long)> -> _NONE_
<android.webkit.WebView: android.webkit.WebView$HitTestResult getHitTestResult()> -> _SOURCE_
<android.view.ViewGroup: int getChildCount()> -> _SOURCE_
<android.view.ViewGroupOverlay: void add(android.view.View)> -> _NONE_
<android.content.res.Configuration: java.lang.String toString()> -> _NONE_
<java.io.PrintStream: void write(byte[],int,int)> -> _NONE_
<android.widget.AbsListView: android.view.View getSelectedView()> -> _SOURCE_
<android.widget.RemoteViews: boolean onLoadClass(java.lang.Class)> -> _NONE_
<android.net.wifi.SupplicantState: int describeContents()> -> _SINK_ 
<java.lang.String: int lastIndexOf(int)> -> _SINK_ 
<android.view.View: void onFinishTemporaryDetach()> -> _NONE_
<android.widget.AdapterView: void removeView(android.view.View)> -> _NONE_
<android.webkit.WebView: void goBackOrForward(int)> -> _NONE_
<android.webkit.WebSettings: void setCacheMode(int)> -> _NONE_
<java.nio.charset.CharsetDecoder: java.nio.charset.CoderResult implFlush(java.nio.CharBuffer)> -> _NONE_
<android.webkit.WebSettings$LayoutAlgorithm: android.webkit.WebSettings$LayoutAlgorithm[] values()> -> _NONE_
<android.view.View: float getScaleX()> -> _SOURCE_
<android.animation.ValueAnimator: java.lang.Object getAnimatedValue(java.lang.String)> -> _SOURCE_
<android.database.sqlite.SQLiteProgram: void <init>()> -> _NONE_
<android.app.Activity: void setTitleColor(int)> -> _SINK_ 
<android.util.SparseBooleanArray: int keyAt(int)> -> _SINK_ 
<java.security.cert.CertificateNotYetValidException: void <init>(java.lang.String)> -> _NONE_
<android.telephony.ServiceState: java.lang.String getOperatorAlphaLong()> -> _SOURCE_
<android.location.LocationProvider: void <init>()> -> _NONE_
<android.telephony.PhoneStateListener: void onMessageWaitingIndicatorChanged(boolean)> -> _NONE_
<java.io.PrintStream: void print(int)> -> _NONE_
<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence,int,int)> -> _NONE_
<android.os.UserHandle: android.os.UserHandle readFromParcel(android.os.Parcel)> -> _SINK_ 
<android.graphics.Paint: boolean isDither()> -> _NONE_
<android.graphics.SurfaceTexture: void release()> -> _NONE_
<android.view.InflateException: void <init>(java.lang.String,java.lang.Throwable)> -> _NONE_
<android.net.http.SslError: boolean hasError(int)> -> _NONE_
<android.view.View: int getTextAlignment()> -> _SOURCE_
<org.xmlpull.v1.XmlPullParserException: void printStackTrace()> -> _NONE_
<android.media.MediaPlayer: void setOnErrorListener(android.media.MediaPlayer$OnErrorListener)> -> _SINK_ 
<android.bluetooth.BluetoothGatt: boolean readDescriptor(android.bluetooth.BluetoothGattDescriptor)> -> _NONE_
<android.widget.ListView: boolean onKeyDown(int,android.view.KeyEvent)> -> _NONE_
<android.os.Parcel: java.util.ArrayList createTypedArrayList(android.os.Parcelable$Creator)> -> _NONE_
<android.widget.ListView: void setItemsCanFocus(boolean)> -> _SINK_ 
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable$Callback getCallback()> -> _SOURCE_
<java.net.SocketImpl: int getLocalPort()> -> _SOURCE_
<java.nio.ByteOrder: void <init>()> -> _NONE_
<java.io.PrintWriter: java.io.PrintWriter printf(java.util.Locale,java.lang.String,java.lang.Object[])> -> _NONE_
<android.graphics.RectF: void <init>(android.graphics.RectF)> -> _NONE_
<android.graphics.Movie: android.graphics.Movie decodeFile(java.lang.String)> -> _NONE_
<android.graphics.Matrix: boolean equals(java.lang.Object)> -> _NONE_
<java.net.DatagramPacket: void <init>(byte[],int,int,java.net.InetAddress,int)> -> _NONE_
<java.lang.Thread: int enumerate(java.lang.Thread[])> -> _SINK_ 
<android.net.wifi.WifiManager: android.net.DhcpInfo getDhcpInfo()> -> _SOURCE_
<android.view.MotionEvent: float getHistoricalTouchMajor(int,int)> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: boolean isFocusable()> -> _NONE_
<android.view.animation.Animation: boolean isFillEnabled()> -> _NONE_
<android.hardware.Camera$Parameters: void setGpsProcessingMethod(java.lang.String)> -> _SINK_ 
<android.webkit.WebSettings: void setAppCacheMaxSize(long)> -> _NONE_
<java.net.URLConnection: void setDefaultUseCaches(boolean)> -> _NONE_
<android.view.ViewGroup$MarginLayoutParams: int getMarginStart()> -> _SOURCE_
<java.net.InetAddress: boolean isAnyLocalAddress()> -> _NONE_
<java.lang.reflect.Field: double getDouble(java.lang.Object)> -> _SOURCE_
<android.widget.TextView: void onFinishTemporaryDetach()> -> _NONE_
<java.nio.channels.spi.AbstractSelectionKey: void cancel()> -> _NONE_
<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofFloat(java.lang.String,float[])> -> _NONE_
<android.widget.ListView: boolean removeFooterView(android.view.View)> -> _NONE_
<android.content.pm.ActivityInfo: void <init>(android.content.pm.ActivityInfo)> -> _NONE_
<java.net.Socket: java.net.InetAddress getInetAddress()> -> _SOURCE_
<android.os.Bundle: int[] getIntArray(java.lang.String)> -> _SOURCE_
<android.content.ContextWrapper: void enforceCallingOrSelfUriPermission(android.net.Uri,int,java.lang.String)> -> _NONE_
<java.net.NetworkInterface: java.lang.String getDisplayName()> -> _SOURCE_
<android.widget.TextView: void setLineSpacing(float,float)> -> _SINK_ 
<java.lang.Exception: void <init>()> -> _NONE_
<android.app.Notification$Builder: android.app.Notification$Builder setAutoCancel(boolean)> -> _SINK_ 
<android.widget.RemoteViews: void setImageViewUri(int,android.net.Uri)> -> _SINK_ 
<java.net.ServerSocket: void bind(java.net.SocketAddress)> -> _NONE_
<android.view.View: boolean isVerticalScrollBarEnabled()> -> _NONE_
<android.view.View$DragShadowBuilder: void <init>(android.view.View)> -> _NONE_
<java.net.URLStreamHandler: void setURL(java.net.URL,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _NONE_
<android.graphics.SurfaceTexture: void attachToGLContext(int)> -> _NONE_
<java.lang.reflect.Field: long getLong(java.lang.Object)> -> _SOURCE_
<android.view.Display: int getFlags()> -> _SOURCE_
<android.view.View: void setPadding(int,int,int,int)> -> _SINK_ 
<java.lang.String: void <init>(java.lang.String)> -> _NONE_
<android.view.View: void setTextAlignment(int)> -> _SINK_ 
<java.lang.reflect.Field: int hashCode()> -> _SINK_ 
<android.test.mock.MockContentResolver: void <init>()> -> _NONE_
<android.app.Activity: void setTitle(java.lang.CharSequence)> -> _SINK_ 
<android.accessibilityservice.AccessibilityServiceInfo: java.lang.String loadDescription(android.content.pm.PackageManager)> -> _NONE_
<android.content.res.AssetManager: void <init>()> -> _NONE_
<android.view.KeyEvent$DispatcherState: void reset(java.lang.Object)> -> _NONE_
<java.security.spec.ECPoint: java.math.BigInteger getAffineY()> -> _SOURCE_
<android.os.Handler: void handleMessage(android.os.Message)> -> _NONE_
<java.nio.CharBuffer: java.nio.CharBuffer get(char[])> -> _SOURCE_
<android.content.IntentFilter: void addAction(java.lang.String)> -> _NONE_
<android.net.sip.SipSession: void changeCall(java.lang.String,int)> -> _NONE_
<android.app.backup.BackupAgentHelper: void unregisterReceiver(android.content.BroadcastReceiver)> android.permission.BROADCAST_STICKY android.permission.MANAGE_APP_TOKENS -> _NONE_
<android.view.inputmethod.CorrectionInfo: java.lang.CharSequence getNewText()> -> _SOURCE_
<android.widget.AbsListView: android.os.Parcelable onSaveInstanceState()> -> _NONE_
<android.graphics.Canvas: void scale(float,float,float,float)> -> _NONE_
<android.provider.Telephony$Sms: void <init>()> -> _NONE_
<android.graphics.RectF: void set(android.graphics.RectF)> -> _SINK_ 
<java.net.DatagramPacket: void setAddress(java.net.InetAddress)> -> _SINK_ 
<android.view.MotionEvent: float getHistoricalToolMinor(int,int)> -> _SOURCE_
<java.io.PrintWriter: void print(int)> -> _NONE_
<java.net.Socket: void connect(java.net.SocketAddress,int)> -> _NONE_
<java.security.cert.X509Certificate: java.util.Collection getIssuerAlternativeNames()> -> _SOURCE_
<android.app.Activity: void startActivityFromFragment(android.app.Fragment,android.content.Intent,int)> -> _SINK_ 
<java.lang.String: java.lang.String substring(int)> -> _NONE_
<java.lang.Integer: java.lang.Integer getInteger(java.lang.String,java.lang.Integer)> -> _SOURCE_
<android.webkit.WebView: boolean canGoForward()> -> _NONE_
<android.content.IntentFilter: int match(android.content.ContentResolver,android.content.Intent,boolean,java.lang.String)> -> _SINK_ 
<android.widget.AbsListView: boolean hasTextFilter()> -> _NONE_
<android.view.View: void setAccessibilityLiveRegion(int)> -> _SINK_ 
<android.bluetooth.BluetoothAdapter: boolean enable()> -> _NONE_
<android.content.BroadcastReceiver: boolean getAbortBroadcast()> -> _SOURCE_
<android.view.View: boolean isSaveFromParentEnabled()> -> _NONE_
<android.content.ContentValues: java.lang.Double getAsDouble(java.lang.String)> -> _SOURCE_
<java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler getDefaultUncaughtExceptionHandler()> -> _SOURCE_
<java.nio.CharBuffer: java.nio.CharBuffer put(java.lang.String)> -> _NONE_
<android.graphics.Paint: android.graphics.Paint$FontMetricsInt getFontMetricsInt()> -> _SOURCE_
<android.app.TaskStackBuilder: android.app.PendingIntent getPendingIntent(int,int,android.os.Bundle)> -> _SOURCE_
<java.net.URI: java.lang.String getQuery()> -> _SOURCE_
<android.content.Intent: android.content.ComponentName getComponent()> -> _SOURCE_
<android.view.ViewGroup$MarginLayoutParams: int getLayoutDirection()> -> _SOURCE_
<android.bluetooth.BluetoothServerSocket: android.bluetooth.BluetoothSocket accept(int)> -> _NONE_
<android.app.Dialog: void setTitle(java.lang.CharSequence)> -> _SINK_ 
<android.webkit.WebView: void onDraw(android.graphics.Canvas)> -> _NONE_
<android.view.View: int getBaseline()> -> _SOURCE_
<android.text.Layout: int getOffsetToLeftOf(int)> -> _SOURCE_
<android.view.animation.LayoutAnimationController: int getTransformedIndex(android.view.animation.LayoutAnimationController$AnimationParameters)> -> _SOURCE_
<android.app.Dialog: void <init>(android.content.Context,int)> -> _NONE_
<android.net.wifi.WifiManager: java.util.List getConfiguredNetworks()> -> _SOURCE_
<java.nio.channels.spi.AbstractInterruptibleChannel: void close()> -> _NONE_
<android.net.Uri$Builder: android.net.Uri$Builder appendQueryParameter(java.lang.String,java.lang.String)> -> _NONE_
<android.app.backup.BackupAgent: void onCreate()> -> _NONE_
<android.widget.ListView: void onFocusChanged(boolean,int,android.graphics.Rect)> -> _NONE_
<android.content.ContextWrapper: int checkCallingPermission(java.lang.String)> -> _SINK_ 
<android.view.animation.LayoutAnimationController: void <init>(android.view.animation.Animation)> -> _NONE_
<android.os.Message: android.os.Message obtain(android.os.Handler,int)> -> _SINK_ 
<org.apache.http.util.ByteArrayBuffer: void setLength(int)> -> _SINK_ 
<android.webkit.WebViewClient: void onTooManyRedirects(android.webkit.WebView,android.os.Message,android.os.Message)> -> _NONE_
<android.view.Window: android.view.View findViewById(int)> -> _NONE_
<android.widget.TextView: boolean hasSelection()> -> _NONE_
<android.bluetooth.BluetoothHeadset: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
<android.util.Property: java.lang.String getName()> -> _SOURCE_
<android.view.View: void setDuplicateParentStateEnabled(boolean)> -> _SINK_ 
<android.view.KeyEvent: void <init>(long,long,int,int,int,int,int,int)> -> _NONE_
<java.lang.AbstractStringBuilder: int capacity()> -> _NONE_
<android.view.View: android.view.View focusSearch(int)> -> _NONE_
<android.database.ContentObserver: void onChange(boolean)> -> _NONE_
<android.widget.TextView: void setPadding(int,int,int,int)> -> _SINK_ 
<android.os.PatternMatcher: java.lang.String getPath()> -> _SOURCE_
<java.nio.FloatBuffer: boolean equals(java.lang.Object)> -> _NONE_
<android.text.style.ImageSpan: void <init>(android.graphics.drawable.Drawable,java.lang.String,int)> -> _NONE_
<android.view.InflateException: void <init>(java.lang.Throwable)> -> _NONE_
<android.text.style.URLSpan: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<android.content.ContentResolver: void notifyChange(android.net.Uri,android.database.ContentObserver)> -> _NONE_
<java.lang.StackTraceElement: java.lang.String getMethodName()> -> _SOURCE_
<android.webkit.WebViewClient: void onFormResubmission(android.webkit.WebView,android.os.Message,android.os.Message)> -> _NONE_
<android.location.Criteria: void setSpeedAccuracy(int)> -> _SINK_ 
<android.graphics.SurfaceTexture: void releaseTexImage()> -> _NONE_
<android.print.PrintAttributes$Margins: void <init>(int,int,int,int)> -> _NONE_
<java.net.URI: java.lang.String getHost()> -> _SOURCE_
<android.telephony.TelephonyManager: int getDataState()> -> _SOURCE_
<android.view.ViewGroup: void attachViewToParent(android.view.View,int,android.view.ViewGroup$LayoutParams)> -> _NONE_
<android.telephony.CellInfoCdma: android.telephony.CellIdentityCdma getCellIdentity()> -> _SOURCE_
<java.security.Timestamp: void <init>(java.util.Date,java.security.cert.CertPath)> -> _NONE_
<javax.security.auth.x500.X500Principal: void <init>(byte[])> -> _NONE_
<android.telephony.PhoneStateListener: void onCallStateChanged(int,java.lang.String)> -> _NONE_
<java.io.File: java.lang.String getCanonicalPath()> -> _SOURCE_
<android.view.ActionMode: void setTag(java.lang.Object)> -> _NONE_
<android.os.Looper: android.os.Looper getMainLooper()> -> _SOURCE_
<android.view.ViewGroup: void debug(int)> -> _NONE_
<java.security.spec.ECParameterSpec: java.security.spec.ECPoint getGenerator()> -> _SOURCE_
<android.net.sip.SipAudioCall: void toggleMute()> -> _NONE_
<android.content.IntentFilter$MalformedMimeTypeException: void <init>(java.lang.String)> -> _NONE_
<android.hardware.Camera$Size: void <init>(android.hardware.Camera,int,int)> -> _NONE_
<java.util.Date: int compareTo(java.lang.Object)> -> _SINK_ 
<android.widget.TextView: void setCustomSelectionActionModeCallback(android.view.ActionMode$Callback)> -> _SINK_ 
<android.app.Notification$Style: void setBuilder(android.app.Notification$Builder)> android.permission.STOP_APP_SWITCHES -> _NONE_
<android.app.Fragment: void setArguments(android.os.Bundle)> -> _SINK_ 
<java.net.Socket: void setPerformancePreferences(int,int,int)> -> _SINK_ 
<android.webkit.ConsoleMessage: java.lang.String message()> -> _NONE_
<android.app.PendingIntent: void <init>()> -> _NONE_
<java.util.AbstractList: boolean equals(java.lang.Object)> -> _NONE_
<android.content.ContentProvider: android.net.Uri uncanonicalize(android.net.Uri)> -> _SOURCE_
<android.view.KeyEvent: boolean dispatch(android.view.KeyEvent$Callback)> -> _NONE_
<android.graphics.Matrix: boolean postSkew(float,float,float,float)> -> _NONE_
<android.location.LocationProvider: boolean requiresNetwork()> -> _NONE_
<android.view.Window: int getFeatures()> -> _SOURCE_
<android.os.Debug$MemoryInfo: int getTotalSwappablePss()> -> _SOURCE_
<android.net.sip.SipSession$Listener: void onRegistrationFailed(android.net.sip.SipSession,int,java.lang.String)> -> _NONE_
<org.apache.http.message.BasicLineParser: org.apache.http.RequestLine parseRequestLine(java.lang.String,org.apache.http.message.LineParser)> -> _NONE_
<java.lang.reflect.Method: java.lang.Class getReturnType()> -> _SOURCE_
<android.bluetooth.BluetoothDevice: java.lang.String toString()> -> _NONE_
<android.content.Intent: double getDoubleExtra(java.lang.String,double)> -> _SOURCE_
<android.view.MotionEvent: float getHistoricalTouchMajor(int)> -> _SOURCE_
<android.app.Activity: boolean onPrepareOptionsMenu(android.view.Menu)> -> _NONE_
<android.view.accessibility.AccessibilityRecord: int getMaxScrollX()> -> _SOURCE_
<android.nfc.tech.NfcB: android.nfc.tech.NfcB get(android.nfc.Tag)> -> _SOURCE_
<java.net.URI: java.net.URI relativize(java.net.URI)> -> _NONE_
<android.app.ActivityManager: android.os.Debug$MemoryInfo[] getProcessMemoryInfo(int[])> -> _SOURCE_
<java.lang.Character: boolean isSurrogate(char)> -> _NONE_
<android.view.KeyEvent: boolean isMetaPressed()> -> _NONE_
<android.view.View: void postInvalidateDelayed(long,int,int,int,int)> -> _NONE_
<java.lang.StringBuffer: void getChars(int,int,char[],int)> -> _SOURCE_
<android.widget.Scroller: void setFriction(float)> -> _SINK_ 
<android.view.InputQueue: void <init>()> -> _NONE_
<android.webkit.WebView: int computeVerticalScrollRange()> -> _NONE_
<android.widget.ExpandableListView: boolean collapseGroup(int)> -> _NONE_
<android.widget.AdapterView: boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> -> _NONE_
<android.view.KeyEvent$DispatcherState: void performedLongPress(android.view.KeyEvent)> -> _NONE_
<android.app.Activity: void onRestoreInstanceState(android.os.Bundle)> -> _NONE_
<android.location.Location: void setProvider(java.lang.String)> -> _SINK_ 
<android.content.res.Resources: android.content.res.ColorStateList getColorStateList(int)> -> _SOURCE_
<android.view.MotionEvent: int getPointerId(int)> -> _SOURCE_
<java.nio.channels.spi.SelectorProvider: void <init>()> -> _NONE_
<android.view.ViewGroup: void dispatchWindowSystemUiVisiblityChanged(int)> -> _NONE_
<android.webkit.WebSettings: void <init>()> -> _NONE_
<java.io.FileInputStream: void <init>(java.io.FileDescriptor)> -> _NONE_
<java.lang.reflect.Field: void setDouble(java.lang.Object,double)> -> _SINK_ 
<android.telephony.SignalStrength: java.lang.String toString()> -> _NONE_
<android.app.Activity: void closeOptionsMenu()> -> _NONE_
<android.app.Activity: int getVolumeControlStream()> -> _SOURCE_
<android.view.inputmethod.CorrectionInfo: int describeContents()> -> _SINK_ 
<java.io.Writer: void write(java.lang.String,int,int)> -> _NONE_
<android.content.IntentFilter: java.lang.String getCategory(int)> -> _SOURCE_
<android.app.Activity: boolean navigateUpTo(android.content.Intent)> -> _SINK_ 
<android.app.Activity: android.app.Application getApplication()> -> _SOURCE_
<android.content.ClipData$Item: java.lang.CharSequence coerceToText(android.content.Context)> -> _NONE_
<android.graphics.Canvas: void setBitmap(android.graphics.Bitmap)> -> _SINK_ 
<java.lang.Long: long highestOneBit(long)> -> _SINK_ 
<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofInt(android.util.Property,int[])> -> _NONE_
<java.util.ArrayList: int lastIndexOf(java.lang.Object)> -> _SINK_ 
<java.nio.ShortBuffer: int hashCode()> -> _NONE_
<android.content.IntentFilter$MalformedMimeTypeException: void <init>()> -> _NONE_
<android.widget.TextView: void append(java.lang.CharSequence)> -> _NONE_
<android.net.wifi.WifiManager: boolean isWifiEnabled()> -> _NONE_
<android.hardware.Camera: void setOneShotPreviewCallback(android.hardware.Camera$PreviewCallback)> -> _SINK_ 
<java.io.PrintStream: java.io.PrintStream printf(java.util.Locale,java.lang.String,java.lang.Object[])> -> _NONE_
<android.view.View: void setMeasuredDimension(int,int)> -> _SINK_ 
<java.nio.LongBuffer: java.nio.LongBuffer allocate(int)> -> _NONE_
<android.media.MediaFormat: android.media.MediaFormat createAudioFormat(java.lang.String,int,int)> -> _SINK_ 
<java.net.ServerSocket: void close()> -> _NONE_
<android.os.Bundle: java.util.ArrayList getIntegerArrayList(java.lang.String)> -> _SOURCE_
<android.content.res.TypedArray: int getLayoutDimension(int,int)> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: int releaseMemory()> -> _SINK_ 
<java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()> -> _NONE_
<android.bluetooth.BluetoothDevice: java.lang.String getAddress()> -> _SOURCE_
<android.widget.TextView: void setTextColor(int)> -> _SINK_ 
<android.view.accessibility.AccessibilityNodeInfo: void setParent(android.view.View,int)> -> _SINK_ 
<android.view.View: float getRightFadingEdgeStrength()> -> _SOURCE_
<android.view.KeyEvent$DispatcherState: void reset()> -> _NONE_
<android.content.ContextWrapper: void sendBroadcast(android.content.Intent,java.lang.String)> -> _SINK_ 
<android.location.Criteria: void <init>()> -> _NONE_
<java.lang.annotation.RetentionPolicy: void <clinit>()> -> _NONE_
<java.lang.Class: java.lang.reflect.Field[] getFields()> -> _SOURCE_
<android.text.TextPaint: void <init>(android.graphics.Paint)> -> _NONE_
<java.lang.AbstractStringBuilder: void setCharAt(int,char)> -> _NONE_
<android.animation.PropertyValuesHolder: void setFloatValues(float[])> -> _SINK_ 
<android.widget.TextView: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> -> _NONE_
<android.content.res.TypedArray: float getFraction(int,int,int,float)> -> _SOURCE_
<android.view.DragEvent: void <init>()> -> _NONE_
<java.lang.Integer: void <clinit>()> -> _NONE_
<android.view.View: boolean isHovered()> -> _NONE_
<android.content.res.Resources: android.content.res.Configuration getConfiguration()> -> _SOURCE_
<android.content.pm.Signature: void <init>(byte[])> -> _NONE_
<java.lang.String: int lastIndexOf(java.lang.String,int)> -> _SINK_ 
<android.hardware.Camera: void setPreviewDisplay(android.view.SurfaceHolder)> -> _SINK_ 
<android.content.res.Resources: int getIdentifier(java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<android.hardware.Camera$Parameters: void remove(java.lang.String)> -> _NONE_
<android.app.Activity: int getTaskId()> -> _SOURCE_
<android.webkit.JsResult: void cancel()> -> _NONE_
<android.app.Notification$Action: android.app.Notification$Action clone()> -> _NONE_
<android.content.ContextWrapper: boolean stopService(android.content.Intent)> -> _SINK_ 
<android.view.View: boolean onTrackballEvent(android.view.MotionEvent)> -> _NONE_
<android.widget.Scroller: int getCurrY()> -> _SOURCE_
<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()> -> _SOURCE_
<android.os.Handler: void dispatchMessage(android.os.Message)> -> _NONE_
<android.view.KeyEvent: int getDeadChar(int,int)> -> _SOURCE_
<android.view.View: boolean isInEditMode()> -> _NONE_
<android.telephony.TelephonyManager: int getSimState()> -> _SOURCE_
<android.view.animation.LayoutAnimationController: void setAnimation(android.view.animation.Animation)> -> _SINK_ 
<android.widget.AbsoluteLayout: void <init>(android.content.Context,android.util.AttributeSet,int)> -> _NONE_
<java.lang.Double: void <clinit>()> -> _NONE_
<android.hardware.Camera$Parameters: void setAutoWhiteBalanceLock(boolean)> -> _SINK_ 
<android.graphics.Movie: void draw(android.graphics.Canvas,float,float)> -> _NONE_
<android.content.res.TypedArray: int getInteger(int,int)> -> _SOURCE_
<java.lang.Class: java.lang.ClassLoader getClassLoader()> -> _SOURCE_
<android.content.res.ColorStateList: void <init>(int[][],int[])> -> _NONE_
<java.net.URL: void <init>(java.lang.String,java.lang.String,java.lang.String)> -> _NONE_
<android.graphics.SurfaceTexture: void <init>(int,boolean)> -> _NONE_
<android.content.pm.ActivityInfo: void <clinit>()> -> _NONE_
<android.view.View: void addOnLayoutChangeListener(android.view.View$OnLayoutChangeListener)> -> _NONE_
<android.view.View: void onScreenStateChanged(int)> -> _NONE_
<android.view.ViewGroup: void recomputeViewAttributes(android.view.View)> -> _NONE_
<android.bluetooth.BluetoothServerSocket: void close()> -> _NONE_
<android.net.sip.SipProfile: void <init>()> -> _NONE_
<android.os.Bundle: void putString(java.lang.String,java.lang.String)> -> _NONE_
<android.graphics.Path: void rCubicTo(float,float,float,float,float,float)> -> _NONE_
<android.view.ViewGroup: void removeAllViewsInLayout()> -> _NONE_
<android.telephony.TelephonyManager: java.util.List getAllCellInfo()> -> _SOURCE_
<android.widget.ExpandableListView: boolean performItemClick(android.view.View,int,long)> -> _NONE_
<java.io.PrintStream: boolean checkError()> -> _NONE_
<android.util.SparseArray: void remove(int)> -> _NONE_
<android.view.animation.Animation: void startNow()> -> _NONE_
<java.security.spec.ECParameterSpec: int getCofactor()> -> _SOURCE_
<android.widget.TextView: void addTextChangedListener(android.text.TextWatcher)> -> _NONE_
<android.webkit.WebSettings$TextSize: android.webkit.WebSettings$TextSize valueOf(java.lang.String)> -> _NONE_
<android.animation.PropertyValuesHolder: java.lang.String toString()> -> _NONE_
<android.content.pm.ServiceInfo: java.lang.String toString()> -> _NONE_
<android.view.KeyEvent: android.view.KeyCharacterMap getKeyCharacterMap()> -> _SOURCE_
<android.app.Fragment: void onActivityCreated(android.os.Bundle)> -> _NONE_
<android.animation.ValueAnimator: long getCurrentPlayTime()> -> _SOURCE_
<android.view.View: void setAlpha(float)> -> _SINK_ 
<java.lang.Class: boolean isArray()> -> _NONE_
<android.util.Property: void <init>(java.lang.Class,java.lang.String)> -> _NONE_
<java.util.Date: void <init>()> -> _NONE_
<android.bluetooth.BluetoothGatt: java.util.List getServices()> -> _SOURCE_
<android.os.ParcelFileDescriptor: java.lang.String toString()> -> _NONE_
<android.graphics.Typeface: void finalize()> -> _NONE_
<java.lang.Class: java.lang.Class forName(java.lang.String)> -> _SINK_ 
<android.accessibilityservice.AccessibilityService: android.content.ComponentName startService(android.content.Intent)> android.permission.MANAGE_APP_TOKENS -> _SINK_ 
<android.view.MotionEvent: float getHistoricalOrientation(int,int)> -> _SOURCE_
<android.bluetooth.BluetoothSocket: android.bluetooth.BluetoothDevice getRemoteDevice()> -> _SOURCE_
<android.view.View: boolean canResolveTextDirection()> -> _NONE_
<android.graphics.Region: boolean op(android.graphics.Rect,android.graphics.Region,android.graphics.Region$Op)> -> _NONE_
<android.app.TaskStackBuilder: android.app.PendingIntent getPendingIntent(int,int)> -> _SOURCE_
<java.nio.channels.FileChannel: long read(java.nio.ByteBuffer[])> -> _SOURCE_
<org.apache.http.util.CharArrayBuffer: boolean isEmpty()> -> _NONE_
<android.net.sip.SipAudioCall: void setListener(android.net.sip.SipAudioCall$Listener)> -> _SINK_ 
<java.lang.Character: boolean isUnicodeIdentifierPart(char)> -> _NONE_
<android.view.View: int getSuggestedMinimumHeight()> -> _SOURCE_
<android.text.Layout: float getSpacingAdd()> -> _SOURCE_
<android.view.MotionEvent: float getHistoricalY(int)> -> _SOURCE_
<android.view.ActionProvider: void <init>(android.content.Context)> -> _NONE_
<java.security.cert.CertPath: java.lang.Object writeReplace()> -> _NONE_
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor[] createReliableSocketPair()> -> _NONE_
<android.view.View: int getMeasuredHeightAndState()> -> _SOURCE_
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setListener(android.animation.Animator$AnimatorListener)> -> _SINK_ 
<android.content.ContextWrapper: boolean isRestricted()> -> _NONE_
<android.net.sip.SipSession$Listener: void onCallChangeFailed(android.net.sip.SipSession,int,java.lang.String)> -> _NONE_
<java.math.BigInteger: java.math.BigInteger andNot(java.math.BigInteger)> -> _NONE_
<java.net.URI: java.net.URI resolve(java.net.URI)> -> _NONE_
<java.lang.Float: float floatValue()> -> _NONE_
<android.widget.ListView: void smoothScrollToPosition(int)> -> _NONE_
<android.net.NetworkInfo$DetailedState: void <clinit>()> -> _NONE_
<android.telephony.CellIdentityCdma: int describeContents()> -> _SINK_ 
<java.io.PrintStream: java.io.PrintStream append(java.lang.CharSequence,int,int)> -> _NONE_
<java.math.BigInteger: java.math.BigInteger xor(java.math.BigInteger)> -> _NONE_
<android.print.PrintAttributes: android.print.PrintAttributes$Resolution getResolution()> -> _SOURCE_
<java.nio.channels.spi.AbstractSelector: void close()> -> _NONE_
<android.app.ActivityManager$RunningAppProcessInfo: int describeContents()> -> _SINK_ 
<java.net.URLConnection: java.lang.String getDefaultRequestProperty(java.lang.String)> -> _SOURCE_
<java.lang.Short: short parseShort(java.lang.String)> -> _SINK_ 
<android.graphics.Path: void cubicTo(float,float,float,float,float,float)> -> _NONE_
<java.lang.StringBuffer: java.lang.String toString()> -> _NONE_
<java.lang.ThreadGroup: void stop()> -> _NONE_
<android.content.Intent: java.util.ArrayList getStringArrayListExtra(java.lang.String)> -> _SOURCE_
<java.security.SignatureException: void <init>(java.lang.String,java.lang.Throwable)> -> _NONE_
<android.content.Intent: java.io.Serializable getSerializableExtra(java.lang.String)> -> _SOURCE_
<android.os.Bundle: long getLong(java.lang.String)> -> _SOURCE_
<java.util.Date: void <init>(java.lang.String)> -> _NONE_
<android.widget.TextView: android.text.style.URLSpan[] getUrls()> -> _SOURCE_
<java.net.InetAddress: java.lang.String getHostName()> -> _SOURCE_
<android.graphics.Paint$Join: android.graphics.Paint$Join[] values()> -> _NONE_
<java.util.concurrent.TimeUnit: long toSeconds(long)> -> _NONE_
<android.net.Uri$Builder: android.net.Uri$Builder appendEncodedPath(java.lang.String)> -> _NONE_
<android.webkit.WebViewClient: void onScaleChanged(android.webkit.WebView,float,float)> -> _NONE_
<android.bluetooth.BluetoothAdapter: int getState()> -> _SOURCE_
<android.app.ActivityManager: void getMyMemoryState(android.app.ActivityManager$RunningAppProcessInfo)> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getText()> -> _SOURCE_
<android.content.Intent: java.util.ArrayList getCharSequenceArrayListExtra(java.lang.String)> -> _SOURCE_
<android.content.SyncAdapterType: boolean supportsUploading()> -> _NONE_
<java.io.File: boolean setReadable(boolean)> -> _SINK_ 
<android.widget.ExpandableListView: void setChildIndicator(android.graphics.drawable.Drawable)> -> _SINK_ 
<android.app.Activity: void setIntent(android.content.Intent)> -> _SINK_ 
<android.view.KeyCharacterMap: int getModifierBehavior()> -> _SOURCE_
<android.widget.ExpandableListView: int getPackedPositionChild(long)> -> _SOURCE_
<java.lang.reflect.Field: void setInt(java.lang.Object,int)> -> _SINK_ 
<android.graphics.Matrix: boolean preSkew(float,float,float,float)> -> _NONE_
<android.os.ParcelUuid: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<android.view.ViewTreeObserver: void dispatchOnGlobalLayout()> -> _NONE_
<android.app.Dialog: void onRestoreInstanceState(android.os.Bundle)> -> _NONE_
<java.nio.CharBuffer: java.nio.CharBuffer append(char)> -> _NONE_
<java.nio.CharBuffer: int compareTo(java.nio.CharBuffer)> -> _NONE_
<android.text.style.ImageSpan: void <init>(android.content.Context,android.graphics.Bitmap,int)> -> _NONE_
<android.location.Location: boolean hasAltitude()> -> _NONE_
<android.graphics.Path: void <init>()> -> _NONE_
<android.view.View: int getLabelFor()> -> _SOURCE_
<android.content.ContentProviderClient: android.content.res.AssetFileDescriptor openTypedAssetFileDescriptor(android.net.Uri,java.lang.String,android.os.Bundle,android.os.CancellationSignal)> -> _SINK_ 
<java.lang.Enum: java.lang.Class getDeclaringClass()> -> _SOURCE_
<android.graphics.Paint: android.graphics.Rasterizer setRasterizer(android.graphics.Rasterizer)> -> _SINK_ 
<android.content.ContentProviderResult: void <clinit>()> -> _NONE_
<android.view.MotionEvent: float getHistoricalX(int,int)> -> _SOURCE_
<android.telephony.CellIdentityCdma: int hashCode()> -> _SINK_ 
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap)> -> _SINK_ 
<android.location.Location: double getLongitude()> -> _SOURCE_
<android.app.Activity: boolean isChild()> -> _NONE_
<java.lang.Package: boolean isSealed(java.net.URL)> -> _NONE_
<java.lang.AbstractStringBuilder: int codePointBefore(int)> -> _NONE_
<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])> -> _SINK_ 
<android.database.sqlite.SQLiteClosable: void <init>()> -> _NONE_
<android.content.ContextWrapper: android.os.Looper getMainLooper()> -> _SOURCE_
<android.os.Handler: android.os.Message obtainMessage(int,int,int,java.lang.Object)> -> _SOURCE_
<android.webkit.WebSettings$TextSize: void <clinit>()> -> _NONE_
<android.view.View: int getTextDirection()> -> _SOURCE_
<android.app.backup.BackupDataInputStream: int read(byte[])> -> _SINK_ 
<android.widget.AbsListView: float getBottomFadingEdgeStrength()> -> _SOURCE_
<android.location.LocationManager: void requestSingleUpdate(android.location.Criteria,android.app.PendingIntent)> -> _NONE_
<java.lang.ClassLoader: java.util.Enumeration findResources(java.lang.String)> -> _NONE_
<android.text.style.DynamicDrawableSpan: int getSize(android.graphics.Paint,java.lang.CharSequence,int,int,android.graphics.Paint$FontMetricsInt)> -> _SOURCE_
<android.view.animation.LayoutAnimationController: void start()> -> _NONE_
<android.util.DisplayMetrics: int hashCode()> -> _SINK_ 
<android.os.Parcel: double readDouble()> -> _NONE_
<java.lang.Integer: int reverseBytes(int)> -> _SINK_ 
<android.view.View: boolean onTouchEvent(android.view.MotionEvent)> -> _NONE_
<android.location.Location: void <init>(java.lang.String)> -> _NONE_
<java.net.URLConnection: java.net.URL getURL()> -> _SOURCE_
<android.nfc.NdefRecord: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<android.view.accessibility.AccessibilityNodeInfo: void setText(java.lang.CharSequence)> -> _SINK_ 
<java.nio.charset.CharsetDecoder: void implOnMalformedInput(java.nio.charset.CodingErrorAction)> -> _NONE_
<android.animation.LayoutTransition: void removeChild(android.view.ViewGroup,android.view.View)> -> _NONE_
<android.app.Activity: void onChildTitleChanged(android.app.Activity,java.lang.CharSequence)> -> _NONE_
<android.content.ClipData$Item: java.lang.String toString()> -> _NONE_
<java.lang.Thread: void <init>(java.lang.String)> -> _NONE_
<android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,int,android.view.MotionEvent$PointerProperties[],android.view.MotionEvent$PointerCoords[],int,int,float,float,int,int,int,int)> -> _SINK_ 
<java.nio.channels.spi.AbstractSelectableChannel: java.nio.channels.SelectionKey keyFor(java.nio.channels.Selector)> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getParent()> -> _SOURCE_
<java.io.PrintStream: void println(long)> -> _NONE_
<android.app.Activity: boolean showDialog(int,android.os.Bundle)> -> _NONE_
<android.app.Activity: boolean startActivityIfNeeded(android.content.Intent,int)> -> _SINK_ 
<android.os.Bundle: void <init>(java.lang.ClassLoader)> -> _NONE_
<android.app.LocalActivityManager: void <init>(android.app.Activity,boolean)> -> _NONE_
<android.app.Fragment$SavedState: void <clinit>()> -> _NONE_
<java.lang.Package: java.lang.String getName()> -> _SOURCE_
<android.view.MotionEvent$PointerCoords: void clear()> -> _NONE_
<android.app.Dialog: void onCreate(android.os.Bundle)> -> _NONE_
<org.apache.http.util.ByteArrayBuffer: boolean isFull()> -> _NONE_
<android.util.SparseBooleanArray: void clear()> -> _NONE_
<android.view.accessibility.AccessibilityNodeInfo: boolean isDismissable()> -> _NONE_
<android.os.Parcel: void writeTypedList(java.util.List)> -> _NONE_
<android.widget.RemoteViews: void setRemoteAdapter(int,android.content.Intent)> -> _SINK_ 
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator translationXBy(float)> -> _NONE_
<android.text.Layout: void increaseWidthTo(int)> -> _NONE_
<android.view.accessibility.AccessibilityEvent: void appendRecord(android.view.accessibility.AccessibilityRecord)> -> _NONE_
<java.lang.ArrayIndexOutOfBoundsException: void <init>(int)> -> _NONE_
<java.lang.Character: boolean isValidCodePoint(int)> -> _NONE_
<java.io.PrintWriter: void println(char)> -> _NONE_
<java.nio.charset.CharsetDecoder: java.nio.charset.CodingErrorAction unmappableCharacterAction()> -> _NONE_
<android.content.res.TypedArray: java.lang.CharSequence getText(int)> -> _SOURCE_
<android.app.Activity: boolean onNavigateUp()> -> _NONE_
<java.lang.Class: java.lang.Object[] getEnumConstants()> -> _SOURCE_
<java.io.PrintStream: void <init>(java.io.OutputStream,boolean)> -> _NONE_
<android.os.Parcel: void readDoubleArray(double[])> -> _NONE_
<android.net.http.SslError: void <init>(int,android.net.http.SslCertificate,java.lang.String)> -> _NONE_
<java.lang.Thread: void checkAccess()> -> _NONE_
<android.graphics.Rect: boolean setIntersect(android.graphics.Rect,android.graphics.Rect)> -> _SINK_ 
<java.lang.AbstractStringBuilder: void trimToSize()> -> _NONE_
<android.view.ViewTreeObserver: void removeOnGlobalLayoutListener(android.view.ViewTreeObserver$OnGlobalLayoutListener)> -> _NONE_
<android.animation.ValueAnimator: android.animation.ValueAnimator ofPropertyValuesHolder(android.animation.PropertyValuesHolder[])> -> _NONE_
<android.widget.RemoteViews: void setRemoteAdapter(int,int,android.content.Intent)> -> _SINK_ 
<android.app.Application: void unregisterActivityLifecycleCallbacks(android.app.Application$ActivityLifecycleCallbacks)> -> _NONE_
<android.text.style.ImageSpan: android.graphics.drawable.Drawable getDrawable()> -> _SOURCE_
<android.view.MotionEvent: android.view.MotionEvent obtainNoHistory(android.view.MotionEvent)> -> _SINK_ 
<java.lang.Character: boolean isLetter(int)> -> _NONE_
<android.telephony.ServiceState: java.lang.String toString()> -> _NONE_
<java.lang.reflect.AccessibleObject: java.lang.annotation.Annotation[] getDeclaredAnnotations()> -> _SOURCE_
<android.app.Dialog: boolean onPrepareOptionsMenu(android.view.Menu)> -> _NONE_
<android.provider.Settings$Secure: void setLocationProviderEnabled(android.content.ContentResolver,java.lang.String,boolean)> -> _SINK_ 
<android.content.Loader: void registerListener(int,android.content.Loader$OnLoadCompleteListener)> -> _NONE_
<android.widget.AbsListView: void requestDisallowInterceptTouchEvent(boolean)> -> _NONE_
<android.view.ViewGroup: void setChildrenDrawingOrderEnabled(boolean)> -> _NONE_
<android.content.IntentFilter: java.util.Iterator categoriesIterator()> -> _NONE_
<android.os.ParcelFileDescriptor: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<android.graphics.Region: boolean op(android.graphics.Region,android.graphics.Region$Op)> -> _NONE_
<android.view.View: int getNextFocusUpId()> -> _SOURCE_
<java.io.InputStream: boolean markSupported()> -> _NONE_
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,android.net.Uri,android.view.SurfaceHolder)> -> _SOURCE_
<org.apache.http.util.ByteArrayBuffer: void clear()> -> _NONE_
<android.animation.Animator: void removeListener(android.animation.Animator$AnimatorListener)> -> _NONE_
<java.lang.Integer: java.lang.Integer valueOf(java.lang.String)> -> _SINK_ 
<android.net.wifi.WifiManager$WifiLock: void release()> -> _NONE_
<android.view.View: void onOverScrolled(int,int,boolean,boolean)> -> _NONE_
<android.graphics.Paint: void getTextPath(java.lang.String,int,int,float,float,android.graphics.Path)> -> _SOURCE_
<org.apache.http.ProtocolVersion: boolean greaterEquals(org.apache.http.ProtocolVersion)> -> _NONE_
<android.webkit.WebView: boolean onKeyMultiple(int,int,android.view.KeyEvent)> -> _NONE_
<android.view.View: boolean dispatchKeyEventPreIme(android.view.KeyEvent)> -> _NONE_
<java.lang.Enum: int ordinal()> -> _NONE_
<android.app.Dialog: void closeOptionsMenu()> -> _NONE_
<android.view.Window: android.view.WindowManager$LayoutParams getAttributes()> -> _SOURCE_
<android.content.ContentResolver: android.content.ContentProviderClient acquireContentProviderClient(android.net.Uri)> -> _SOURCE_
<java.net.URLConnection: void setDefaultRequestProperty(java.lang.String,java.lang.String)> -> _NONE_
<java.lang.ReflectiveOperationException: void <init>(java.lang.String,java.lang.Throwable)> -> _NONE_
<android.media.MediaPlayer: void setOnSeekCompleteListener(android.media.MediaPlayer$OnSeekCompleteListener)> -> _SINK_ 
<java.lang.Boolean: int compareTo(java.lang.Boolean)> -> _SINK_ 
<android.content.ContextWrapper: void setWallpaper(android.graphics.Bitmap)> -> _SINK_ 
<android.webkit.WebSettings$PluginState: void <clinit>()> -> _NONE_
<java.util.HashMap: java.lang.Object clone()> -> _NONE_
<android.view.ViewGroup$MarginLayoutParams: void <init>(android.view.ViewGroup$LayoutParams)> -> _NONE_
<java.io.OutputStream: void flush()> -> _NONE_
<android.widget.TextView: void setShadowLayer(float,float,float,int)> -> _SINK_ 
<java.lang.Thread: void <init>()> -> _NONE_
<android.hardware.Camera$Parameters: void setPreviewFormat(int)> -> _SINK_ 
<android.app.Activity: void runOnUiThread(java.lang.Runnable)> -> _NONE_
<android.view.MotionEvent: int getEdgeFlags()> -> _SOURCE_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)> -> _NONE_
<android.widget.RemoteViews: void setProgressBar(int,int,int,boolean)> -> _SINK_ 
<java.io.FileNotFoundException: void <init>()> -> _NONE_
<java.lang.AssertionError: void <init>(long)> -> _NONE_
<android.widget.ExpandableListView: boolean setSelectedChild(int,int,boolean)> -> _SINK_ 
<android.view.View: boolean canResolveLayoutDirection()> -> _NONE_
<java.lang.Integer: int intValue()> -> _SINK_ 
<android.view.KeyEvent$DispatcherState: boolean isTracking(android.view.KeyEvent)> -> _NONE_
<android.net.wifi.WifiInfo: int getNetworkId()> -> _SOURCE_
<java.util.HashMap: int size()> -> _SINK_ 
<android.view.ViewGroup: void offsetDescendantRectToMyCoords(android.view.View,android.graphics.Rect)> -> _NONE_
<android.view.Window: void setCallback(android.view.Window$Callback)> -> _NONE_
<java.util.Locale: java.lang.Object clone()> -> _NONE_
<android.app.Fragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> -> _NONE_
<java.lang.String: int compareTo(java.lang.Object)> -> _SINK_ 
<java.lang.Short: void <init>(java.lang.String)> -> _NONE_
<android.view.accessibility.AccessibilityRecord: int getToIndex()> -> _SOURCE_
<java.nio.DoubleBuffer: int hashCode()> -> _NONE_
<java.lang.Long: java.lang.Long valueOf(long)> -> _SINK_ 
<android.accessibilityservice.AccessibilityServiceInfo: boolean getCanRetrieveWindowContent()> -> _SOURCE_
<java.lang.String: java.lang.String trim()> -> _NONE_
<java.nio.FloatBuffer: int compareTo(java.nio.FloatBuffer)> -> _NONE_
<org.apache.http.util.CharArrayBuffer: void append(char)> -> _NONE_
<android.webkit.WebSettings$ZoomDensity: void <clinit>()> -> _NONE_
<android.view.View: float getLeftFadingEdgeStrength()> -> _SOURCE_
<android.print.PrintDocumentAdapter$LayoutResultCallback: void <init>()> -> _NONE_
<android.database.sqlite.SQLiteStatement: long simpleQueryForLong()> -> _NONE_
<android.view.ActionMode: java.lang.Object getTag()> -> _SOURCE_
<android.net.http.SslCertificate$DName: void <init>(android.net.http.SslCertificate,java.lang.String)> -> _NONE_
<android.content.IntentFilter: int matchData(java.lang.String,java.lang.String,android.net.Uri)> -> _SINK_ 
<android.webkit.WebView: void loadUrl(java.lang.String)> -> _NONE_
<java.net.URLConnection: void setAllowUserInteraction(boolean)> -> _NONE_
<android.view.View: boolean fitSystemWindows(android.graphics.Rect)> -> _NONE_
<android.nfc.tech.NfcB: android.nfc.Tag getTag()> -> _SOURCE_
<android.location.LocationManager: void removeProximityAlert(android.app.PendingIntent)> -> _NONE_
<android.view.accessibility.AccessibilityRecord: int getItemCount()> -> _SOURCE_
<android.content.Loader: void deliverResult(java.lang.Object)> -> _NONE_
<java.nio.channels.SelectableChannel: java.nio.channels.SelectionKey register(java.nio.channels.Selector,int)> -> _SOURCE_
<android.widget.TextView: void onVisibilityChanged(android.view.View,int)> -> _NONE_
<android.graphics.Canvas: void <init>(android.graphics.Bitmap)> -> _NONE_
<android.app.Dialog: void cancel()> -> _NONE_
<android.widget.RemoteViews: void setEmptyView(int,int)> -> _SINK_ 
<android.webkit.WebSettings: void setBlockNetworkLoads(boolean)> -> _NONE_
<android.app.Activity: boolean isTaskRoot()> -> _NONE_
<android.app.Fragment: void registerForContextMenu(android.view.View)> -> _NONE_
<java.io.FileNotFoundException: void <init>(java.lang.String)> -> _NONE_
<android.animation.LayoutTransition: boolean isTransitionTypeEnabled(int)> -> _NONE_
<android.os.UserHandle: void <init>(android.os.Parcel)> -> _NONE_
<android.content.SyncRequest: int describeContents()> -> _SINK_ 
<android.view.inputmethod.EditorInfo: void <clinit>()> -> _NONE_
<android.graphics.drawable.Drawable: void <init>()> -> _NONE_
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator rotationBy(float)> -> _NONE_
<java.lang.Byte: void <clinit>()> -> _NONE_
<java.lang.Character: char lowSurrogate(int)> -> _SINK_ 
<android.widget.AbsListView: void dispatchSetPressed(boolean)> -> _NONE_
<java.nio.channels.ServerSocketChannel: int validOps()> -> _NONE_
<android.net.wifi.WifiManager: boolean reconnect()> android.permission.CHANGE_WIFI_STATE -> _NONE_
<android.content.IntentSender: void <clinit>()> -> _NONE_
<android.widget.TextView: android.graphics.drawable.Drawable[] getCompoundDrawablesRelative()> -> _SOURCE_
<android.view.ActionProvider: boolean hasSubMenu()> -> _NONE_
<android.webkit.ConsoleMessage: java.lang.String sourceId()> -> _NONE_
<android.graphics.RectF: void <init>()> -> _NONE_
<android.app.Activity: int getChangingConfigurations()> -> _SOURCE_
<android.widget.TextView: float getTextSize()> -> _SOURCE_
<java.net.Socket: java.io.InputStream getInputStream()> -> _SOURCE_
<android.database.sqlite.SQLiteStatement: java.lang.String toString()> -> _NONE_
<android.app.Activity: void recreate()> -> _NONE_
<java.lang.StackTraceElement: boolean isNativeMethod()> -> _NONE_
<android.graphics.RectF: float centerX()> -> _NONE_
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)> -> _SINK_ 
<java.util.BitSet: void set(int,int)> -> _SINK_ 
<java.lang.Enum: java.lang.String toString()> -> _NONE_
<java.lang.Byte: int intValue()> -> _SINK_ 
<android.app.Fragment: void startActivity(android.content.Intent,android.os.Bundle)> -> _SINK_ 
<android.net.sip.SipSession$Listener: void onRinging(android.net.sip.SipSession,android.net.sip.SipProfile,java.lang.String)> -> _NONE_
<java.lang.Package: boolean isAnnotationPresent(java.lang.Class)> -> _NONE_
<java.io.FileOutputStream: void write(byte[],int,int)> -> _NONE_
<java.lang.Character: java.lang.String toString()> -> _NONE_
<android.view.ViewGroup: android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)> -> _NONE_
<java.nio.channels.DatagramChannel: void <init>(java.nio.channels.spi.SelectorProvider)> -> _NONE_
<android.view.accessibility.AccessibilityNodeInfo: int getTextSelectionStart()> -> _SOURCE_
<java.nio.IntBuffer: int compareTo(java.nio.IntBuffer)> -> _NONE_
<java.net.Socket: java.net.SocketAddress getLocalSocketAddress()> -> _SOURCE_
<android.graphics.Rect: int describeContents()> -> _SINK_ 
<android.print.PrintAttributes$Resolution: boolean equals(java.lang.Object)> -> _NONE_
<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPreviewSize()> -> _SOURCE_
<java.net.ServerSocket: void setReuseAddress(boolean)> -> _SINK_ 
<java.net.SocketImpl: boolean supportsUrgentData()> -> _NONE_
<android.content.ContentProviderOperation$Builder: android.content.ContentProviderOperation$Builder withSelection(java.lang.String,java.lang.String[])> -> _NONE_
<android.provider.Settings$Secure: boolean putString(android.content.ContentResolver,java.lang.String,java.lang.String)> -> _NONE_
<android.content.Intent: android.content.Intent setAction(java.lang.String)> -> _SINK_ 
<java.util.Date: void setTime(long)> -> _SINK_ 
<android.os.ParcelFileDescriptor: void checkError()> -> _NONE_
<java.lang.ClassLoader: java.lang.Class findSystemClass(java.lang.String)> -> _NONE_
<android.view.MotionEvent: float getSize()> -> _SOURCE_
<android.widget.ListView: void onSizeChanged(int,int,int,int)> -> _NONE_
<java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler getUncaughtExceptionHandler()> -> _SOURCE_
<android.view.View: boolean isPaddingOffsetRequired()> -> _NONE_
<android.graphics.Canvas: int getMaximumBitmapHeight()> -> _SOURCE_
<android.content.SyncAdapterType: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<android.content.Intent: android.content.Intent cloneFilter()> -> _NONE_
<android.content.ContextWrapper: int checkCallingUriPermission(android.net.Uri,int)> -> _SINK_ 
<android.os.WorkSource: void <init>(android.os.WorkSource)> -> _NONE_
<java.lang.Throwable: java.lang.String toString()> -> _NONE_
<android.graphics.Bitmap$Config: android.graphics.Bitmap$Config[] values()> -> _NONE_
<java.lang.StringBuffer: int indexOf(java.lang.String,int)> -> _SINK_ 
<android.accounts.OperationCanceledException: void <init>(java.lang.Throwable)> -> _NONE_
<android.os.Handler: boolean hasMessages(int,java.lang.Object)> -> _NONE_
<android.app.Activity: void setRequestedOrientation(int)> -> _SINK_ 
<java.net.Socket: boolean isConnected()> -> _NONE_
<android.webkit.WebView: boolean overlayHorizontalScrollbar()> -> _NONE_
<android.content.Intent: java.util.Set getCategories()> -> _SOURCE_
<java.net.URLConnection: boolean getUseCaches()> -> _SOURCE_
<java.io.File: boolean isFile()> -> _NONE_
<java.util.Date: int compareTo(java.util.Date)> -> _SINK_ 
<android.app.Fragment: void onOptionsMenuClosed(android.view.Menu)> -> _NONE_
<android.accessibilityservice.AccessibilityServiceInfo: java.lang.String flagToString(int)> -> _NONE_
<android.widget.TextView: android.os.Parcelable onSaveInstanceState()> -> _NONE_
<android.net.wifi.WifiManager: boolean startScan()> -> _NONE_
<android.app.ActivityManager$MemoryInfo: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<android.webkit.WebSettings: java.lang.String getStandardFontFamily()> -> _SOURCE_
<android.net.wifi.WifiInfo: int getRssi()> -> _SOURCE_
<android.nfc.tech.BasicTagTechnology: void connect()> -> _NONE_
<android.os.PowerManager$WakeLock: void <init>(android.os.PowerManager)> -> _NONE_
<android.widget.AdapterView: void setOnClickListener(android.view.View$OnClickListener)> -> _NONE_
<java.lang.StringBuilder: int capacity()> -> _SINK_ 
<android.view.Window: void setFlags(int,int)> -> _NONE_
<java.lang.StackTraceElement: boolean equals(java.lang.Object)> -> _NONE_
<android.hardware.Camera$Parameters: void setMeteringAreas(java.util.List)> -> _SINK_ 
<java.lang.StringBuffer: int lastIndexOf(java.lang.String)> -> _SINK_ 
<java.lang.StringBuffer: java.lang.StringBuffer append(double)> -> _NONE_
<android.os.Parcel: void setDataPosition(int)> -> _SINK_ 
<java.util.UUID: java.util.UUID fromString(java.lang.String)> -> _SINK_ 
<android.view.View: void setFocusableInTouchMode(boolean)> -> _SINK_ 
<android.view.ViewGroup: void setOnHierarchyChangeListener(android.view.ViewGroup$OnHierarchyChangeListener)> -> _NONE_
<android.webkit.WebView: boolean showFindDialog(java.lang.String,boolean)> -> _NONE_
<android.webkit.WebView: void onPause()> -> _NONE_
<android.net.sip.SipAudioCall$Listener: void <init>()> -> _NONE_
<android.webkit.WebView: void setHorizontalScrollbarOverlay(boolean)> -> _SINK_ 
<android.telephony.CellSignalStrengthCdma: void <clinit>()> -> _NONE_
<android.view.View: boolean getLocalVisibleRect(android.graphics.Rect)> -> _SOURCE_
<java.util.Locale: java.lang.String[] getISOLanguages()> -> _SOURCE_
<android.widget.AbsListView: boolean showContextMenuForChild(android.view.View)> -> _NONE_
<org.apache.http.protocol.DefaultedHttpContext: org.apache.http.protocol.HttpContext getDefaults()> -> _SOURCE_
<java.lang.annotation.ElementType: void <clinit>()> -> _NONE_
<android.database.sqlite.SQLiteClosable: void releaseReference()> -> _NONE_
<org.apache.http.message.ParserCursor: void <init>(int,int)> -> _NONE_
<android.view.View: android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo()> -> _NONE_
<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)> -> _NONE_
<android.content.Intent: java.lang.String[] getStringArrayExtra(java.lang.String)> -> _SOURCE_
<java.net.URLConnection: void setRequestProperty(java.lang.String,java.lang.String)> -> _NONE_
<android.view.ViewGroup: boolean hasFocus()> -> _NONE_
<android.app.Activity: void onPrepareDialog(int,android.app.Dialog,android.os.Bundle)> -> _NONE_
<android.app.Fragment: void onInflate(android.app.Activity,android.util.AttributeSet,android.os.Bundle)> -> _NONE_
<java.math.BigInteger: int hashCode()> -> _SINK_ 
<android.graphics.Canvas: void drawRect(float,float,float,float,android.graphics.Paint)> -> _NONE_
<android.view.View: float getScaleY()> -> _SOURCE_
<java.nio.channels.SelectionKey: void <init>()> -> _NONE_
<android.content.Intent: android.content.Intent getSelector()> -> _SOURCE_
<android.view.LayoutInflater: android.view.LayoutInflater from(android.content.Context)> -> _NONE_
<java.lang.Boolean: int hashCode()> -> _SINK_ 
<android.hardware.Camera$Parameters: java.lang.String getWhiteBalance()> -> _SOURCE_
<android.widget.TextView: int getExtendedPaddingBottom()> -> _SOURCE_
<java.lang.Thread$State: java.lang.Thread$State[] values()> -> _NONE_
<android.content.IntentFilter: void addDataAuthority(java.lang.String,java.lang.String)> -> _NONE_
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator withStartAction(java.lang.Runnable)> -> _NONE_
<android.database.sqlite.SQLiteDatabase: java.lang.String findEditTable(java.lang.String)> -> _SINK_ 
<android.view.WindowManager$LayoutParams: void setTitle(java.lang.CharSequence)> -> _SINK_ 
<android.telephony.TelephonyManager: java.lang.String getNetworkCountryIso()> -> _SOURCE_
<java.security.spec.ECPoint: java.math.BigInteger getAffineX()> -> _SOURCE_
<android.view.ViewGroup: void onAnimationStart()> -> _NONE_
<android.content.res.Configuration: boolean needNewResources(int,int)> -> _NONE_
<android.util.Log: java.lang.String getStackTraceString(java.lang.Throwable)> -> _SOURCE_
<java.util.BitSet: int hashCode()> -> _SINK_ 
<android.content.res.Configuration: int diff(android.content.res.Configuration)> -> _SINK_ 
<android.accounts.AccountManager: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)> android.permission.AUTHENTICATE_ACCOUNTS -> _SOURCE_
<android.util.SparseBooleanArray: boolean valueAt(int)> -> _NONE_
<android.telephony.CellSignalStrengthCdma: int getEvdoSnr()> -> _SOURCE_
<android.view.inputmethod.CorrectionInfo: int getOffset()> -> _SOURCE_
<java.io.Writer: void write(char[])> -> _NONE_
<java.net.Socket: void setKeepAlive(boolean)> -> _SINK_ 
<android.view.animation.LayoutAnimationController: void <init>(android.content.Context,android.util.AttributeSet)> -> _NONE_
<android.content.Intent: android.os.Bundle getBundleExtra(java.lang.String)> -> _SOURCE_
<android.location.Location: void distanceBetween(double,double,double,double,float[])> -> _NONE_
<android.bluetooth.BluetoothGattCharacteristic: android.bluetooth.BluetoothGattService getService()> -> _SOURCE_
<android.graphics.Region: void <init>(android.graphics.Region)> -> _NONE_
<android.view.MotionEvent: java.lang.String actionToString(int)> -> _SINK_ 
<android.view.accessibility.AccessibilityNodeInfo: void setCollectionItemInfo(android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo)> -> _SINK_ 
<android.content.ContentProvider: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String,android.os.CancellationSignal)> -> _NONE_
<android.telephony.ServiceState: void setStateOff()> -> _SINK_ 
<android.os.PowerManager$WakeLock: void acquire()> -> _NONE_
<android.content.Intent: java.lang.String getPackage()> -> _SOURCE_
<android.view.InputDevice$MotionRange: float getFuzz()> -> _SOURCE_
<android.view.View: boolean performHapticFeedback(int)> -> _NONE_
<android.app.Fragment: void onInflate(android.util.AttributeSet,android.os.Bundle)> -> _NONE_
<android.content.IntentFilter: void <init>()> -> _NONE_
<java.io.PrintWriter: void println(float)> -> _NONE_
<android.view.accessibility.AccessibilityRecord: int getScrollY()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: void setCheckable(boolean)> -> _SINK_ 
<java.lang.InstantiationError: void <init>(java.lang.String)> -> _NONE_
<java.util.Random: void <init>(long)> -> _NONE_
<android.database.sqlite.SQLiteStatement: int executeUpdateDelete()> -> _SINK_ 
<android.content.Intent: java.util.ArrayList getIntegerArrayListExtra(java.lang.String)> -> _SOURCE_
<org.apache.http.ProtocolVersion: java.lang.String getProtocol()> -> _SOURCE_
<java.nio.DoubleBuffer: java.nio.DoubleBuffer wrap(double[])> -> _NONE_
<android.bluetooth.BluetoothGattCharacteristic: java.lang.String getStringValue(int)> -> _SOURCE_
<java.util.AbstractCollection: boolean addAll(java.util.Collection)> -> _NONE_
<android.view.ViewGroup: boolean showContextMenuForChild(android.view.View)> -> _NONE_
<android.widget.TextView: float getRightFadingEdgeStrength()> -> _SOURCE_
<java.io.PrintWriter: void <init>(java.io.File)> -> _NONE_
<android.content.Intent: void setSelector(android.content.Intent)> -> _SINK_ 
<android.view.View: boolean requestFocus(int)> -> _NONE_
<android.content.pm.FeatureInfo: void <clinit>()> -> _NONE_
<android.widget.AdapterView: android.widget.AdapterView$OnItemLongClickListener getOnItemLongClickListener()> -> _SOURCE_
<android.animation.Keyframe: boolean hasValue()> -> _NONE_
<android.view.View: float getTranslationX()> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getVoiceMailAlphaTag()> -> _SOURCE_
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator translationY(float)> -> _NONE_
<java.nio.channels.spi.AbstractSelector: void <init>(java.nio.channels.spi.SelectorProvider)> -> _NONE_
<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)> -> _SOURCE_
<android.hardware.Camera: android.hardware.Camera open(int)> -> _SINK_ 
<java.lang.Float: boolean equals(java.lang.Object)> -> _NONE_
<java.util.Locale: java.lang.String getDisplayLanguage()> -> _SOURCE_
<java.lang.Thread: boolean holdsLock(java.lang.Object)> -> _NONE_
<android.hardware.Camera$Parameters: void setFocusAreas(java.util.List)> -> _SINK_ 
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator y(float)> -> _NONE_
<android.content.IntentFilter: int countCategories()> -> _SINK_ 
<android.print.PrintAttributes$Margins: int getRightMils()> -> _SOURCE_
<android.telephony.CellIdentityCdma: void <init>()> -> _NONE_
<java.lang.Character: boolean isLowerCase(char)> -> _NONE_
<android.widget.TextView: int getMinHeight()> -> _SOURCE_
<android.widget.TextView: android.text.Editable getEditableText()> -> _SOURCE_
<org.xmlpull.v1.XmlPullParserException: int getColumnNumber()> -> _SOURCE_
<android.webkit.WebView: void findAllAsync(java.lang.String)> -> _NONE_
<java.util.Random: long nextLong()> -> _NONE_
<java.lang.Throwable: void <init>()> -> _NONE_
<java.nio.channels.FileLock: java.nio.channels.FileChannel channel()> -> _NONE_
<android.app.Dialog: void setFeatureDrawable(int,android.graphics.drawable.Drawable)> -> _SINK_ 
<android.content.res.AssetManager: void finalize()> -> _NONE_
<android.view.View: int getPaddingBottom()> -> _SOURCE_
<android.content.ContentProvider: void setWritePermission(java.lang.String)> -> _NONE_
<android.view.ViewGroup: void detachViewFromParent(android.view.View)> -> _NONE_
<android.os.Bundle: short getShort(java.lang.String,short)> -> _SOURCE_
<android.content.res.TypedArray: java.lang.String getString(int)> -> _SOURCE_
<java.nio.charset.Charset: java.util.SortedMap availableCharsets()> -> _NONE_
<android.view.ViewGroup: void detachViewsFromParent(int,int)> -> _NONE_
<java.util.Date: void <init>(long)> -> _NONE_
<android.widget.ListView: void setSelectionAfterHeaderView()> -> _SINK_ 
<android.content.res.TypedArray: boolean hasValue(int)> -> _NONE_
<android.net.sip.SipSession: void endCall()> -> _NONE_
<java.lang.Integer: java.lang.String toString(int,int)> -> _SINK_ 
<java.lang.NoClassDefFoundError: void <init>()> -> _NONE_
<android.widget.AbsListView: void smoothScrollToPositionFromTop(int,int,int)> -> _NONE_
<android.net.sip.SipSession: void answerCall(java.lang.String,int)> -> _NONE_
<java.io.InputStream: void close()> -> _NONE_
<android.util.SparseArray: android.util.SparseArray clone()> -> _NONE_
<android.view.InputDevice$MotionRange: int getAxis()> -> _SOURCE_
<android.graphics.ColorFilter: void <init>()> -> _NONE_
<android.graphics.Bitmap: boolean isMutable()> -> _NONE_
<android.view.View: boolean isEnabled()> -> _NONE_
<java.io.File: boolean exists()> -> _NONE_
<android.view.inputmethod.EditorInfo: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<android.view.accessibility.AccessibilityNodeProvider: android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(int)> -> _NONE_
<java.nio.channels.SocketChannel: java.nio.channels.SocketChannel open(java.net.SocketAddress)> -> _NONE_
<android.os.Debug$MemoryInfo: int getTotalSharedDirty()> -> _SOURCE_
<android.net.wifi.WifiManager: android.net.wifi.WifiManager$WifiLock createWifiLock(int,java.lang.String)> -> _SOURCE_
<java.net.MalformedURLException: void <init>(java.lang.String)> -> _NONE_
<android.media.MediaPlayer: void stop()> android.permission.WAKE_LOCK -> _NONE_
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.app.PendingIntent)> -> _NONE_
<android.media.MediaFormat: android.media.MediaFormat createSubtitleFormat(java.lang.String,java.lang.String)> -> _SINK_ 
<android.animation.ValueAnimator: android.animation.ValueAnimator ofObject(android.animation.TypeEvaluator,java.lang.Object[])> -> _NONE_
<android.view.MotionEvent: float getHistoricalToolMajor(int)> -> _SOURCE_
<android.widget.TextView: int getBottomPaddingOffset()> -> _SOURCE_
<android.app.Dialog: void onActionModeStarted(android.view.ActionMode)> -> _NONE_
<java.util.Date: void setMonth(int)> -> _SINK_ 
<java.lang.Float: int compareTo(java.lang.Float)> -> _SINK_ 
<java.nio.CharBuffer: int length()> -> _NONE_
<java.io.PrintStream: void println(char[])> -> _NONE_
<android.view.View: android.view.KeyEvent$DispatcherState getKeyDispatcherState()> -> _SOURCE_
<java.lang.Character: boolean isLowSurrogate(char)> -> _NONE_
<android.os.Handler: java.lang.String toString()> -> _NONE_
<android.content.pm.PackageItemInfo: android.content.res.XmlResourceParser loadXmlMetaData(android.content.pm.PackageManager,java.lang.String)> -> _NONE_
<java.lang.IllegalArgumentException: void <init>()> -> _NONE_
<android.view.View: void setNextFocusLeftId(int)> -> _SINK_ 
<android.os.Looper: android.os.MessageQueue myQueue()> -> _NONE_
<java.net.URI: java.net.URI resolve(java.lang.String)> -> _NONE_
<android.net.Uri$Builder: android.net.Uri$Builder path(java.lang.String)> -> _NONE_
<android.app.Application: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)> android.permission.MANAGE_APP_TOKENS -> _SINK_ 
<java.net.ServerSocket: void setPerformancePreferences(int,int,int)> -> _SINK_ 
<android.location.Criteria: int getHorizontalAccuracy()> -> _SOURCE_
<java.lang.VirtualMachineError: void <init>()> -> _NONE_
<android.widget.AdapterView: void removeViewAt(int)> -> _NONE_
<android.app.Dialog: void onBackPressed()> -> _NONE_
<android.telephony.CellSignalStrengthCdma: int getCdmaLevel()> -> _SOURCE_
<android.net.Uri$Builder: android.net.Uri$Builder clearQuery()> -> _NONE_
<android.telephony.CellSignalStrengthCdma: int describeContents()> -> _SINK_ 
<java.lang.String: byte[] getBytes(java.lang.String)> -> _SOURCE_
<android.graphics.Picture: void finalize()> -> _NONE_
<android.content.ContextWrapper: boolean deleteDatabase(java.lang.String)> -> _NONE_
<android.net.http.SslCertificate: android.net.http.SslCertificate$DName getIssuedTo()> -> _SOURCE_
<java.nio.ByteBuffer: int hashCode()> -> _NONE_
<android.net.wifi.WifiEnterpriseConfig: int describeContents()> -> _SINK_ 
<java.util.AbstractCollection: java.lang.String toString()> -> _NONE_
<android.graphics.RectF: void <init>(android.graphics.Rect)> -> _NONE_
<android.provider.ContactsContract$ProfileSyncState: byte[] get(android.content.ContentProviderClient,android.accounts.Account)> android.permission.READ_CONTACTS android.permission.WRITE_CONTACTS android.permission.READ_SOCIAL_STREAM -> _SOURCE_
<android.accounts.AuthenticatorDescription: android.accounts.AuthenticatorDescription newKey(java.lang.String)> -> _SINK_ 
<android.view.accessibility.AccessibilityNodeInfo$CollectionInfo: android.view.accessibility.AccessibilityNodeInfo$CollectionInfo obtain(int,int,boolean)> -> _SINK_ 
<android.webkit.WebSettings: void setDisplayZoomControls(boolean)> -> _NONE_
<android.net.sip.SipManager: android.net.sip.SipAudioCall makeAudioCall(android.net.sip.SipProfile,android.net.sip.SipProfile,android.net.sip.SipAudioCall$Listener,int)> -> _SOURCE_
<android.webkit.WebView: void loadDataWithBaseURL(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _NONE_
<android.graphics.Bitmap: int getWidth()> -> _SOURCE_
<android.app.backup.BackupDataInputStream: java.lang.String getKey()> -> _SOURCE_
<android.os.Bundle: float[] getFloatArray(java.lang.String)> -> _SOURCE_
<android.content.Loader: void forceLoad()> -> _NONE_
<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[])> -> _SOURCE_
<java.lang.ref.Reference: java.lang.Object get()> -> _SOURCE_
<java.nio.MappedByteBuffer: java.nio.MappedByteBuffer load()> -> _NONE_
<android.view.KeyEvent: void <init>(long,java.lang.String,int,int)> -> _NONE_
<java.io.PrintStream: void println(char)> -> _NONE_
<android.bluetooth.BluetoothGatt: boolean readCharacteristic(android.bluetooth.BluetoothGattCharacteristic)> -> _NONE_
<android.view.ViewGroup: android.view.ActionMode startActionModeForChild(android.view.View,android.view.ActionMode$Callback)> -> _NONE_
<android.nfc.NfcAdapter: void setNdefPushMessage(android.nfc.NdefMessage,android.app.Activity,android.app.Activity[])> -> _SINK_ 
<android.nfc.tech.IsoDep: android.nfc.Tag getTag()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<android.os.Parcel: void writeTypedArray(android.os.Parcelable[],int)> -> _NONE_
<android.view.ViewGroup$MarginLayoutParams: void <init>(int,int)> -> _NONE_
<android.widget.TextView: void setText(java.lang.CharSequence,android.widget.TextView$BufferType)> -> _SINK_ 
<android.view.ViewPropertyAnimator: long getDuration()> -> _SOURCE_
<android.graphics.Canvas: void drawOval(android.graphics.RectF,android.graphics.Paint)> -> _NONE_
<android.app.Fragment: void onActivityResult(int,int,android.content.Intent)> -> _SINK_ 
<android.view.TouchDelegate: void <init>(android.graphics.Rect,android.view.View)> -> _NONE_
<android.webkit.WebViewClient: void onPageFinished(android.webkit.WebView,java.lang.String)> -> _NONE_
<java.lang.InterruptedException: void <init>(java.lang.String)> -> _NONE_
<android.text.Layout: void getCursorPath(int,android.graphics.Path,java.lang.CharSequence)> -> _SOURCE_
<android.content.ContentProvider: java.lang.String getReadPermission()> -> _SOURCE_
<android.app.Dialog: void addContentView(android.view.View,android.view.ViewGroup$LayoutParams)> -> _NONE_
<java.net.InetAddress: java.net.InetAddress getByAddress(byte[])> -> _SOURCE_
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setUpdateListener(android.animation.ValueAnimator$AnimatorUpdateListener)> -> _SINK_ 
<android.view.MotionEvent: float getYPrecision()> -> _SOURCE_
<android.content.ContentProvider: void attachInfo(android.content.Context,android.content.pm.ProviderInfo)> -> _NONE_
<android.widget.ListView: boolean onKeyUp(int,android.view.KeyEvent)> -> _NONE_
<android.graphics.Canvas: void drawARGB(int,int,int,int)> -> _NONE_
<android.os.Parcel: boolean[] createBooleanArray()> -> _NONE_
<android.webkit.WebViewClient: boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String)> android.permission.STOP_APP_SWITCHES -> _NONE_
<java.net.InetAddress: boolean isMCLinkLocal()> -> _NONE_
<android.view.ContextThemeWrapper: android.content.res.Resources getResources()> -> _SOURCE_
<android.app.LocalActivityManager: void dispatchPause(boolean)> -> _NONE_
<android.graphics.Rect: void readFromParcel(android.os.Parcel)> -> _NONE_
<java.nio.charset.CharsetEncoder: boolean canEncode(java.lang.CharSequence)> -> _NONE_
<android.view.ViewGroup: void clearDisappearingChildren()> -> _NONE_
<android.bluetooth.BluetoothSocket: java.io.InputStream getInputStream()> -> _SOURCE_
<android.widget.RemoteViews: void setCharSequence(int,java.lang.String,java.lang.CharSequence)> -> _SINK_ 
<java.util.concurrent.TimeUnit: long toNanos(long)> -> _NONE_
<android.os.Bundle: void <init>(android.os.Bundle)> -> _NONE_
<android.hardware.Camera$Parameters: void setRotation(int)> -> _SINK_ 
<java.lang.reflect.Method: void <init>()> -> _NONE_
<android.widget.AbsListView: boolean isItemChecked(int)> -> _NONE_
<android.graphics.Rect: boolean intersects(int,int,int,int)> -> _NONE_
<android.webkit.WebSettings: void setAppCachePath(java.lang.String)> -> _NONE_
<android.net.wifi.WifiConfiguration: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<java.nio.LongBuffer: java.nio.LongBuffer wrap(long[],int,int)> -> _NONE_
<android.widget.TextView: void onScreenStateChanged(int)> -> _NONE_
<android.net.wifi.WifiEnterpriseConfig: void setSubjectMatch(java.lang.String)> -> _SINK_ 
<android.widget.TextView: void setImeActionLabel(java.lang.CharSequence,int)> -> _SINK_ 
<android.os.CancellationSignal: void cancel()> -> _NONE_
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo obtain()> -> _NONE_
<android.view.MotionEvent: float getHistoricalOrientation(int)> -> _SOURCE_
<android.webkit.WebView: void setOverScrollMode(int)> -> _SINK_ 
<java.net.URI: int hashCode()> -> _SINK_ 
<java.lang.Double: java.lang.Double valueOf(double)> -> _SINK_ 
<android.net.wifi.WifiEnterpriseConfig: java.lang.String toString()> -> _NONE_
<android.widget.TextView: boolean verifyDrawable(android.graphics.drawable.Drawable)> -> _NONE_
<android.widget.TextView: void setSelected(boolean)> -> _SINK_ 
<android.telephony.TelephonyManager: java.lang.String getMmsUserAgent()> -> _SOURCE_
<java.io.Reader: void <init>()> -> _NONE_
<android.bluetooth.BluetoothGattDescriptor: void <init>(java.util.UUID,int)> -> _NONE_
<android.bluetooth.BluetoothDevice: boolean createBond()> -> _NONE_
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)> -> _SINK_ 
<android.content.SyncAdapterType: boolean isAlwaysSyncable()> -> _NONE_
<android.view.View: int getId()> -> _SOURCE_
<android.graphics.drawable.Drawable: void setFilterBitmap(boolean)> -> _NONE_
<java.nio.charset.CharsetEncoder: java.nio.charset.CodingErrorAction malformedInputAction()> -> _NONE_
<android.telephony.CellSignalStrengthCdma: java.lang.String toString()> -> _NONE_
<android.content.pm.InstrumentationInfo: void <init>()> -> _NONE_
<android.view.inputmethod.CompletionInfo: void <init>(long,int,java.lang.CharSequence)> -> _NONE_
<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)> -> _NONE_
<android.webkit.WebView: void setWebContentsDebuggingEnabled(boolean)> -> _SINK_ 
<android.content.ContextWrapper: void startActivities(android.content.Intent[])> -> _SINK_ 
<android.content.Loader: void registerOnLoadCanceledListener(android.content.Loader$OnLoadCanceledListener)> -> _NONE_
<java.io.File: boolean setLastModified(long)> -> _SINK_ 
<android.view.MotionEvent: int getHistorySize()> -> _SOURCE_
<android.graphics.Typeface: android.graphics.Typeface defaultFromStyle(int)> -> _NONE_
<android.widget.AbsListView: void clearChoices()> -> _NONE_
<java.util.ArrayList: boolean add(java.lang.Object)> -> _NONE_
<java.net.DatagramPacket: java.net.SocketAddress getSocketAddress()> -> _SOURCE_
<android.net.sip.SipAudioCall$Listener: void onError(android.net.sip.SipAudioCall,int,java.lang.String)> -> _NONE_
<java.lang.Character: int toLowerCase(int)> -> _SINK_ 
<android.view.inputmethod.CompletionInfo: java.lang.CharSequence getLabel()> -> _SOURCE_
<java.nio.channels.Selector: java.nio.channels.Selector open()> -> _NONE_
<android.view.ViewGroup$MarginLayoutParams: int getMarginEnd()> -> _SOURCE_
<android.content.BroadcastReceiver: void <init>()> -> _NONE_
<android.os.Bundle: java.lang.CharSequence getCharSequence(java.lang.String)> -> _SOURCE_
<android.view.KeyEvent: int getDeviceId()> -> _SOURCE_
<java.nio.channels.spi.AbstractInterruptibleChannel: boolean isOpen()> -> _NONE_
<java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit valueOf(java.lang.String)> -> _SINK_ 
<android.media.MediaPlayer: void deselectTrack(int)> -> _NONE_
<java.lang.ClassLoader: java.io.InputStream getSystemResourceAsStream(java.lang.String)> -> _SOURCE_
<android.net.sip.SipAudioCall$Listener: void onRingingBack(android.net.sip.SipAudioCall)> -> _NONE_
<android.util.TypedValue: int complexToDimensionPixelOffset(int,android.util.DisplayMetrics)> -> _SINK_ 
<android.os.Bundle: java.lang.ClassLoader getClassLoader()> -> _SOURCE_
<android.print.PageRange: void <init>(int,int)> -> _NONE_
<android.widget.TextView: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)> -> _NONE_
<java.util.AbstractCollection: boolean add(java.lang.Object)> -> _NONE_
<android.webkit.WebView: java.lang.String getTitle()> -> _SOURCE_
<java.lang.Long: boolean equals(java.lang.Object)> -> _NONE_
<android.view.View: void scheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable,long)> -> _NONE_
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()> -> _SOURCE_
<java.lang.Long: long longValue()> -> _NONE_
<java.net.NetworkInterface: boolean isLoopback()> -> _NONE_
<android.hardware.Camera$Parameters: int getMaxNumDetectedFaces()> -> _SOURCE_
<java.io.PrintStream: void print(boolean)> -> _NONE_
<java.net.Socket: void setReuseAddress(boolean)> -> _SINK_ 
<android.nfc.tech.NfcB: void close()> android.permission.NFC -> _NONE_
<android.graphics.Bitmap: int getScaledHeight(android.graphics.Canvas)> -> _SOURCE_
<android.content.ComponentName: android.content.ComponentName clone()> -> _NONE_
<java.lang.ExceptionInInitializerError: void <init>()> -> _NONE_
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.StringBuffer)> -> _NONE_
<android.graphics.drawable.Drawable: android.graphics.Rect copyBounds()> -> _NONE_
<android.graphics.Path: void rLineTo(float,float)> -> _NONE_
<android.database.sqlite.SQLiteDatabase: void markTableSyncable(java.lang.String,java.lang.String)> -> _NONE_
<java.net.Socket: boolean isClosed()> -> _NONE_
<android.database.sqlite.SQLiteProgram: void onAllReferencesReleased()> -> _NONE_
<java.util.AbstractCollection: boolean removeAll(java.util.Collection)> -> _NONE_
<java.lang.Enum: boolean equals(java.lang.Object)> -> _NONE_
<android.graphics.drawable.Drawable: int getIntrinsicWidth()> -> _SOURCE_
<android.widget.TextView: void setLinkTextColor(int)> -> _SINK_ 
<android.app.Activity: void showDialog(int)> -> _NONE_
<android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt[] values()> -> _NONE_
<android.content.ContextWrapper: java.lang.String[] databaseList()> -> _NONE_
<java.net.InetAddress: boolean isMCGlobal()> -> _NONE_
<android.view.MotionEvent: float getToolMajor()> -> _SOURCE_
<android.content.ContentProviderResult: void <init>(int)> -> _NONE_
<java.lang.Float: float parseFloat(java.lang.String)> -> _SINK_ 
<android.graphics.drawable.Drawable: int resolveOpacity(int,int)> -> _NONE_
<java.net.DatagramSocket: int getLocalPort()> -> _SOURCE_
<android.app.Activity: void triggerSearch(java.lang.String,android.os.Bundle)> -> _NONE_
<android.app.Dialog: android.view.Window getWindow()> -> _SOURCE_
<android.hardware.Camera$Parameters: void setColorEffect(java.lang.String)> -> _SINK_ 
<java.lang.Character: boolean isTitleCase(char)> -> _NONE_
<java.lang.ClassFormatError: void <init>()> -> _NONE_
<android.graphics.Bitmap: int getDensity()> -> _SOURCE_
<android.widget.TextView: void setTextKeepState(java.lang.CharSequence,android.widget.TextView$BufferType)> -> _SINK_ 
<android.widget.TextView: void onAttachedToWindow()> -> _NONE_
<android.app.ActionBar$LayoutParams: void <init>(int,int,int)> -> _NONE_
<android.widget.AbsListView: void setOnScrollListener(android.widget.AbsListView$OnScrollListener)> -> _NONE_
<android.graphics.drawable.Drawable: int getChangingConfigurations()> -> _SOURCE_
<android.view.Surface: java.lang.String toString()> -> _NONE_
<android.database.ContentObserver: void dispatchChange(boolean,android.net.Uri)> -> _NONE_
<android.widget.TextView: void clearComposingText()> -> _NONE_
<android.content.ContextWrapper: android.content.res.AssetManager getAssets()> -> _SOURCE_
<android.graphics.Xfermode: void finalize()> -> _NONE_
<android.net.sip.SipSession: android.net.sip.SipProfile getPeerProfile()> -> _SOURCE_
<java.io.File: boolean setWritable(boolean)> -> _SINK_ 
<android.view.View: void onSizeChanged(int,int,int,int)> -> _NONE_
<android.bluetooth.BluetoothServerSocket: void <init>()> -> _NONE_
<org.apache.http.ProtocolVersion: int compareToVersion(org.apache.http.ProtocolVersion)> -> _SINK_ 
<java.lang.Short: short shortValue()> -> _NONE_
<android.app.ActivityGroup: void finishActivity(int)> android.permission.BROADCAST_STICKY android.permission.DEVICE_POWER android.permission.MANAGE_APP_TOKENS android.permission.UPDATE_DEVICE_STATS -> _NONE_
<android.app.Fragment: void onDetach()> -> _NONE_
<java.lang.Float: long longValue()> -> _NONE_
<android.net.sip.SipAudioCall: void attachCall(android.net.sip.SipSession,java.lang.String)> -> _NONE_
<android.view.View: void dispatchVisibilityChanged(android.view.View,int)> -> _NONE_
<android.graphics.Typeface: android.graphics.Typeface create(android.graphics.Typeface,int)> -> _NONE_
<java.net.InetAddress: int hashCode()> -> _SINK_ 
<android.content.ContextWrapper: java.lang.String getPackageResourcePath()> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: boolean isWriteAheadLoggingEnabled()> -> _NONE_
<java.net.InetAddress: java.net.InetAddress getLoopbackAddress()> -> _SOURCE_
<android.view.View: int getAccessibilityLiveRegion()> -> _SOURCE_
<java.nio.CharBuffer: java.nio.CharBuffer get(char[],int,int)> -> _SOURCE_
<android.app.Notification: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<android.telephony.CellLocation: void requestLocationUpdate()> -> _NONE_
<java.lang.Long: int numberOfTrailingZeros(long)> -> _SINK_ 
<java.io.PrintWriter: void <init>(java.io.Writer)> -> _NONE_
<java.lang.Package: java.lang.String getSpecificationTitle()> -> _SOURCE_
<android.view.animation.LayoutAnimationController: int getOrder()> -> _SOURCE_
<java.net.Socket: int getReceiveBufferSize()> -> _SOURCE_
<android.webkit.WebView: java.lang.String getOriginalUrl()> -> _SOURCE_
<android.app.Activity: void setFeatureDrawableUri(int,android.net.Uri)> -> _SINK_ 
<java.lang.Float: int compareTo(java.lang.Object)> -> _SINK_ 
<android.os.Parcel: void readBooleanArray(boolean[])> -> _NONE_
<android.widget.AdapterView: android.widget.AdapterView$OnItemSelectedListener getOnItemSelectedListener()> -> _SOURCE_
<android.app.Fragment: void onResume()> -> _NONE_
<java.util.Locale: java.lang.String getLanguage()> -> _SOURCE_
<java.nio.channels.ClosedChannelException: void <init>()> -> _NONE_
<android.app.Notification$Style: void <init>()> -> _NONE_
<java.nio.channels.spi.AbstractInterruptibleChannel: void end(boolean)> -> _NONE_
<android.view.ViewGroup: void scheduleLayoutAnimation()> -> _NONE_
<android.widget.ListView: boolean areHeaderDividersEnabled()> -> _NONE_
<android.graphics.Point: void <clinit>()> -> _NONE_
<android.os.Parcel: void readTypedArray(java.lang.Object[],android.os.Parcelable$Creator)> -> _NONE_
<android.webkit.JsResult: void confirm()> -> _NONE_
<android.content.ContextWrapper: java.lang.String[] fileList()> -> _NONE_
<java.lang.String: int compareToIgnoreCase(java.lang.String)> -> _SINK_ 
<android.view.KeyEvent: java.lang.String keyCodeToString(int)> -> _NONE_
<java.security.cert.CertificateNotYetValidException: void <init>()> -> _NONE_
<java.lang.Throwable: java.lang.String getMessage()> -> _SOURCE_
<android.net.wifi.WifiEnterpriseConfig: void setCaCertificate(java.security.cert.X509Certificate)> -> _SINK_ 
<android.os.Parcel: void setDataSize(int)> -> _SINK_ 
<java.lang.reflect.Field: void setByte(java.lang.Object,byte)> -> _SINK_ 
<android.telephony.ServiceState: int hashCode()> -> _NONE_
<android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode valueOf(java.lang.String)> -> _SINK_ 
<java.net.URI: java.lang.String getAuthority()> -> _SOURCE_
<java.nio.channels.FileChannel$MapMode: java.lang.String toString()> -> _NONE_
<android.bluetooth.BluetoothGattCharacteristic: byte[] getValue()> -> _SOURCE_
<java.lang.Integer: int rotateLeft(int,int)> -> _SINK_ 
<android.os.Debug$MemoryInfo: int getTotalSharedClean()> -> _SOURCE_
<android.app.ActivityGroup: android.app.Activity getCurrentActivity()> -> _SOURCE_
<java.lang.String: java.lang.String valueOf(boolean)> -> _SINK_ 
<java.util.UUID: void <init>(long,long)> -> _NONE_
<android.view.MotionEvent: float getRawX()> -> _SOURCE_
<android.content.Intent: void removeCategory(java.lang.String)> -> _NONE_
<android.view.ViewGroup: void clearChildFocus(android.view.View)> -> _NONE_
<android.text.Spannable$Factory: android.text.Spannable newSpannable(java.lang.CharSequence)> -> _NONE_
<android.view.LayoutInflater: android.view.View inflate(org.xmlpull.v1.XmlPullParser,android.view.ViewGroup,boolean)> -> _NONE_
<java.util.Random: void <init>()> -> _NONE_
<android.hardware.Camera$Parameters: boolean isVideoSnapshotSupported()> -> _NONE_
<android.app.backup.BackupDataOutput: int writeEntityData(byte[],int)> -> _SINK_ 
<android.location.LocationProvider: boolean supportsBearing()> -> _NONE_
<java.lang.ThreadGroup: void checkAccess()> -> _NONE_
<android.content.ClipData: android.content.ClipDescription getDescription()> -> _SOURCE_
<android.app.Activity: boolean onKeyDown(int,android.view.KeyEvent)> -> _NONE_
<android.nfc.Tag: byte[] getId()> -> _SOURCE_
<android.app.ActionBar: android.content.Context getThemedContext()> -> _SOURCE_
<android.widget.TextView: int getTotalPaddingRight()> -> _SOURCE_
<android.widget.ExpandableListView: void setIndicatorBoundsRelative(int,int)> -> _SINK_ 
<android.os.Parcel: byte[] createByteArray()> -> _NONE_
<android.location.LocationManager: void clearTestProviderStatus(java.lang.String)> -> _NONE_
<android.widget.TextView: void cancelLongPress()> -> _NONE_
<java.lang.Character: byte getDirectionality(int)> -> _SOURCE_
<android.net.sip.SipManager: java.lang.String getCallId(android.content.Intent)> -> _SOURCE_
<android.widget.AbsListView$LayoutParams: void <init>(int,int,int)> -> _NONE_
<android.os.Parcel: void writeMap(java.util.Map)> -> _NONE_
<android.graphics.Bitmap: void setPixel(int,int,int)> -> _SINK_ 
<java.lang.String: int codePointCount(int,int)> -> _SINK_ 
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap,int,int,int,int,android.graphics.Matrix,boolean)> -> _SINK_ 
<android.app.Activity: void setResult(int,android.content.Intent)> -> _SINK_ 
<android.telephony.CellSignalStrengthCdma: int getCdmaDbm()> -> _SOURCE_
<android.view.View: void setOnLongClickListener(android.view.View$OnLongClickListener)> -> _SINK_ 
<android.animation.Animator: void setTarget(java.lang.Object)> -> _NONE_
<java.lang.Class: java.lang.reflect.Type getGenericSuperclass()> -> _SOURCE_
<android.graphics.Paint: android.graphics.Typeface getTypeface()> -> _SOURCE_
<android.content.pm.Signature: boolean equals(java.lang.Object)> -> _NONE_
<android.os.Bundle: long[] getLongArray(java.lang.String)> -> _SOURCE_
<android.os.WorkSource: int hashCode()> -> _SINK_ 
<android.view.animation.Animation: int getBackgroundColor()> -> _SOURCE_
<android.app.Activity: void onWindowFocusChanged(boolean)> -> _NONE_
<java.lang.Long: int compareTo(java.lang.Object)> -> _SINK_ 
<android.animation.Animator: void cancel()> -> _NONE_
<android.hardware.Camera$Parameters: java.lang.String getFocusMode()> -> _SOURCE_
<android.content.ContentResolver: java.io.OutputStream openOutputStream(android.net.Uri,java.lang.String)> -> _NONE_
<android.app.ExpandableListActivity: void onGroupExpand(int)> -> _NONE_
<android.provider.ContactsContract$ProfileSyncState: void <clinit>()> -> _NONE_
<android.app.Fragment: android.app.Fragment getParentFragment()> -> _SOURCE_
<java.lang.reflect.Field: void setLong(java.lang.Object,long)> -> _SINK_ 
<android.view.accessibility.AccessibilityNodeInfo: boolean isScrollable()> -> _NONE_
<android.app.PendingIntent: android.content.IntentSender getIntentSender()> -> _SOURCE_
<org.apache.http.util.CharArrayBuffer: java.lang.String substringTrimmed(int,int)> -> _NONE_
<android.view.ViewGroup: android.view.View findFocus()> -> _NONE_
<java.nio.channels.DatagramChannel: long write(java.nio.ByteBuffer[])> -> _SOURCE_
<java.io.InputStream: int read(byte[])> -> _NONE_
<java.math.BigInteger: byte[] toByteArray()> -> _NONE_
<android.database.sqlite.SQLiteDatabase: boolean enableWriteAheadLogging()> -> _NONE_
<java.io.FileOutputStream: void <init>(java.io.File,boolean)> -> _NONE_
<java.io.PrintWriter: void print(java.lang.String)> -> _NONE_
<android.nfc.NdefMessage: android.nfc.NdefRecord[] getRecords()> -> _SOURCE_
<java.lang.ClassLoader: void <init>()> -> _NONE_
<java.util.AbstractList: int indexOf(java.lang.Object)> -> _NONE_
<android.content.Intent: android.content.Intent setTypeAndNormalize(java.lang.String)> -> _SINK_ 
<org.apache.http.ParseException: void <init>()> -> _NONE_
<java.lang.Error: void <init>(java.lang.String)> -> _NONE_
<org.apache.http.message.ParserCursor: void updatePos(int)> -> _NONE_
<android.view.inputmethod.CorrectionInfo: java.lang.String toString()> -> _NONE_
<android.location.Location: boolean hasAccuracy()> -> _NONE_
<android.content.ClipData: android.content.ClipData newIntent(java.lang.CharSequence,android.content.Intent)> -> _SINK_ 
<android.widget.AbsListView: void drawableStateChanged()> -> _NONE_
<android.accounts.AuthenticatorDescription: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<android.graphics.Picture: void draw(android.graphics.Canvas)> -> _NONE_
<java.net.ServerSocket: boolean isBound()> -> _NONE_
<android.view.ViewGroup$MarginLayoutParams: void setMarginStart(int)> -> _SINK_ 
<android.webkit.WebViewClient: void onLoadResource(android.webkit.WebView,java.lang.String)> -> _NONE_
<android.view.View: android.view.View findViewById(int)> -> _NONE_
<android.view.DragEvent: float getY()> -> _SOURCE_
<android.net.wifi.WifiInfo: java.lang.String getMacAddress()> -> _SOURCE_
<android.view.View: int getRightPaddingOffset()> -> _SOURCE_
<android.content.ContentProviderOperation: boolean isYieldAllowed()> -> _NONE_
<android.view.Window: void setLayout(int,int)> -> _NONE_
<java.util.BitSet: java.lang.Object clone()> -> _NONE_
<android.webkit.WebView: void evaluateJavascript(java.lang.String,android.webkit.ValueCallback)> -> _NONE_
<android.view.View: void dispatchWindowSystemUiVisiblityChanged(int)> -> _NONE_
<java.lang.Double: boolean isNaN(double)> -> _NONE_
<android.telephony.ServiceState: void setState(int)> -> _SINK_ 
<java.lang.ExceptionInInitializerError: java.lang.Throwable getException()> -> _SOURCE_
<android.net.wifi.WifiManager: boolean isScanAlwaysAvailable()> -> _NONE_
<android.accounts.AccountManager: android.accounts.AccountManagerFuture updateCredentials(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> -> _SOURCE_
<android.provider.Settings$Secure: int getInt(android.content.ContentResolver,java.lang.String,int)> -> _SOURCE_
<android.view.View: void getDrawingRect(android.graphics.Rect)> -> _SOURCE_
<android.webkit.WebSettings$RenderPriority: android.webkit.WebSettings$RenderPriority valueOf(java.lang.String)> -> _NONE_
<java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[],int,int)> -> _NONE_
<java.security.InvalidKeyException: void <init>()> -> _NONE_
<java.nio.IntBuffer: java.nio.IntBuffer put(int[],int,int)> -> _NONE_
<android.app.Activity: int getTitleColor()> -> _SOURCE_
<android.os.Parcel: int dataSize()> -> _SINK_ 
<android.view.LayoutInflater: void <init>(android.view.LayoutInflater,android.content.Context)> -> _NONE_
<android.view.KeyEvent: void <init>(long,long,int,int,int,int,int,int,int,int)> -> _NONE_
<android.view.ViewGroup: void dispatchSystemUiVisibilityChanged(int)> -> _NONE_
<java.io.PrintWriter: void clearError()> -> _NONE_
<android.net.wifi.WifiManager$WifiLock: void acquire()> -> _NONE_
<android.graphics.Canvas: int getDensity()> -> _SOURCE_
<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()> -> _SOURCE_
<android.view.Display: void getRealMetrics(android.util.DisplayMetrics)> -> _SOURCE_
<java.net.Proxy: void <init>(java.net.Proxy$Type,java.net.SocketAddress)> -> _NONE_
<android.content.SyncInfo: int describeContents()> -> _SINK_ 
<android.view.View: void setOnSystemUiVisibilityChangeListener(android.view.View$OnSystemUiVisibilityChangeListener)> -> _SINK_ 
<android.widget.TextView: int computeVerticalScrollRange()> -> _NONE_
<android.view.accessibility.AccessibilityNodeInfo: void setClassName(java.lang.CharSequence)> -> _SINK_ 
<android.provider.Settings$System: void setShowGTalkServiceStatus(android.content.ContentResolver,boolean)> -> _SINK_ 
<android.graphics.Matrix: boolean invert(android.graphics.Matrix)> -> _NONE_
<android.view.accessibility.AccessibilityNodeInfo: void setCollectionInfo(android.view.accessibility.AccessibilityNodeInfo$CollectionInfo)> -> _SINK_ 
<android.accounts.AccountManager: android.accounts.AuthenticatorDescription[] getAuthenticatorTypes()> -> _SOURCE_
<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)> -> _NONE_
<android.os.PatternMatcher: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<android.content.res.Resources$Theme: boolean resolveAttribute(int,android.util.TypedValue,boolean)> -> _NONE_
<android.content.IntentFilter: int countDataTypes()> -> _SINK_ 
<java.lang.Class: boolean isSynthetic()> -> _NONE_
<java.net.URLConnection: java.lang.String getRequestProperty(java.lang.String)> -> _SOURCE_
<android.content.Context: java.lang.String getString(int,java.lang.Object[])> -> _SOURCE_
<java.lang.Boolean: java.lang.Boolean valueOf(boolean)> -> _SINK_ 
<android.graphics.Shader: boolean getLocalMatrix(android.graphics.Matrix)> -> _SOURCE_
<java.lang.Thread: void destroy()> -> _NONE_
<android.app.Service: void onStart(android.content.Intent,int)> -> _NONE_
<android.app.Fragment: android.app.LoaderManager getLoaderManager()> -> _SOURCE_
<java.net.DatagramSocket: void bind(java.net.SocketAddress)> -> _NONE_
<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)> -> _NONE_
<android.provider.Settings$Secure: float getFloat(android.content.ContentResolver,java.lang.String,float)> -> _SOURCE_
<android.view.ViewTreeObserver: boolean dispatchOnPreDraw()> -> _NONE_
<java.nio.ShortBuffer: java.nio.ShortBuffer wrap(short[])> -> _NONE_
<java.lang.Character: boolean isWhitespace(int)> -> _NONE_
<android.database.sqlite.SQLiteDatabase: void setLocale(java.util.Locale)> -> _SINK_ 
<android.view.View: void setSaveFromParentEnabled(boolean)> -> _SINK_ 
<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothClass getBluetoothClass()> -> _SOURCE_
<java.lang.VerifyError: void <init>()> -> _NONE_
<java.nio.LongBuffer: int arrayOffset()> -> _NONE_
<android.widget.Scroller: void <init>(android.content.Context,android.view.animation.Interpolator)> -> _NONE_
<java.net.URLConnection: void setDefaultAllowUserInteraction(boolean)> -> _NONE_
<android.app.Activity: void openContextMenu(android.view.View)> -> _SINK_ 
<android.view.View: int getSuggestedMinimumWidth()> -> _SOURCE_
<android.net.wifi.WifiEnterpriseConfig: java.lang.String getPassword()> -> _SOURCE_
<java.lang.Float: void <init>(float)> -> _NONE_
<android.view.ViewGroup: boolean onRequestSendAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)> -> _NONE_
<android.view.View$AccessibilityDelegate: void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent)> -> _SINK_ 
<android.widget.TextView: void onTextChanged(java.lang.CharSequence,int,int,int)> -> _NONE_
<android.view.ViewTreeObserver: void removeOnWindowFocusChangeListener(android.view.ViewTreeObserver$OnWindowFocusChangeListener)> -> _NONE_
<android.view.animation.Animation: android.view.animation.Animation clone()> -> _NONE_
<android.view.ActionMode: boolean getTitleOptionalHint()> -> _SOURCE_
<android.graphics.Bitmap$CompressFormat: void <clinit>()> -> _NONE_
<java.net.URL: java.io.InputStream openStream()> -> _NONE_
<android.content.Intent: java.lang.CharSequence getCharSequenceExtra(java.lang.String)> -> _SOURCE_
<android.webkit.WebView: void setInitialScale(int)> -> _SINK_ 
<android.webkit.WebHistoryItem: java.lang.String getUrl()> -> _SOURCE_
<android.bluetooth.BluetoothGattDescriptor: android.bluetooth.BluetoothGattCharacteristic getCharacteristic()> -> _SOURCE_
<java.lang.String: java.lang.String toLowerCase(java.util.Locale)> -> _NONE_
<java.lang.String: int indexOf(java.lang.String,int)> -> _SINK_ 
<android.graphics.RectF: void setEmpty()> -> _SINK_ 
<android.location.Criteria: void setCostAllowed(boolean)> -> _SINK_ 
<android.util.SparseArray: void setValueAt(int,java.lang.Object)> -> _SINK_ 
<android.os.Parcel: void readList(java.util.List,java.lang.ClassLoader)> -> _NONE_
<java.security.cert.Certificate: int hashCode()> -> _NONE_
<android.view.ViewGroup: void setChildrenDrawingCacheEnabled(boolean)> -> _NONE_
<android.util.Property: java.lang.Class getType()> -> _SOURCE_
<android.graphics.Canvas: void drawPosText(char[],int,int,float[],android.graphics.Paint)> -> _NONE_
<android.provider.Browser: void requestAllIcons(android.content.ContentResolver,java.lang.String,android.webkit.WebIconDatabase$IconListener)> -> _NONE_
<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> -> _SOURCE_
<java.lang.Character: int getType(int)> -> _SOURCE_
<android.content.ComponentName: int hashCode()> -> _SINK_ 
<android.net.wifi.WifiEnterpriseConfig: void setEapMethod(int)> -> _SINK_ 
<java.lang.Long: long parseLong(java.lang.String)> -> _SINK_ 
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)> -> _NONE_
<android.animation.LayoutTransition: void <init>()> -> _NONE_
<android.app.Fragment: void onSaveInstanceState(android.os.Bundle)> -> _NONE_
<android.app.Notification$Builder: android.app.Notification$Builder setProgress(int,int,boolean)> -> _SINK_ 
<android.nfc.NfcAdapter: void setBeamPushUrisCallback(android.nfc.NfcAdapter$CreateBeamUrisCallback,android.app.Activity)> -> _SINK_ 
<android.view.MotionEvent: float getTouchMajor()> -> _SOURCE_
<java.security.PermissionCollection: void <init>()> -> _NONE_
<android.graphics.Rect: void set(android.graphics.Rect)> -> _SINK_ 
<android.view.View: boolean canResolveTextAlignment()> -> _NONE_
<java.nio.ShortBuffer: int arrayOffset()> -> _NONE_
<android.content.pm.ComponentInfo: void dumpFront(android.util.Printer,java.lang.String)> -> _NONE_
<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder onUnmappableCharacter(java.nio.charset.CodingErrorAction)> -> _SOURCE_
<android.content.Intent: boolean hasExtra(java.lang.String)> -> _NONE_
<android.view.ViewGroup: void setLayoutTransition(android.animation.LayoutTransition)> -> _NONE_
<java.net.SocketImpl: void <init>()> -> _NONE_
<java.net.ServerSocket: void <init>(int)> -> _NONE_
<android.location.LocationManager: void addTestProvider(java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,boolean,int,int)> -> _NONE_
<android.view.ViewGroup: boolean checkLayoutParams(android.view.ViewGroup$LayoutParams)> -> _NONE_
<android.print.PrintAttributes$Resolution: int getHorizontalDpi()> -> _SOURCE_
<java.io.File: boolean isDirectory()> -> _NONE_
<java.nio.CharBuffer: java.nio.CharBuffer wrap(java.lang.CharSequence)> -> _NONE_
<java.nio.charset.CoderResult: boolean isOverflow()> -> _NONE_
<android.view.Surface$OutOfResourcesException: void <init>(java.lang.String)> -> _NONE_
<java.security.Permission: java.lang.String getName()> -> _SOURCE_
<android.view.animation.Animation: long getStartTime()> -> _SOURCE_
<android.location.LocationManager: void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)> -> _SINK_ 
<android.widget.TextView: boolean performAccessibilityAction(int,android.os.Bundle)> -> _NONE_
<android.view.View: boolean performLongClick()> -> _NONE_
<java.security.InvalidKeyException: void <init>(java.lang.String,java.lang.Throwable)> -> _NONE_
<android.content.ContentResolver: void startSync(android.net.Uri,android.os.Bundle)> -> _NONE_
<java.util.BitSet: java.util.BitSet valueOf(java.nio.ByteBuffer)> -> _NONE_
<android.view.inputmethod.EditorInfo: void dump(android.util.Printer,java.lang.String)> -> _NONE_
<java.security.KeyException: void <init>(java.lang.Throwable)> -> _NONE_
<java.math.BigInteger: boolean testBit(int)> -> _NONE_
<android.accounts.AccountManager: java.lang.String blockingGetAuthToken(android.accounts.Account,java.lang.String,boolean)> -> _SOURCE_
<android.webkit.WebView: android.graphics.Bitmap getFavicon()> -> _SOURCE_
<java.util.AbstractMap: java.lang.Object put(java.lang.Object,java.lang.Object)> -> _NONE_
<android.content.Intent: android.content.Intent setClass(android.content.Context,java.lang.Class)> -> _SINK_ 
<android.app.PendingIntent: android.app.PendingIntent getActivities(android.content.Context,int,android.content.Intent[],int)> -> _SOURCE_
<android.graphics.Path: void incReserve(int)> -> _NONE_
<android.graphics.Typeface: void <clinit>()> -> _NONE_
<android.view.View: boolean willNotDraw()> -> _NONE_
<java.lang.reflect.Field: boolean isEnumConstant()> -> _NONE_
<android.webkit.WebView: void setNetworkAvailable(boolean)> -> _SINK_ 
<android.widget.TextView: android.os.Bundle getInputExtras(boolean)> -> _SOURCE_
<java.lang.Double: void <init>(java.lang.String)> -> _NONE_
<android.view.View: android.view.View$OnFocusChangeListener getOnFocusChangeListener()> -> _SOURCE_
<android.widget.TextView: int getTotalPaddingStart()> -> _SOURCE_
<java.lang.String: void <init>(byte[],int,int)> -> _NONE_
<android.graphics.Canvas: void drawPicture(android.graphics.Picture,android.graphics.Rect)> -> _NONE_
<android.content.ContentProviderOperation: boolean isWriteOperation()> -> _NONE_
<android.widget.ExpandableListView: void setAdapter(android.widget.Adapter)> -> _SINK_ 
<android.widget.TextView: android.text.method.MovementMethod getDefaultMovementMethod()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: void setSource(android.view.View)> -> _SINK_ 
<android.nfc.Tag: void <init>()> -> _NONE_
<android.telephony.CellInfoCdma: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<android.database.sqlite.SQLiteDatabase: long replaceOrThrow(java.lang.String,java.lang.String,android.content.ContentValues)> -> _NONE_
<java.nio.charset.CharsetDecoder: java.nio.charset.Charset charset()> -> _NONE_
<android.content.ContentValues: java.lang.Float getAsFloat(java.lang.String)> -> _SOURCE_
<android.view.accessibility.AccessibilityRecord: void setClassName(java.lang.CharSequence)> -> _SINK_ 
<android.bluetooth.BluetoothAdapter: java.util.Set getBondedDevices()> -> _SOURCE_
<android.view.MotionEvent: float getHistoricalTouchMinor(int,int)> -> _SOURCE_
<android.view.View: boolean isFocused()> -> _NONE_
<android.provider.Settings$Secure: int getInt(android.content.ContentResolver,java.lang.String)> -> _SOURCE_
<android.os.Bundle: void <init>()> -> _NONE_
<android.widget.AbsListView: void setDrawSelectorOnTop(boolean)> -> _NONE_
<java.lang.Long: java.lang.Long valueOf(java.lang.String,int)> -> _SINK_ 
<android.view.ViewGroup: boolean dispatchGenericPointerEvent(android.view.MotionEvent)> -> _NONE_
<android.view.InputDevice: int getVendorId()> -> _SOURCE_
<java.lang.reflect.Constructor: int getModifiers()> -> _SOURCE_
<android.view.KeyEvent: boolean hasNoModifiers()> -> _NONE_
<android.view.ViewGroup: int getChildMeasureSpec(int,int,int)> -> _SOURCE_
<android.content.Loader: void deliverCancellation()> -> _NONE_
<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)> -> _NONE_
<android.app.ActivityManager$MemoryInfo: void <clinit>()> -> _NONE_
<android.view.ViewGroup: void dispatchWindowFocusChanged(boolean)> -> _NONE_
<android.os.Handler: boolean sendEmptyMessage(int)> -> _SINK_ 
<android.print.PrintAttributes$MediaSize: int hashCode()> -> _SINK_ 
<android.content.pm.ActivityInfo: void <init>()> -> _NONE_
<android.view.View: void setScrollbarFadingEnabled(boolean)> -> _SINK_ 
<android.view.accessibility.AccessibilityRecord: int getScrollX()> -> _SOURCE_
<android.content.pm.ConfigurationInfo: void <clinit>()> -> _NONE_
<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)> -> _NONE_
<android.os.Looper: void <init>()> -> _NONE_
<java.util.Date: void <init>(int,int,int)> -> _NONE_
<java.lang.ExceptionInInitializerError: java.lang.Throwable getCause()> -> _SOURCE_
<android.widget.TextView: void setMaxEms(int)> -> _SINK_ 
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator x(float)> -> _NONE_
<android.view.View: int getWindowAttachCount()> -> _SOURCE_
<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver)> -> _NONE_
<java.lang.UnknownError: void <init>(java.lang.String)> -> _NONE_
<android.content.ContentResolver: java.lang.Object addStatusChangeListener(int,android.content.SyncStatusObserver)> -> _NONE_
<android.webkit.WebSettings: void setJavaScriptCanOpenWindowsAutomatically(boolean)> -> _NONE_
<android.content.pm.ServiceInfo: int describeContents()> -> _SINK_ 
<android.widget.TextView: boolean isTextSelectable()> -> _NONE_
<android.content.ContextWrapper: java.lang.Object getSystemService(java.lang.String)> -> _SOURCE_
<android.view.View: boolean onDragEvent(android.view.DragEvent)> -> _NONE_
<android.view.ViewGroup: void removeViewInLayout(android.view.View)> -> _NONE_
<java.net.URLConnection: boolean getDoInput()> -> _SOURCE_
<java.net.URL: void set(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)> -> _SINK_ 
<android.bluetooth.BluetoothGattService: boolean addService(android.bluetooth.BluetoothGattService)> -> _NONE_
<android.app.Activity: boolean requestWindowFeature(int)> -> _NONE_
<android.app.Dialog: void hide()> -> _NONE_
<android.os.PowerManager$WakeLock: java.lang.String toString()> -> _NONE_
<android.nfc.tech.IsoDep: byte[] getHiLayerResponse()> -> _SOURCE_
<android.widget.AbsListView: void setFilterText(java.lang.String)> -> _NONE_
<android.net.wifi.WifiManager$WifiLock: void finalize()> -> _NONE_
<android.content.pm.PermissionGroupInfo: java.lang.CharSequence loadDescription(android.content.pm.PackageManager)> -> _NONE_
<android.content.res.Configuration: void setToDefaults()> -> _SINK_ 
<android.widget.ListView: boolean requestChildRectangleOnScreen(android.view.View,android.graphics.Rect,boolean)> -> _NONE_
<android.webkit.WebSettings: void setAppCacheEnabled(boolean)> -> _NONE_
<android.graphics.PathEffect: void finalize()> -> _NONE_
<java.security.GeneralSecurityException: void <init>(java.lang.String)> -> _NONE_
<android.widget.ListView: void smoothScrollByOffset(int)> -> _NONE_
<android.widget.RemoteViews: void setRelativeScrollPosition(int,int)> -> _SINK_ 
<android.view.View: boolean awakenScrollBars(int)> -> _NONE_
<android.view.View: void onLayout(boolean,int,int,int,int)> -> _NONE_
<android.animation.LayoutTransition: android.animation.TimeInterpolator getInterpolator(int)> -> _SOURCE_
<android.view.ViewGroup: void measureChildren(int,int)> -> _NONE_
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromXml(android.content.res.Resources,org.xmlpull.v1.XmlPullParser)> -> _NONE_
<android.content.res.Resources: android.content.res.TypedArray obtainAttributes(android.util.AttributeSet,int[])> -> _NONE_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)> -> _NONE_
<android.webkit.WebView: boolean onHoverEvent(android.view.MotionEvent)> -> _NONE_
<java.util.Locale: java.lang.String getDisplayLanguage(java.util.Locale)> -> _SOURCE_
<java.io.FileInputStream: int available()> -> _SINK_ 
<android.view.View: void setVerticalScrollbarPosition(int)> -> _SINK_ 
<android.app.Activity: void setContentView(android.view.View)> -> _SINK_ 
<android.bluetooth.BluetoothDevice: int describeContents()> -> _SINK_ 
<android.os.WorkSource: boolean diff(android.os.WorkSource)> -> _NONE_
<java.lang.AssertionError: void <init>(char)> -> _NONE_
<android.widget.ListView: int getFooterViewsCount()> -> _SOURCE_
<android.os.Parcel: void readBinderList(java.util.List)> -> _NONE_
<android.graphics.RectF: boolean intersect(float,float,float,float)> -> _NONE_
<android.widget.AbsListView: void draw(android.graphics.Canvas)> -> _NONE_
<android.content.ClipData: void <init>(android.content.ClipDescription,android.content.ClipData$Item)> -> _NONE_
<android.content.res.TypedArray: void recycle()> -> _NONE_
<android.view.View: boolean overScrollBy(int,int,int,int,int,int,int,int,boolean)> -> _NONE_
<android.app.Activity: boolean onPreparePanel(int,android.view.View,android.view.Menu)> -> _NONE_
<android.widget.TextView: boolean didTouchFocusSelect()> -> _NONE_
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromPath(java.lang.String)> -> _NONE_
<android.graphics.Matrix: float mapRadius(float)> -> _NONE_
<android.app.Fragment: int hashCode()> -> _SINK_ 
<android.database.sqlite.SQLiteQuery: void <init>()> -> _NONE_
<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)> -> _NONE_
<java.net.NetworkInterface: java.util.List getInterfaceAddresses()> -> _SOURCE_
<java.nio.FloatBuffer: java.nio.FloatBuffer put(java.nio.FloatBuffer)> -> _NONE_
<java.lang.Package: java.lang.String getImplementationVersion()> -> _SOURCE_
<android.view.View: boolean onKeyPreIme(int,android.view.KeyEvent)> -> _NONE_
<android.animation.LayoutTransition: void hideChild(android.view.ViewGroup,android.view.View)> -> _NONE_
<android.accounts.AccountManager: android.accounts.AccountManagerFuture hasFeatures(android.accounts.Account,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)> -> _SOURCE_
<android.app.PendingIntent$CanceledException: void <init>(java.lang.String)> -> _NONE_
<android.webkit.WebSettings: boolean getBuiltInZoomControls()> -> _SOURCE_
<android.widget.AbsListView: void onRemoteAdapterDisconnected()> -> _NONE_
<android.animation.Keyframe: android.animation.Keyframe ofInt(float)> -> _NONE_
<android.view.ViewTreeObserver: void removeOnGlobalFocusChangeListener(android.view.ViewTreeObserver$OnGlobalFocusChangeListener)> -> _NONE_
<android.view.ViewGroup: void measureChild(android.view.View,int,int)> -> _NONE_
<android.app.Activity: void onUserInteraction()> -> _NONE_
<android.bluetooth.BluetoothDevice: int getBondState()> -> _SOURCE_
<android.hardware.Camera$Parameters: void setFlashMode(java.lang.String)> -> _SINK_ 
<java.io.File: boolean createNewFile()> -> _NONE_
<android.view.View$AccessibilityDelegate: boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)> -> _NONE_
<android.view.accessibility.AccessibilityRecord: boolean isPassword()> -> _NONE_
<java.lang.StringBuffer: java.lang.StringBuffer reverse()> -> _NONE_
<java.lang.StringBuffer: int offsetByCodePoints(int,int)> -> _SINK_ 
<android.graphics.Path: void rQuadTo(float,float,float,float)> -> _NONE_
<java.lang.Throwable: void addSuppressed(java.lang.Throwable)> -> _NONE_
<android.hardware.Camera$Parameters: void setGpsAltitude(double)> -> _SINK_ 
<android.widget.AbsListView: int getListPaddingTop()> -> _SOURCE_
<java.io.Reader: int read(char[])> -> _NONE_
<android.os.Parcel: void recycle()> -> _NONE_
<android.widget.TextView: void onWindowFocusChanged(boolean)> -> _NONE_
<android.net.sip.SipProfile: boolean getAutoRegistration()> -> _SOURCE_
<android.animation.LayoutTransition: void setAnimator(int,android.animation.Animator)> -> _SINK_ 
<android.view.ViewGroup: boolean hasTransientState()> -> _NONE_
<android.print.PrintAttributes: void <clinit>()> -> _NONE_
<java.lang.ThreadGroup: void suspend()> -> _NONE_
<java.lang.StringBuilder: int indexOf(java.lang.String)> -> _SINK_ 
<android.database.sqlite.SQLiteDatabase: long insertOrThrow(java.lang.String,java.lang.String,android.content.ContentValues)> -> _NONE_
<android.database.sqlite.SQLiteClosable: void releaseReferenceFromContainer()> -> _NONE_
<java.net.ServerSocket: java.lang.String toString()> -> _NONE_
<android.print.PrintAttributes$Resolution: int getVerticalDpi()> -> _SOURCE_
<android.accessibilityservice.AccessibilityServiceInfo: int hashCode()> -> _SINK_ 
<java.nio.charset.CharsetDecoder: boolean isAutoDetecting()> -> _NONE_
<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofKeyframe(java.lang.String,android.animation.Keyframe[])> -> _NONE_
<java.lang.Package: java.lang.String getImplementationVendor()> -> _SOURCE_
<javax.security.auth.x500.X500Principal: boolean equals(java.lang.Object)> -> _NONE_
<android.app.ActivityManager: void <init>()> -> _NONE_
<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)> -> _NONE_
<android.telephony.SignalStrength: int getGsmSignalStrength()> -> _SOURCE_
<android.content.pm.PermissionGroupInfo: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<android.content.res.Configuration: boolean equals(android.content.res.Configuration)> -> _NONE_
<android.content.ContentResolver: void removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)> -> _NONE_
<java.util.Locale: void setDefault(java.util.Locale)> -> _SINK_ 
<java.lang.Character: void <clinit>()> -> _NONE_
<android.accounts.AccountsException: void <init>(java.lang.String)> -> _NONE_
<android.content.res.AssetFileDescriptor: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)> -> _SINK_ 
<java.net.NetworkInterface: boolean supportsMulticast()> -> _NONE_
<android.app.PendingIntent: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<android.webkit.WebChromeClient: boolean onCreateWindow(android.webkit.WebView,boolean,boolean,android.os.Message)> -> _NONE_
<java.lang.String: boolean endsWith(java.lang.String)> -> _NONE_
<java.lang.ThreadGroup: int enumerate(java.lang.Thread[],boolean)> -> _SINK_ 
<android.graphics.Rect: void <clinit>()> -> _NONE_
<java.lang.StringBuilder: void <init>()> -> _NONE_
<java.lang.Throwable: void <init>(java.lang.Throwable)> -> _NONE_
<android.bluetooth.BluetoothHeadset: void <init>()> -> _NONE_
<android.animation.ValueAnimator: void setIntValues(int[])> -> _SINK_ 
<android.database.ContentObserver: void dispatchChange(boolean)> -> _NONE_
<android.graphics.Bitmap: int describeContents()> -> _SINK_ 
<android.view.ViewGroup: void removeViewAt(int)> -> _NONE_
<android.view.ViewGroup: boolean requestFocus(int,android.graphics.Rect)> -> _NONE_
<android.os.Bundle: android.os.Parcelable[] getParcelableArray(java.lang.String)> -> _SOURCE_
<android.view.ViewGroup: void removeDetachedView(android.view.View,boolean)> -> _NONE_
<android.app.Activity: void onConfigurationChanged(android.content.res.Configuration)> -> _NONE_
<android.location.LocationManager: void removeGpsStatusListener(android.location.GpsStatus$Listener)> -> _NONE_
<android.os.Bundle: void putSparseParcelableArray(java.lang.String,android.util.SparseArray)> -> _NONE_
<android.os.MessageQueue: void removeIdleHandler(android.os.MessageQueue$IdleHandler)> -> _NONE_
<android.content.Context: boolean isRestricted()> -> _NONE_
<android.widget.AbsListView: int computeVerticalScrollOffset()> -> _NONE_
<android.app.Service: void onRebind(android.content.Intent)> -> _NONE_
<android.view.accessibility.AccessibilityNodeInfo: void setLabeledBy(android.view.View)> -> _SINK_ 
<android.hardware.Camera: boolean enableShutterSound(boolean)> -> _NONE_
<android.net.Uri$Builder: java.lang.String toString()> -> _NONE_
<java.lang.Long: java.lang.Long getLong(java.lang.String,long)> -> _SOURCE_
<android.view.ViewGroup: void onDetachedFromWindow()> -> _NONE_
<android.view.accessibility.AccessibilityRecord: void setToIndex(int)> -> _SINK_ 
<android.app.Activity: void setVisible(boolean)> -> _SINK_ 
<android.os.Debug$MemoryInfo: int getTotalPss()> -> _SOURCE_
<android.view.accessibility.AccessibilityRecord: boolean isScrollable()> -> _NONE_
<java.lang.String: java.lang.String[] split(java.lang.String)> -> _NONE_
<android.content.Intent: java.lang.String toString()> -> _NONE_
<java.nio.channels.FileLock: boolean overlaps(long,long)> -> _NONE_
<android.webkit.WebView: void freeMemory()> -> _NONE_
<android.view.KeyEvent: boolean isSymPressed()> -> _NONE_
<android.accounts.AccountAuthenticatorActivity: void <init>()> -> _NONE_
<java.math.BigInteger: void <clinit>()> -> _NONE_
<android.app.Activity: void finishAffinity()> -> _NONE_
<android.bluetooth.BluetoothGattCallback: void onConnectionStateChange(android.bluetooth.BluetoothGatt,int,int)> -> _NONE_
<javax.security.cert.CertificateEncodingException: void <init>()> -> _NONE_
<android.widget.RemoteViews: void setTextViewCompoundDrawablesRelative(int,int,int,int,int)> -> _SINK_ 
<java.lang.ThreadGroup: int activeCount()> -> _SINK_ 
<android.widget.AdapterView: void dispatchSaveInstanceState(android.util.SparseArray)> -> _NONE_
<android.util.Pair: int hashCode()> -> _SINK_ 
<android.content.ClipData: void <init>(android.content.ClipData)> -> _NONE_
<android.telephony.TelephonyManager: void <init>()> -> _NONE_
<android.app.ActivityManager: boolean isUserAMonkey()> -> _NONE_
<android.bluetooth.BluetoothAdapter: boolean startDiscovery()> -> _NONE_
<android.webkit.WebView: void requestFocusNodeHref(android.os.Message)> -> _NONE_
<android.view.accessibility.AccessibilityNodeInfo: void setContentInvalid(boolean)> -> _SINK_ 
<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()> -> _SOURCE_
<android.view.View: void setScrollX(int)> -> _SINK_ 
<android.view.accessibility.AccessibilityNodeInfo: boolean isLongClickable()> -> _NONE_
<android.content.ContentValues: java.lang.String getAsString(java.lang.String)> -> _SOURCE_
<android.content.res.Configuration: boolean isLayoutSizeAtLeast(int)> -> _NONE_
<android.view.View: void postInvalidate(int,int,int,int)> -> _NONE_
<android.content.res.Configuration: int compareTo(android.content.res.Configuration)> -> _SINK_ 
<android.graphics.Matrix: boolean postRotate(float,float,float)> -> _NONE_
<android.net.wifi.WifiInfo: java.lang.String getSSID()> -> _SOURCE_
<android.util.TypedValue: int complexToDimensionPixelSize(int,android.util.DisplayMetrics)> -> _SINK_ 
<java.util.Date: void setHours(int)> -> _SINK_ 
<android.content.ClipData$Item: java.lang.CharSequence coerceToStyledText(android.content.Context)> -> _NONE_
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config)> -> _SINK_ 
<android.app.Activity: boolean onContextItemSelected(android.view.MenuItem)> -> _NONE_
<android.accounts.AccountAuthenticatorActivity: android.content.ComponentName startService(android.content.Intent)> android.permission.MANAGE_APP_TOKENS -> _SINK_ 
<android.content.ContentValues: int describeContents()> -> _SINK_ 
<android.content.pm.ConfigurationInfo: void <init>()> -> _NONE_
<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()> android.permission.ACCESS_FINE_LOCATION android.permission.ACCESS_COARSE_LOCATION -> _SOURCE_
<android.app.Activity: boolean isImmersive()> -> _NONE_
<java.lang.reflect.AccessibleObject: java.lang.annotation.Annotation getAnnotation(java.lang.Class)> -> _SOURCE_
<android.graphics.drawable.Drawable: void copyBounds(android.graphics.Rect)> -> _NONE_
<java.lang.String: void <init>(java.lang.StringBuffer)> -> _NONE_
<java.nio.channels.spi.AbstractSelectableChannel: boolean isRegistered()> -> _NONE_
<android.view.LayoutInflater: android.view.LayoutInflater$Factory2 getFactory2()> -> _SOURCE_
<android.net.sip.SipSession: java.lang.String getLocalIp()> -> _SOURCE_
<java.util.Date: void setDate(int)> -> _SINK_ 
<android.os.Parcel: void readFloatArray(float[])> -> _NONE_
<android.view.InputQueue: void finalize()> -> _NONE_
<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[],int,int)> -> _SOURCE_
<java.util.BitSet: java.util.BitSet get(int,int)> -> _SOURCE_
<android.content.IntentSender: int hashCode()> -> _SINK_ 
<android.animation.ValueAnimator: void removeUpdateListener(android.animation.ValueAnimator$AnimatorUpdateListener)> -> _NONE_
<java.util.Locale: java.lang.String getISO3Country()> -> _SOURCE_
<java.io.FileInputStream: int read(byte[],int,int)> -> _SINK_ 
<java.nio.channels.FileChannel: void <init>()> -> _NONE_
<android.nfc.NfcAdapter: android.nfc.NfcAdapter getDefaultAdapter(android.content.Context)> -> _SOURCE_
<android.webkit.WebView: void loadData(java.lang.String,java.lang.String,java.lang.String)> -> _NONE_
<android.view.ViewGroup: void focusableViewAvailable(android.view.View)> -> _NONE_
<android.os.Parcel: void writeBinderList(java.util.List)> -> _NONE_
<android.text.Editable$Factory: void <init>()> -> _NONE_
<java.net.DatagramSocketImpl: void <init>()> -> _NONE_
<android.widget.TextView: int[] onCreateDrawableState(int)> -> _NONE_
<android.content.ClipData$Item: void <init>(java.lang.CharSequence,java.lang.String,android.content.Intent,android.net.Uri)> -> _NONE_
<android.widget.AbsListView: void setSmoothScrollbarEnabled(boolean)> -> _NONE_
<android.accounts.Account: void <init>(java.lang.String,java.lang.String)> -> _NONE_
<android.telephony.TelephonyManager: java.lang.String getSimOperator()> -> _SOURCE_
<android.location.Criteria: int getSpeedAccuracy()> -> _SOURCE_
<java.io.File: boolean renameTo(java.io.File)> -> _NONE_
<android.view.ViewGroup: void bringChildToFront(android.view.View)> -> _NONE_
<android.graphics.Path$Op: android.graphics.Path$Op valueOf(java.lang.String)> -> _SINK_ 
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor[] createSocketPair()> -> _NONE_
<java.nio.channels.AsynchronousCloseException: void <init>()> -> _NONE_
<android.widget.RemoteViews: void setPendingIntentTemplate(int,android.app.PendingIntent)> -> _SINK_ 
<android.webkit.WebSettings: java.lang.String getCursiveFontFamily()> -> _SOURCE_
<java.lang.Character: boolean isSpaceChar(int)> -> _NONE_
<android.content.ContentValues: int hashCode()> -> _SINK_ 
<java.nio.FloatBuffer: java.nio.FloatBuffer put(float[])> -> _SOURCE_
<java.security.Timestamp: int hashCode()> -> _SINK_ 
<android.widget.AbsListView: int getCheckedItemCount()> -> _SOURCE_
<java.nio.charset.Charset: void <init>(java.lang.String,java.lang.String[])> -> _NONE_
<android.net.wifi.WifiEnterpriseConfig: int getPhase2Method()> -> _SOURCE_
<android.content.ContentProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)> -> _SOURCE_
<java.lang.ArithmeticException: void <init>(java.lang.String)> -> _NONE_
<java.lang.ExceptionInInitializerError: void <init>(java.lang.Throwable)> -> _NONE_
<android.os.Message: android.os.Message obtain(android.os.Handler,int,int,int,java.lang.Object)> -> _SINK_ 
<android.view.MotionEvent: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<android.net.Uri: boolean getBooleanQueryParameter(java.lang.String,boolean)> -> _SOURCE_
<java.lang.StringBuilder: void setLength(int)> -> _SINK_ 
<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothSocket createRfcommSocketToServiceRecord(java.util.UUID)> -> _NONE_
<java.nio.channels.FileChannel: long write(java.nio.ByteBuffer[])> -> _SOURCE_
<android.graphics.RectF: boolean setIntersect(android.graphics.RectF,android.graphics.RectF)> -> _SINK_ 
<android.content.pm.PackageItemInfo: void dumpBack(android.util.Printer,java.lang.String)> -> _NONE_
<java.lang.reflect.Field: void <init>()> -> _NONE_
<java.nio.charset.CodingErrorAction: java.lang.String toString()> -> _NONE_
<android.hardware.Camera$Parameters: java.util.List getSupportedPreviewFpsRange()> -> _SOURCE_
<android.widget.TextView: void sendAccessibilityEvent(int)> -> _NONE_
<android.widget.TextView: void setTextSize(int,float)> -> _SINK_ 
<java.net.DatagramSocketImpl: int getLocalPort()> -> _SOURCE_
<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)> -> _NONE_
<android.widget.AbsListView: void <init>(android.content.Context,android.util.AttributeSet)> -> _NONE_
<android.widget.TextView: void onBeginBatchEdit()> -> _NONE_
<android.telephony.SmsManager: void <init>()> -> _NONE_
<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])> -> _NONE_
<android.graphics.drawable.Drawable: boolean isVisible()> -> _NONE_
<android.os.Bundle: void putAll(android.os.Bundle)> -> _NONE_
<java.lang.Byte: java.lang.Byte decode(java.lang.String)> -> _SINK_ 
<java.lang.NoSuchMethodException: void <init>()> -> _NONE_
<android.app.Activity: void onDestroy()> -> _NONE_
<android.media.MediaFormat: void setByteBuffer(java.lang.String,java.nio.ByteBuffer)> -> _SINK_ 
<android.os.Messenger: int hashCode()> -> _SINK_ 
<android.view.ViewGroup: void addChildrenForAccessibility(java.util.ArrayList)> -> _NONE_
<android.os.Bundle: void remove(java.lang.String)> -> _NONE_
<android.bluetooth.BluetoothClass: boolean equals(java.lang.Object)> -> _NONE_
<android.app.Notification$Builder: android.app.Notification$Builder setSmallIcon(int)> -> _SINK_ 
<android.content.ContentResolver: java.lang.String[] getStreamTypes(android.net.Uri,java.lang.String)> -> _SOURCE_
<android.view.ViewGroup: boolean requestChildRectangleOnScreen(android.view.View,android.graphics.Rect,boolean)> -> _NONE_
<android.os.Looper: void prepare()> -> _NONE_
<android.app.Activity: void startActivityForResult(android.content.Intent,int)> -> _SINK_ 
<java.security.spec.ECParameterSpec: java.security.spec.EllipticCurve getCurve()> -> _SOURCE_
<android.nfc.tech.NfcB: boolean isConnected()> -> _NONE_
<java.nio.channels.SocketChannel: void <init>(java.nio.channels.spi.SelectorProvider)> -> _NONE_
<android.view.MotionEvent: void finalize()> -> _NONE_
<android.webkit.WebView: boolean canGoBackOrForward(int)> -> _NONE_
<android.app.ExpandableListActivity: void onGroupCollapse(int)> -> _NONE_
<android.net.http.SslError: java.lang.String toString()> -> _NONE_
<android.net.wifi.WifiInfo: android.net.NetworkInfo$DetailedState getDetailedStateOf(android.net.wifi.SupplicantState)> -> _SOURCE_
<android.graphics.Rect: android.graphics.Rect unflattenFromString(java.lang.String)> -> _SINK_ 
<android.content.ContextWrapper: void enforceCallingUriPermission(android.net.Uri,int,java.lang.String)> -> _NONE_
<android.provider.ContactsContract$ProfileSyncState: android.util.Pair getWithUri(android.content.ContentProviderClient,android.accounts.Account)> -> _SOURCE_
<android.content.ContentProviderClient: android.net.Uri canonicalize(android.net.Uri)> -> _SOURCE_
<android.graphics.MaskFilter: void <init>()> -> _NONE_
<android.view.ViewGroup: boolean onRequestFocusInDescendants(int,android.graphics.Rect)> -> _NONE_
<android.telephony.TelephonyManager: void <clinit>()> -> _NONE_
<android.graphics.Bitmap: void setHasAlpha(boolean)> -> _SINK_ 
<java.lang.Thread: void sleep(long)> -> _NONE_
<java.math.BigInteger: java.math.BigInteger remainder(java.math.BigInteger)> -> _NONE_
<android.graphics.Path$FillType: void <clinit>()> -> _NONE_
<android.media.MediaPlayer: void setScreenOnWhilePlaying(boolean)> -> _SINK_ 
<android.net.wifi.WifiManager: boolean removeNetwork(int)> -> _NONE_
<java.lang.StringBuilder: java.lang.StringBuilder append(float)> -> _NONE_
<android.view.View: void setDrawingCacheQuality(int)> -> _SINK_ 
<android.widget.ListView: android.graphics.drawable.Drawable getOverscrollHeader()> -> _SOURCE_
<java.nio.FloatBuffer: int compareTo(java.lang.Object)> -> _NONE_
<android.app.Activity: android.view.MenuInflater getMenuInflater()> -> _SOURCE_
<java.math.BigInteger: java.math.BigInteger nextProbablePrime()> -> _NONE_
<android.provider.Settings$Secure: boolean putLong(android.content.ContentResolver,java.lang.String,long)> -> _NONE_
<android.content.ContextWrapper: java.lang.String getPackageCodePath()> -> _SOURCE_
<java.lang.Throwable: java.lang.Throwable getCause()> -> _SOURCE_
<android.graphics.Paint$Align: android.graphics.Paint$Align valueOf(java.lang.String)> -> _SINK_ 
<java.io.PrintWriter: void println(double)> -> _NONE_
<android.nfc.NdefRecord: byte[] getId()> -> _SOURCE_
<android.animation.Animator: void resume()> -> _NONE_
<android.bluetooth.BluetoothAdapter: void stopLeScan(android.bluetooth.BluetoothAdapter$LeScanCallback)> -> _NONE_
<android.view.MotionEvent: float getPressure()> -> _SOURCE_
<android.webkit.ConsoleMessage$MessageLevel: android.webkit.ConsoleMessage$MessageLevel[] values()> -> _NONE_
<android.view.Window: void makeActive()> -> _NONE_
<android.provider.Settings$System: int getInt(android.content.ContentResolver,java.lang.String)> -> _SOURCE_
<java.util.ArrayList: void trimToSize()> -> _NONE_
<java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)> -> _NONE_
<android.util.Log: int w(java.lang.String,java.lang.Throwable)> -> _SINK_ 
<java.net.Socket: void setReceiveBufferSize(int)> -> _SINK_ 
<android.app.Fragment: android.app.Activity getActivity()> -> _SOURCE_
<java.util.AbstractMap: boolean equals(java.lang.Object)> -> _NONE_
<android.widget.TextView: boolean hasOverlappingRendering()> -> _NONE_
<android.bluetooth.BluetoothHeadset: boolean startVoiceRecognition(android.bluetooth.BluetoothDevice)> -> _SINK_ 
<android.view.Surface: void release()> -> _NONE_
<android.widget.ListView: void setOverscrollFooter(android.graphics.drawable.Drawable)> -> _SINK_ 
<android.widget.RemoteViews: void setShort(int,java.lang.String,short)> -> _SINK_ 
<android.util.TypedValue: float getDimension(android.util.DisplayMetrics)> -> _SOURCE_
<android.view.View: void postInvalidateOnAnimation(int,int,int,int)> -> _NONE_
<java.net.InetAddress: boolean isMCNodeLocal()> -> _NONE_
<android.view.View: boolean performClick()> -> _NONE_
<android.view.animation.Animation: void setInterpolator(android.content.Context,int)> -> _NONE_
<android.app.ActivityGroup: void onResume()> -> _NONE_
<android.view.ViewTreeObserver: void removeOnScrollChangedListener(android.view.ViewTreeObserver$OnScrollChangedListener)> -> _NONE_
<android.database.sqlite.SQLiteDatabase: void disableWriteAheadLogging()> -> _NONE_
<android.os.Parcel: void writeFloatArray(float[])> -> _NONE_
<java.lang.Byte: java.lang.String toString()> -> _NONE_
<android.view.ViewGroup: android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet)> -> _NONE_
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getLabelFor()> -> _SOURCE_
<android.app.Service: void startForeground(int,android.app.Notification)> -> _NONE_
<android.content.Intent: android.content.Intent setData(android.net.Uri)> -> _SINK_ 
<java.security.spec.EllipticCurve: boolean equals(java.lang.Object)> -> _NONE_
<android.location.LocationManager: void requestSingleUpdate(java.lang.String,android.location.LocationListener,android.os.Looper)> -> _NONE_
<android.webkit.WebChromeClient: void getVisitedHistory(android.webkit.ValueCallback)> -> _SOURCE_
<android.graphics.Matrix: void <init>()> -> _NONE_
<android.os.Parcel: android.os.Parcel obtain(int)> -> _SINK_ 
<android.graphics.Region: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<android.content.ContentProviderOperation: void <init>()> -> _NONE_
<android.provider.Settings$System: int getInt(android.content.ContentResolver,java.lang.String,int)> -> _SOURCE_
<android.view.ViewTreeObserver: boolean isAlive()> -> _NONE_
<android.widget.AbsListView: boolean onKeyUp(int,android.view.KeyEvent)> -> _NONE_
<android.app.ActivityGroup: android.app.LocalActivityManager getLocalActivityManager()> -> _SOURCE_
<android.app.ActivityGroup: void finish()> android.permission.BROADCAST_STICKY android.permission.USE_CREDENTIALS android.permission.MANAGE_APP_TOKENS android.permission.UPDATE_DEVICE_STATS -> _NONE_
<android.widget.AbsListView: void smoothScrollToPositionFromTop(int,int)> -> _NONE_
<android.app.Activity: boolean onTrackballEvent(android.view.MotionEvent)> -> _NONE_
<android.os.WorkSource: void set(android.os.WorkSource)> -> _SINK_ 
<android.database.CharArrayBuffer: void <init>(char[])> -> _NONE_
<android.view.View: boolean requestRectangleOnScreen(android.graphics.Rect)> -> _NONE_
<java.lang.String: java.lang.String toLowerCase()> -> _NONE_
<android.net.sip.SipAudioCall: boolean isInCall()> -> _NONE_
<java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])> -> _SINK_ 
<android.app.Activity: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int,android.os.Bundle)> -> _SINK_ 
<android.net.wifi.WifiManager$WifiLock: java.lang.String toString()> -> _NONE_
<android.os.Bundle: java.util.ArrayList getStringArrayList(java.lang.String)> -> _SOURCE_
<android.hardware.Camera$Parameters: void removeGpsData()> -> _NONE_
<android.content.ContentResolver: android.content.res.AssetFileDescriptor openTypedAssetFileDescriptor(android.net.Uri,java.lang.String,android.os.Bundle)> -> _NONE_
<android.util.SparseBooleanArray: void <init>(int)> -> _NONE_
<org.apache.http.util.ByteArrayBuffer: void <init>(int)> -> _NONE_
<android.location.Criteria: int getPowerRequirement()> -> _SOURCE_
<android.app.Fragment: void onTrimMemory(int)> -> _NONE_
<android.content.ContentProviderResult: int describeContents()> -> _SINK_ 
<android.telephony.ServiceState: void <init>(android.telephony.ServiceState)> -> _NONE_
<android.graphics.Canvas: int saveLayer(android.graphics.RectF,android.graphics.Paint,int)> -> _SINK_ 
<android.view.View: void bringToFront()> -> _NONE_
<android.webkit.JsResult: void <init>()> -> _NONE_
<android.view.ViewGroup: void dispatchSaveInstanceState(android.util.SparseArray)> -> _NONE_
<android.graphics.Canvas: boolean quickReject(android.graphics.RectF,android.graphics.Canvas$EdgeType)> -> _NONE_
<android.os.Message: void sendToTarget()> -> _NONE_
<android.content.Intent: android.content.Intent setPackage(java.lang.String)> -> _SINK_ 
<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)> -> _NONE_
<android.graphics.Paint: int getTextWidths(char[],int,int,float[])> -> _SOURCE_
<android.print.PrintAttributes$Resolution: int hashCode()> -> _SINK_ 
<android.view.ViewGroup: boolean isAlwaysDrawnWithCacheEnabled()> -> _NONE_
<android.app.Fragment: android.app.FragmentManager getFragmentManager()> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()> -> _SINK_ 
<android.view.View: int getHorizontalScrollbarHeight()> -> _SOURCE_
<java.io.Writer: void <init>()> -> _NONE_
<android.util.TypedValue: float complexToFloat(int)> -> _NONE_
<android.view.View: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> -> _NONE_
<android.net.wifi.WifiManager: java.util.List getScanResults()> -> _SOURCE_
<android.net.Uri: boolean isAbsolute()> -> _NONE_
<android.os.PowerManager$WakeLock: void finalize()> -> _NONE_
<android.telephony.SignalStrength: boolean equals(java.lang.Object)> -> _NONE_
<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()> -> _SOURCE_
<android.webkit.WebSettings: boolean getBlockNetworkImage()> -> _SOURCE_
<android.content.IntentSender: int getCreatorUid()> -> _SOURCE_
<java.nio.DoubleBuffer: double[] array()> -> _NONE_
<android.os.Bundle: java.io.Serializable getSerializable(java.lang.String)> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeProvider: java.util.List findAccessibilityNodeInfosByText(java.lang.String,int)> -> _NONE_
<android.animation.LayoutTransition: void addTransitionListener(android.animation.LayoutTransition$TransitionListener)> -> _NONE_
<android.graphics.Matrix: boolean postTranslate(float,float)> -> _NONE_
<android.media.MediaPlayer: void <init>()> -> _NONE_
<android.view.View: int getLayoutDirection()> -> _SOURCE_
<android.webkit.WebView: boolean onTouchEvent(android.view.MotionEvent)> -> _NONE_
<android.view.View: void onVisibilityChanged(android.view.View,int)> -> _NONE_
<android.nfc.NdefMessage: void <init>(android.nfc.NdefRecord,android.nfc.NdefRecord[])> -> _NONE_
<android.view.accessibility.AccessibilityRecord: void setCurrentItemIndex(int)> -> _SINK_ 
<java.nio.MappedByteBuffer: java.nio.MappedByteBuffer force()> -> _NONE_
<java.nio.channels.spi.AbstractSelectionKey: boolean isValid()> -> _NONE_
<android.bluetooth.BluetoothGattCharacteristic: int getProperties()> -> _SOURCE_
<android.webkit.HttpAuthHandler: void proceed(java.lang.String,java.lang.String)> -> _NONE_
<java.math.BigInteger: java.math.BigInteger shiftLeft(int)> -> _NONE_
<java.lang.String: void <init>(byte[],java.nio.charset.Charset)> -> _NONE_
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator xBy(float)> -> _NONE_
<java.net.NetworkInterface: java.net.NetworkInterface getByName(java.lang.String)> -> _SOURCE_
<android.bluetooth.BluetoothGatt: boolean executeReliableWrite()> -> _NONE_
<android.view.accessibility.AccessibilityNodeInfo: boolean isPassword()> -> _NONE_
<android.content.BroadcastReceiver$PendingResult: void clearAbortBroadcast()> -> _NONE_
<android.content.ContentProvider: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)> -> _NONE_
<java.net.URL: java.lang.String getRef()> -> _SOURCE_
<android.view.animation.Animation: void setZAdjustment(int)> -> _NONE_
<android.os.Messenger: void send(android.os.Message)> -> _SINK_ 
<android.view.Window: void setSoftInputMode(int)> -> _NONE_
<android.app.Fragment: void setUserVisibleHint(boolean)> -> _SINK_ 
<android.view.InputDevice$MotionRange: boolean isFromSource(int)> -> _NONE_
<android.widget.AdapterView: void onDetachedFromWindow()> -> _NONE_
<android.content.IntentFilter: void addDataType(java.lang.String)> -> _NONE_
<android.text.Layout: int getLineVisibleEnd(int)> -> _SOURCE_
<java.net.Proxy$Type: void <clinit>()> -> _NONE_
<android.content.ContentProviderResult: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<android.view.View: android.view.ViewTreeObserver getViewTreeObserver()> -> _SOURCE_
<android.widget.ExpandableListView: void <init>(android.content.Context,android.util.AttributeSet,int)> -> _NONE_
<android.view.MotionEvent: long getEventTime()> -> _SOURCE_
<android.content.ContextWrapper: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String)> -> _SINK_ 
<java.util.ArrayList: void <init>(int)> -> _NONE_
<android.graphics.Path$FillType: android.graphics.Path$FillType[] values()> -> _NONE_
<java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult flush(java.nio.ByteBuffer)> -> _SOURCE_
<android.view.MotionEvent$PointerProperties: void <init>(android.view.MotionEvent$PointerProperties)> -> _NONE_
<android.graphics.Region: boolean set(android.graphics.Region)> -> _SINK_ 
<android.webkit.WebChromeClient: void onShowCustomView(android.view.View,int,android.webkit.WebChromeClient$CustomViewCallback)> -> _NONE_
<android.view.accessibility.AccessibilityNodeInfo: java.util.List findAccessibilityNodeInfosByText(java.lang.String)> -> _NONE_
<android.content.ContentResolver: void requestSync(android.accounts.Account,java.lang.String,android.os.Bundle)> -> _NONE_
<org.apache.http.util.ByteArrayBuffer: byte[] toByteArray()> -> _NONE_
<java.security.InvalidKeyException: void <init>(java.lang.Throwable)> -> _NONE_
<java.io.OutputStream: void close()> -> _NONE_
<java.lang.Integer: void <init>(int)> -> _NONE_
<android.view.accessibility.AccessibilityRecord: int getCurrentItemIndex()> -> _SOURCE_
<android.graphics.Matrix: boolean postScale(float,float,float,float)> -> _NONE_
<android.widget.RemoteViews: int getLayoutId()> -> _SOURCE_
<android.location.Criteria: void setPowerRequirement(int)> -> _SINK_ 
<android.webkit.WebSettings: void setMediaPlaybackRequiresUserGesture(boolean)> -> _NONE_
<java.lang.reflect.Field: java.lang.String toGenericString()> -> _NONE_
<android.content.ContentProviderOperation$Builder: void <init>()> -> _NONE_
<android.webkit.WebView$HitTestResult: int getType()> -> _SOURCE_
<android.os.Parcel: void writeDouble(double)> -> _NONE_
<java.net.URLConnection: boolean getDoOutput()> -> _SOURCE_
<java.net.NetworkInterface: byte[] getHardwareAddress()> -> _SOURCE_
<java.net.NetworkInterface: java.util.Enumeration getSubInterfaces()> -> _SOURCE_
<android.net.sip.SipProfile: java.lang.String getSipDomain()> -> _SOURCE_
<android.location.Location: float distanceTo(android.location.Location)> -> _NONE_
<java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)> -> _NONE_
<android.widget.AbsListView: void smoothScrollToPosition(int)> -> _NONE_
<android.content.ContentResolver: boolean getMasterSyncAutomatically()> -> _SOURCE_
<android.view.KeyEvent: boolean isGamepadButton(int)> -> _NONE_
<android.net.Uri: boolean equals(java.lang.Object)> -> _NONE_
<android.content.ContentValues: void put(java.lang.String,java.lang.Float)> -> _NONE_
<android.os.Handler: android.os.Message obtainMessage(int)> -> _SOURCE_
<android.view.inputmethod.ExtractedTextRequest: void <clinit>()> -> _NONE_
<android.os.ParcelUuid: void <clinit>()> -> _NONE_
<android.telephony.CellIdentityCdma: int getBasestationId()> -> _SOURCE_
<android.widget.TextView: int getGravity()> -> _SOURCE_
<android.content.Intent: android.content.Intent addCategory(java.lang.String)> -> _NONE_
<android.view.View: void setLayoutDirection(int)> -> _SINK_ 
<android.graphics.Canvas: void setDrawFilter(android.graphics.DrawFilter)> -> _SINK_ 
<android.accounts.AccountManager: void <init>()> -> _NONE_
<android.app.Fragment: void setInitialSavedState(android.app.Fragment$SavedState)> -> _SINK_ 
<android.content.Loader: void onStartLoading()> -> _NONE_
<android.app.TaskStackBuilder: android.app.TaskStackBuilder create(android.content.Context)> -> _NONE_
<android.net.sip.SipManager: boolean isIncomingCallIntent(android.content.Intent)> -> _SINK_ 
<android.content.pm.ProviderInfo: void <clinit>()> -> _NONE_
<java.util.AbstractList: int lastIndexOf(java.lang.Object)> -> _NONE_
<android.text.Layout$Directions: void <init>()> -> _NONE_
<android.widget.RemoteViews: void setTextViewTextSize(int,int,float)> -> _SINK_ 
<java.net.InetAddress: java.net.InetAddress getByAddress(java.lang.String,byte[])> -> _SOURCE_
<android.view.inputmethod.CorrectionInfo: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<java.io.PrintStream: void print(long)> -> _NONE_
<java.lang.reflect.Field: boolean getBoolean(java.lang.Object)> -> _SOURCE_
<android.widget.TextView: void setAllCaps(boolean)> -> _SINK_ 
<android.content.pm.ComponentInfo: void <init>()> -> _NONE_
<android.webkit.WebBackForwardList: int getCurrentIndex()> -> _SOURCE_
<android.app.Dialog: void unregisterForContextMenu(android.view.View)> -> _NONE_
<android.content.ContextWrapper: android.content.res.Resources getResources()> -> _SOURCE_
<org.apache.http.util.CharArrayBuffer: char charAt(int)> -> _NONE_
<java.lang.ClassLoader: java.lang.Class defineClass(java.lang.String,byte[],int,int)> -> _NONE_
<android.util.SparseBooleanArray: void delete(int)> -> _NONE_
<android.view.Display: void getRealSize(android.graphics.Point)> -> _SOURCE_
<android.hardware.Camera$Parameters: java.util.List getZoomRatios()> -> _SOURCE_
<java.net.URI: java.net.URI create(java.lang.String)> -> _SINK_ 
<android.view.View: boolean getGlobalVisibleRect(android.graphics.Rect,android.graphics.Point)> -> _SOURCE_
<android.os.Message: void copyFrom(android.os.Message)> -> _NONE_
<android.content.res.AssetManager: android.content.res.AssetFileDescriptor openNonAssetFd(int,java.lang.String)> -> _SINK_ 
<java.nio.DoubleBuffer: boolean hasArray()> -> _NONE_
<android.view.View: boolean isTextAlignmentResolved()> -> _NONE_
<android.database.sqlite.SQLiteDatabase: int updateWithOnConflict(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[],int)> -> _SINK_ 
<android.graphics.Point: void offset(int,int)> -> _NONE_
<java.lang.reflect.Field: boolean equals(java.lang.Object)> -> _NONE_
<java.io.FileDescriptor: boolean valid()> -> _NONE_
<java.lang.ThreadGroup: void setMaxPriority(int)> -> _SINK_ 
<android.widget.ExpandableListView: int getFlatListPosition(long)> -> _SOURCE_
<android.telephony.CellSignalStrengthCdma: int hashCode()> -> _SINK_ 
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator scaleY(float)> -> _NONE_
<android.view.KeyEvent: boolean isCanceled()> -> _NONE_
<android.view.KeyEvent: java.lang.String toString()> -> _NONE_
<android.view.accessibility.AccessibilityRecord: void setScrollY(int)> -> _SINK_ 
<android.provider.Browser: void saveBookmark(android.content.Context,java.lang.String,java.lang.String)> -> _NONE_
<android.os.RemoteException: void <init>()> -> _NONE_
<android.webkit.WebSettings: void setCursiveFontFamily(java.lang.String)> -> _NONE_
<android.app.Activity: boolean dispatchKeyEvent(android.view.KeyEvent)> -> _NONE_
<android.hardware.Camera$Parameters: int getZoom()> -> _SOURCE_
<android.os.Bundle: double getDouble(java.lang.String)> -> _SOURCE_
<android.widget.AbsListView: void onGlobalLayout()> -> _NONE_
<android.view.inputmethod.ExtractedTextRequest: void <init>()> -> _NONE_
<java.io.Reader: int read(java.nio.CharBuffer)> -> _NONE_
<java.lang.Double: int compare(double,double)> -> _SINK_ 
<java.net.URL: int hashCode()> -> _SINK_ 
<java.math.BigInteger: java.math.BigInteger min(java.math.BigInteger)> -> _NONE_
<android.os.Bundle: java.lang.Object get(java.lang.String)> -> _SOURCE_
<android.os.Bundle: double[] getDoubleArray(java.lang.String)> -> _SOURCE_
<java.lang.Class: java.lang.String getName()> -> _SOURCE_
<android.content.ContentResolver: android.os.ParcelFileDescriptor openFileDescriptor(android.net.Uri,java.lang.String)> -> _NONE_
<android.hardware.Camera$Parameters: void setPreviewSize(int,int)> -> _SINK_ 
<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)> -> _SOURCE_
<android.net.http.SslCertificate: java.lang.String getValidNotBefore()> -> _SOURCE_
<android.widget.Scroller: void <init>(android.content.Context)> -> _NONE_
<android.net.sip.SipProfile: java.lang.String getUserName()> -> _SOURCE_
<android.view.View: void setNextFocusUpId(int)> -> _SINK_ 
<android.app.Dialog: void onPanelClosed(int,android.view.Menu)> -> _NONE_
<android.view.Window: void setWindowManager(android.view.WindowManager,android.os.IBinder,java.lang.String,boolean)> -> _NONE_
<android.graphics.Canvas: void setDensity(int)> -> _SINK_ 
<android.view.View: boolean dispatchKeyEvent(android.view.KeyEvent)> -> _NONE_
<android.view.KeyCharacterMap: int get(int,int)> -> _SOURCE_
<android.widget.AdapterView: android.widget.AdapterView$OnItemClickListener getOnItemClickListener()> -> _SOURCE_
<android.widget.TextView: void setHeight(int)> -> _SINK_ 
<android.os.Bundle: void setClassLoader(java.lang.ClassLoader)> -> _SINK_ 
<android.view.WindowManager$LayoutParams: void <init>(int,int,int)> -> _NONE_
<android.graphics.Bitmap: void eraseColor(int)> -> _NONE_
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.CharSequence)> -> _NONE_
<java.io.FilterOutputStream: void <init>(java.io.OutputStream)> -> _NONE_
<java.net.ContentHandler: java.lang.Object getContent(java.net.URLConnection,java.lang.Class[])> -> _SOURCE_
<android.view.MotionEvent: int getAction()> -> _SOURCE_
<java.lang.Class: boolean isAnnotationPresent(java.lang.Class)> -> _NONE_
<android.graphics.Bitmap: void getPixels(int[],int,int,int,int,int,int)> -> _SOURCE_
<android.view.LayoutInflater: void <init>(android.content.Context)> -> _NONE_
<java.util.ArrayList: boolean remove(java.lang.Object)> -> _NONE_
<android.os.Vibrator: void <init>()> -> _NONE_
<android.content.SyncAdapterType: boolean isUserVisible()> -> _NONE_
<android.content.Context: void registerComponentCallbacks(android.content.ComponentCallbacks)> -> _NONE_
<android.view.View: void onFinishInflate()> -> _NONE_
<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)> -> _NONE_
<android.view.InputDevice: int getControllerNumber()> -> _SOURCE_
<java.net.DatagramPacket: byte[] getData()> -> _SOURCE_
<android.widget.TextView: void setEms(int)> -> _SINK_ 
<java.security.Timestamp: java.util.Date getTimestamp()> -> _SOURCE_
<android.nfc.NdefMessage: boolean equals(java.lang.Object)> -> _NONE_
<android.content.pm.ComponentInfo: boolean isEnabled()> -> _NONE_
<java.lang.Character: boolean isIdentifierIgnorable(int)> -> _NONE_
<android.view.WindowId: boolean equals(java.lang.Object)> -> _NONE_
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo obtain(android.view.accessibility.AccessibilityNodeInfo)> -> _NONE_
<android.graphics.Path: void transform(android.graphics.Matrix,android.graphics.Path)> -> _NONE_
<android.content.Intent: java.lang.String toUri(int)> -> _NONE_
<java.net.DatagramSocket: boolean getBroadcast()> -> _SOURCE_
<android.content.ContextWrapper: int checkCallingOrSelfPermission(java.lang.String)> -> _SINK_ 
<android.graphics.drawable.Drawable: boolean setLevel(int)> -> _NONE_
<android.view.animation.LayoutAnimationController: void setAnimation(android.content.Context,int)> -> _SINK_ 
<android.graphics.Path: void addArc(android.graphics.RectF,float,float)> -> _NONE_
<java.nio.charset.CharsetEncoder: void implReset()> -> _NONE_
<android.view.View: boolean isHorizontalScrollBarEnabled()> -> _NONE_
<android.graphics.Picture: android.graphics.Picture createFromStream(java.io.InputStream)> -> _SOURCE_
<android.view.View: void setRotationX(float)> -> _SINK_ 
<java.lang.IllegalAccessError: void <init>(java.lang.String)> -> _NONE_
<android.telephony.ServiceState: void setRoaming(boolean)> -> _SINK_ 
<android.graphics.Matrix: boolean mapRect(android.graphics.RectF,android.graphics.RectF)> -> _NONE_
<android.os.Bundle: void readFromParcel(android.os.Parcel)> -> _NONE_
<android.webkit.ConsoleMessage: android.webkit.ConsoleMessage$MessageLevel messageLevel()> -> _NONE_
<android.widget.TextView: boolean onTextContextMenuItem(int)> -> _NONE_
<android.graphics.Path$Direction: void <clinit>()> -> _NONE_
<android.view.View: float getRotationX()> -> _SOURCE_
<android.view.View: void createContextMenu(android.view.ContextMenu)> -> _NONE_
<android.view.View$AccessibilityDelegate: void <init>()> -> _NONE_
<android.hardware.Camera$Parameters: void setFocusMode(java.lang.String)> -> _SINK_ 
<android.location.Criteria: void setSpeedRequired(boolean)> -> _SINK_ 
<android.app.Notification$Builder: android.app.Notification$Builder setOngoing(boolean)> -> _SINK_ 
<android.net.wifi.WifiInfo: int getLinkSpeed()> -> _SOURCE_
<java.lang.Double: java.lang.String toString()> -> _NONE_
<android.view.ViewTreeObserver: void removeOnTouchModeChangeListener(android.view.ViewTreeObserver$OnTouchModeChangeListener)> -> _NONE_
<android.widget.ListView: void addHeaderView(android.view.View)> -> _NONE_
<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)> -> _SOURCE_
<java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()> -> _SOURCE_
<android.app.Activity: android.app.ActionBar getActionBar()> -> _SOURCE_
<android.graphics.Canvas: void drawRGB(int,int,int)> -> _NONE_
<android.graphics.Paint: android.graphics.Paint$Style getStyle()> -> _SOURCE_
<java.io.Reader: void mark(int)> -> _NONE_
<android.accessibilityservice.AccessibilityService: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)> android.permission.MANAGE_APP_TOKENS -> _SINK_ 
<java.nio.channels.spi.AbstractSelectableChannel: void implCloseChannel()> -> _NONE_
<android.widget.TextView: void setEnabled(boolean)> -> _SINK_ 
<android.view.MotionEvent: float getX()> -> _SOURCE_
<android.hardware.Camera$Parameters: void setGpsLongitude(double)> -> _SINK_ 
<java.lang.StringBuilder: int codePointCount(int,int)> -> _SINK_ 
<android.content.ContentResolver: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)> android.permission.READ_SYNC_SETTINGS -> _SOURCE_
<android.view.KeyCharacterMap: android.view.KeyEvent[] getEvents(char[])> -> _SOURCE_
<java.security.CodeSource: void <init>(java.net.URL,java.security.cert.Certificate[])> -> _NONE_
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,int)> -> _NONE_
<android.content.ClipData: android.content.ClipData$Item getItemAt(int)> -> _SOURCE_
<android.widget.TextView: android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo)> -> _NONE_
<android.content.res.Resources: java.lang.String[] getStringArray(int)> -> _SOURCE_
<android.os.Bundle: void clear()> -> _NONE_
<java.util.UUID: long getMostSignificantBits()> -> _SOURCE_
<android.content.Intent: double[] getDoubleArrayExtra(java.lang.String)> -> _SOURCE_
<android.os.Message: void <init>()> -> _NONE_
<android.print.PrintAttributes$Margins: void <clinit>()> -> _NONE_
<java.net.InetAddress: boolean isLinkLocalAddress()> -> _NONE_
<android.animation.ValueAnimator: void setStartDelay(long)> -> _SINK_ 
<android.widget.TextView: boolean onTrackballEvent(android.view.MotionEvent)> -> _NONE_
<android.animation.LayoutTransition: android.animation.Animator getAnimator(int)> -> _SOURCE_
<android.widget.ListView: void <init>(android.content.Context,android.util.AttributeSet,int)> -> _NONE_
<java.io.FilterOutputStream: void write(int)> -> _NONE_
<android.content.pm.FeatureInfo: void <init>()> -> _NONE_
<java.net.Socket: void setSoTimeout(int)> -> _SINK_ 
<android.location.Location: void removeBearing()> -> _NONE_
<android.os.WorkSource: java.lang.String toString()> -> _NONE_
<android.webkit.WebSettings: boolean getJavaScriptCanOpenWindowsAutomatically()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<java.lang.Thread: void stop(java.lang.Throwable)> -> _NONE_
<java.lang.Character: int charCount(int)> -> _SINK_ 
<android.animation.ValueAnimator: void setObjectValues(java.lang.Object[])> -> _SINK_ 
<android.util.Log: int d(java.lang.String,java.lang.String)> -> _SINK_ 
<java.nio.LongBuffer: long[] array()> -> _NONE_
<java.net.SocketImpl: java.io.FileDescriptor getFileDescriptor()> -> _SOURCE_
<android.nfc.NfcAdapter: void disableForegroundDispatch(android.app.Activity)> android.permission.NFC -> _NONE_
<android.view.View: void setOnKeyListener(android.view.View$OnKeyListener)> -> _SINK_ 
<android.view.ViewGroup: void notifySubtreeAccessibilityStateChanged(android.view.View,android.view.View,int)> -> _NONE_
<java.io.File: boolean canExecute()> -> _NONE_
<java.nio.Buffer: java.nio.Buffer clear()> -> _NONE_
<android.app.Activity: android.view.WindowManager getWindowManager()> -> _SOURCE_
<android.app.Dialog: void setFeatureDrawableAlpha(int,int)> -> _SINK_ 
<android.content.Intent: java.lang.CharSequence[] getCharSequenceArrayExtra(java.lang.String)> -> _SOURCE_
<java.lang.StringBuffer: java.lang.StringBuffer deleteCharAt(int)> -> _NONE_
<java.lang.IndexOutOfBoundsException: void <init>()> -> _NONE_
<android.print.PrintAttributes$MediaSize: boolean isPortrait()> -> _NONE_
<java.util.AbstractMap: int size()> -> _NONE_
<android.webkit.WebView$HitTestResult: java.lang.String getExtra()> -> _SOURCE_
<java.io.File: int hashCode()> -> _SINK_ 
<android.nfc.FormatException: void <init>()> -> _NONE_
<android.content.BroadcastReceiver$PendingResult: int getResultCode()> -> _SOURCE_
<android.widget.ExpandableListView: boolean expandGroup(int)> -> _NONE_
<android.content.ContextWrapper: void sendBroadcast(android.content.Intent)> -> _SINK_ 
<java.io.FileOutputStream: void <init>(java.lang.String)> -> _NONE_
<android.view.View: boolean getKeepScreenOn()> -> _SOURCE_
<android.content.ContentProviderClient: java.lang.String getType(android.net.Uri)> -> _SOURCE_
<android.widget.TextView: void removeTextChangedListener(android.text.TextWatcher)> -> _NONE_
<java.lang.Byte: byte parseByte(java.lang.String,int)> -> _SINK_ 
<android.view.accessibility.AccessibilityNodeInfo$CollectionInfo: void <init>()> -> _NONE_
<android.net.sip.SipAudioCall: void makeCall(android.net.sip.SipProfile,android.net.sip.SipSession,int)> -> _NONE_
<android.graphics.Bitmap: int getRowBytes()> -> _SOURCE_
<android.provider.ContactsContract$ProfileSyncState: android.content.ContentProviderOperation newSetOperation(android.accounts.Account,byte[])> -> _SINK_ 
<java.util.Locale: java.lang.String[] getISOCountries()> -> _SOURCE_
<android.content.Loader: int getId()> -> _SOURCE_
<android.app.Fragment$SavedState: void <init>()> -> _NONE_
<android.telephony.CellInfo: int describeContents()> -> _NONE_
<java.lang.Object: void <init>()> -> _NONE_
<android.view.MotionEvent: float getOrientation(int)> -> _SOURCE_
<java.lang.Character: int codePointCount(java.lang.CharSequence,int,int)> -> _SINK_ 
<android.app.Activity: void onTitleChanged(java.lang.CharSequence,int)> -> _NONE_
<android.view.View: void removeOnLayoutChangeListener(android.view.View$OnLayoutChangeListener)> -> _NONE_
<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()> -> _SOURCE_
<android.view.DragEvent: android.content.ClipData getClipData()> -> _SOURCE_
<java.lang.StringBuffer: java.lang.StringBuffer append(char[])> -> _NONE_
<android.graphics.Paint: void <init>(int)> -> _NONE_
<android.hardware.Camera$Parameters: int getMaxNumMeteringAreas()> -> _SOURCE_
<android.net.wifi.WifiManager$MulticastLock: boolean isHeld()> -> _NONE_
<android.view.View: void addFocusables(java.util.ArrayList,int,int)> -> _NONE_
<java.io.PrintStream: void write(int)> -> _NONE_
<android.hardware.Camera$Parameters: boolean isAutoWhiteBalanceLockSupported()> -> _NONE_
<java.security.spec.ECParameterSpec: void <init>(java.security.spec.EllipticCurve,java.security.spec.ECPoint,java.math.BigInteger,int)> android.permission.STOP_APP_SWITCHES -> _NONE_
<java.io.FileOutputStream: void finalize()> -> _NONE_
<android.animation.Animator: void setupEndValues()> -> _NONE_
<java.io.PrintStream: void println(double)> -> _NONE_
<android.content.ComponentName: java.lang.String getPackageName()> -> _SOURCE_
<android.content.ContextWrapper: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)> -> _SINK_ 
<android.net.wifi.WifiManager: android.net.wifi.WifiManager$MulticastLock createMulticastLock(java.lang.String)> -> _SOURCE_
<android.graphics.Paint: int getTextWidths(java.lang.String,int,int,float[])> -> _SOURCE_
<org.apache.http.util.CharArrayBuffer: void <init>(int)> -> _NONE_
<android.webkit.WebViewClient: void onReceivedHttpAuthRequest(android.webkit.WebView,android.webkit.HttpAuthHandler,java.lang.String,java.lang.String)> -> _NONE_
<android.hardware.Camera$Parameters: void set(java.lang.String,int)> -> _SINK_ 
<android.text.Layout: boolean isRtlCharAt(int)> -> _NONE_
<android.graphics.Paint: android.graphics.ColorFilter setColorFilter(android.graphics.ColorFilter)> -> _SINK_ 
<android.nfc.tech.IsoDep: boolean isExtendedLengthApduSupported()> -> _NONE_
<java.lang.Boolean: java.lang.String toString(boolean)> -> _SINK_ 
<android.os.Parcel: void readBinderArray(android.os.IBinder[])> -> _NONE_
<android.print.PrintDocumentInfo: boolean equals(java.lang.Object)> -> _NONE_
<android.view.View: int getPaddingRight()> -> _SOURCE_
<android.view.ViewGroup: boolean dispatchTouchEvent(android.view.MotionEvent)> -> _NONE_
<android.content.pm.InstrumentationInfo: void <clinit>()> -> _NONE_
<java.lang.String: boolean contentEquals(java.lang.StringBuffer)> -> _NONE_
<android.widget.TextView: void setScroller(android.widget.Scroller)> -> _SINK_ 
<android.os.Parcel: java.util.ArrayList createStringArrayList()> -> _NONE_
<android.database.sqlite.SQLiteDatabase: long replace(java.lang.String,java.lang.String,android.content.ContentValues)> -> _NONE_
<android.content.Intent: android.net.Uri getData()> -> _SOURCE_
<android.widget.TextView: void setKeyListener(android.text.method.KeyListener)> -> _SINK_ 
<android.telephony.CellInfoCdma: java.lang.String toString()> -> _NONE_
<android.view.ViewTreeObserver: void addOnPreDrawListener(android.view.ViewTreeObserver$OnPreDrawListener)> -> _NONE_
<android.app.Dialog: void setOnDismissListener(android.content.DialogInterface$OnDismissListener)> -> _SINK_ 
<android.provider.Browser: void updateVisitedHistory(android.content.ContentResolver,java.lang.String,boolean)> -> _NONE_
<android.widget.AbsListView: boolean isPaddingOffsetRequired()> -> _NONE_
<android.net.sip.SipManager: void close(java.lang.String)> android.permission.USE_SIP android.permission.WAKE_LOCK -> _NONE_
<android.app.ActionBar: void setSplitBackgroundDrawable(android.graphics.drawable.Drawable)> -> _NONE_
<android.net.wifi.WifiEnterpriseConfig: java.lang.String getSubjectMatch()> -> _SOURCE_
<android.widget.AbsListView: int getVerticalScrollbarWidth()> -> _SOURCE_
<android.nfc.NdefRecord: android.nfc.NdefRecord createExternal(java.lang.String,java.lang.String,byte[])> -> _SINK_ 
<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)> -> _NONE_
<java.io.File: boolean setWritable(boolean,boolean)> -> _SINK_ 
<android.webkit.WebSettings: int getCacheMode()> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQueryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,java.lang.String[],java.lang.String)> -> _SOURCE_
<java.nio.IntBuffer: boolean hasArray()> -> _NONE_
<android.view.View$AccessibilityDelegate: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider(android.view.View)> -> _SOURCE_
<java.lang.StringBuilder: int indexOf(java.lang.String,int)> -> _SINK_ 
<java.nio.channels.FileLock: void <init>(java.nio.channels.FileChannel,long,long,boolean)> -> _NONE_
<android.util.SparseBooleanArray: boolean get(int,boolean)> -> _SOURCE_
<android.webkit.WebChromeClient: boolean onJsBeforeUnload(android.webkit.WebView,java.lang.String,java.lang.String,android.webkit.JsResult)> -> _NONE_
<android.view.animation.Animation: void setBackgroundColor(int)> -> _NONE_
<android.os.Bundle: void putByte(java.lang.String,byte)> -> _NONE_
<android.view.View: boolean postDelayed(java.lang.Runnable,long)> -> _NONE_
<java.util.HashMap: void <init>(java.util.Map)> -> _NONE_
<android.graphics.RectF: float height()> -> _NONE_
<android.net.sip.SipSession$Listener: void onRegistering(android.net.sip.SipSession)> -> _NONE_
<java.security.NoSuchAlgorithmException: void <init>(java.lang.String)> -> _NONE_
<android.view.accessibility.AccessibilityNodeInfo: java.lang.String toString()> -> _NONE_
<android.view.MotionEvent: float getAxisValue(int)> -> _SOURCE_
<android.view.accessibility.AccessibilityEvent: void setEventTime(long)> -> _SINK_ 
<android.graphics.Path: void addRoundRect(android.graphics.RectF,float,float,android.graphics.Path$Direction)> -> _NONE_
<android.text.style.ClickableSpan: void updateDrawState(android.text.TextPaint)> -> _NONE_
<android.view.accessibility.AccessibilityRecord: android.os.Parcelable getParcelableData()> -> _SOURCE_
<android.animation.LayoutTransition: void showChild(android.view.ViewGroup,android.view.View,int)> -> _NONE_
<android.os.Bundle: double getDouble(java.lang.String,double)> -> _SOURCE_
<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)> -> _SOURCE_
<android.content.ContentResolver: android.content.res.AssetFileDescriptor openTypedAssetFileDescriptor(android.net.Uri,java.lang.String,android.os.Bundle,android.os.CancellationSignal)> -> _NONE_
<java.lang.Character: java.lang.String toString(char)> -> _SINK_ 
<android.widget.TextView: void setMaxLines(int)> -> _SINK_ 
<android.view.KeyEvent: java.lang.String getCharacters()> -> _SOURCE_
<android.widget.ListView: boolean getItemsCanFocus()> -> _SOURCE_
<java.nio.LongBuffer: java.nio.LongBuffer get(long[],int,int)> -> _SOURCE_
<android.view.View: void postOnAnimation(java.lang.Runnable)> -> _NONE_
<android.provider.Settings$System: long getLong(android.content.ContentResolver,java.lang.String)> -> _SOURCE_
<java.net.URI: java.lang.String toASCIIString()> -> _NONE_
<java.nio.ShortBuffer: java.nio.ShortBuffer get(short[])> -> _SOURCE_
<java.net.Proxy: java.net.Proxy$Type type()> -> _NONE_
<android.view.View: android.graphics.Matrix getMatrix()> -> _SOURCE_
<java.net.URLConnection: java.io.OutputStream getOutputStream()> -> _SOURCE_
<android.view.View: android.os.Handler getHandler()> -> _SOURCE_
<android.widget.RemoteViews: void setTextColor(int,int)> -> _SINK_ 
<android.webkit.ConsoleMessage$MessageLevel: void <clinit>()> -> _NONE_
<android.os.Parcel: void unmarshall(byte[],int,int)> -> _NONE_
<android.telephony.ServiceState: int describeContents()> -> _NONE_
<android.webkit.WebView: void <init>(android.content.Context)> android.permission.INTERNET -> _NONE_
<java.lang.ClassNotFoundException: java.lang.Throwable getException()> -> _SOURCE_
<java.io.File: java.lang.String[] list()> -> _NONE_
<android.view.InputDevice: int[] getDeviceIds()> -> _SOURCE_
<android.graphics.Paint: void getTextBounds(char[],int,int,android.graphics.Rect)> -> _SOURCE_
<android.view.MotionEvent: long getHistoricalEventTime(int)> -> _SOURCE_
<android.view.MotionEvent: void setEdgeFlags(int)> -> _SINK_ 
<java.lang.StringBuilder: int length()> -> _SINK_ 
<android.content.Intent: android.content.Intent putParcelableArrayListExtra(java.lang.String,java.util.ArrayList)> -> _NONE_
<android.graphics.Rect: void <init>(android.graphics.Rect)> -> _NONE_
<android.widget.AbsListView: android.widget.AbsListView$LayoutParams generateLayoutParams(android.util.AttributeSet)> -> _NONE_
<android.widget.TextView: int getMinLines()> -> _SOURCE_
<android.view.MotionEvent: void getPointerProperties(int,android.view.MotionEvent$PointerProperties)> -> _SOURCE_
<android.content.ContextWrapper: int checkUriPermission(android.net.Uri,int,int,int)> -> _SINK_ 
<java.nio.channels.FileChannel: java.nio.channels.FileLock tryLock()> -> _NONE_
<android.text.Layout: int getEllipsizedWidth()> -> _SOURCE_
<android.net.sip.SipProfile: java.lang.String getProfileName()> -> _SOURCE_
<android.bluetooth.BluetoothGatt: boolean writeDescriptor(android.bluetooth.BluetoothGattDescriptor)> -> _NONE_
<android.net.Uri: void <init>()> -> _NONE_
<android.location.LocationManager: java.util.List getProviders(boolean)> -> _SOURCE_
<android.app.Fragment: boolean isDetached()> -> _NONE_
<android.view.ViewGroup: void dispatchVisibilityChanged(android.view.View,int)> -> _NONE_
<android.view.ViewGroup: boolean drawChild(android.graphics.Canvas,android.view.View,long)> -> _NONE_
<android.app.Activity: void onAttachedToWindow()> -> _NONE_
<android.webkit.WebView: int computeHorizontalScrollOffset()> -> _NONE_
<android.net.http.SslCertificate: android.net.http.SslCertificate$DName getIssuedBy()> -> _SOURCE_
<android.app.Dialog: boolean onGenericMotionEvent(android.view.MotionEvent)> -> _NONE_
<android.widget.AdapterView: long getItemIdAtPosition(int)> -> _SOURCE_
<android.view.MotionEvent$PointerProperties: void clear()> -> _NONE_
<android.view.ViewGroup: void addView(android.view.View)> -> _NONE_
<java.lang.Double: java.lang.String toHexString(double)> -> _SINK_ 
<android.net.wifi.WifiManager: boolean reassociate()> -> _NONE_
<android.widget.TextView: void onCommitCompletion(android.view.inputmethod.CompletionInfo)> -> _NONE_
<android.graphics.Bitmap: void setPremultiplied(boolean)> -> _SINK_ 
<android.view.View: void setSoundEffectsEnabled(boolean)> -> _SINK_ 
<android.content.Intent: java.lang.String getScheme()> -> _SOURCE_
<android.animation.ValueAnimator: void setValues(android.animation.PropertyValuesHolder[])> -> _SINK_ 
<java.lang.Long: java.lang.String toString(long,int)> -> _SINK_ 
<android.view.accessibility.AccessibilityNodeInfo: boolean performAction(int)> -> _NONE_
<java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)> -> _NONE_
<android.content.res.ColorStateList: boolean isStateful()> -> _NONE_
<android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,int,float,float,float,float,int,float,float,int,int)> -> _SINK_ 
<android.view.View: boolean isDuplicateParentStateEnabled()> -> _NONE_
<android.app.Activity: boolean isDestroyed()> -> _NONE_
<android.os.PatternMatcher: void <init>(java.lang.String,int)> -> _NONE_
<android.webkit.WebBackForwardList: android.webkit.WebHistoryItem getCurrentItem()> -> _SOURCE_
<java.util.AbstractList: java.util.ListIterator listIterator()> -> _NONE_
<android.webkit.WebView: boolean shouldDelayChildPressedState()> -> _NONE_
<android.view.View: boolean getGlobalVisibleRect(android.graphics.Rect)> -> _SOURCE_
<org.apache.http.message.BasicLineParser: void skipWhitespace(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> -> _NONE_
<android.view.InputDevice: boolean[] hasKeys(int[])> -> _NONE_
<java.nio.channels.FileLock: boolean isShared()> -> _NONE_
<java.util.UUID: long node()> -> _NONE_
<android.os.Bundle: byte getByte(java.lang.String)> -> _SOURCE_
<android.app.Dialog: android.app.Activity getOwnerActivity()> -> _SOURCE_
<android.accounts.OperationCanceledException: void <init>()> -> _NONE_
<android.bluetooth.BluetoothGattCharacteristic: java.util.UUID getUuid()> -> _SOURCE_
<android.content.res.Resources: android.content.res.XmlResourceParser getXml(int)> -> _SOURCE_
<android.graphics.Region: boolean set(android.graphics.Rect)> -> _SINK_ 
<android.nfc.NdefRecord: short getTnf()> -> _SOURCE_
<android.os.Bundle: int getInt(java.lang.String)> -> _SOURCE_
<android.view.View: void dispatchSetActivated(boolean)> -> _NONE_
<android.graphics.RectF: void set(android.graphics.Rect)> -> _SINK_ 
<android.graphics.Matrix: boolean postConcat(android.graphics.Matrix)> -> _NONE_
<java.nio.Buffer: int position()> -> _NONE_
<android.view.MotionEvent: float getHistoricalSize(int,int)> -> _SOURCE_
<java.lang.StringBuffer: java.lang.StringBuffer append(int)> -> _NONE_
<java.lang.Character: boolean isISOControl(char)> -> _NONE_
<java.lang.Long: long reverse(long)> -> _SINK_ 
<java.nio.CharBuffer: java.nio.CharBuffer wrap(char[],int,int)> -> _NONE_
<android.graphics.Point: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<java.lang.Byte: int hashCode()> -> _SINK_ 
<java.lang.ThreadGroup: void interrupt()> -> _NONE_
<android.telephony.CellIdentityCdma: int getNetworkId()> -> _SOURCE_
<android.view.View: boolean isAttachedToWindow()> -> _NONE_
<android.view.ViewPropertyAnimator: void cancel()> -> _NONE_
<android.os.Parcel: void readCharArray(char[])> -> _NONE_
<java.lang.Thread: boolean isDaemon()> -> _NONE_
<android.app.Activity: void onContentChanged()> -> _NONE_
<android.app.Service: int onStartCommand(android.content.Intent,int,int)> -> _SINK_ 
<android.content.Intent: java.lang.String normalizeMimeType(java.lang.String)> -> _NONE_
<android.view.View: int getMinimumWidth()> -> _SOURCE_
<android.content.ContentResolver: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> -> _SOURCE_
<android.view.ViewGroup: boolean dispatchHoverEvent(android.view.MotionEvent)> -> _NONE_
<android.view.animation.Animation: boolean getTransformation(long,android.view.animation.Transformation,float)> -> _SOURCE_
<android.view.View: void setOnCreateContextMenuListener(android.view.View$OnCreateContextMenuListener)> -> _SINK_ 
<android.widget.TextView: void setEllipsize(android.text.TextUtils$TruncateAt)> -> _SINK_ 
<java.io.PrintWriter: void <init>(java.lang.String,java.lang.String)> -> _NONE_
<java.lang.String: byte[] getBytes(java.nio.charset.Charset)> -> _SOURCE_
<android.content.ContentResolver: android.content.ContentProviderResult[] applyBatch(java.lang.String,java.util.ArrayList)> -> _NONE_
<android.bluetooth.BluetoothGattCharacteristic: boolean addDescriptor(android.bluetooth.BluetoothGattDescriptor)> -> _NONE_
<java.nio.Buffer: java.nio.Buffer flip()> -> _NONE_
<java.lang.reflect.Field: float getFloat(java.lang.Object)> -> _SOURCE_
<java.util.AbstractCollection: boolean remove(java.lang.Object)> -> _NONE_
<android.media.MediaFormat: java.lang.String getString(java.lang.String)> -> _SOURCE_
<android.webkit.WebView: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> -> _NONE_
<java.math.BigInteger: int signum()> -> _SINK_ 
<android.app.Fragment: void setMenuVisibility(boolean)> -> _SINK_ 
<android.view.View: void setLayoutParams(android.view.ViewGroup$LayoutParams)> -> _SINK_ 
<android.view.View: android.view.View findFocus()> -> _NONE_
<android.database.sqlite.SQLiteDatabase: java.util.Map getSyncedTables()> -> _SOURCE_
<java.lang.StringBuffer: void setCharAt(int,char)> -> _SINK_ 
<android.accessibilityservice.AccessibilityServiceInfo: java.lang.String getDescription()> -> _SOURCE_
<android.widget.TextView: int getExtendedPaddingTop()> -> _SOURCE_
<android.widget.AbsListView: void onRtlPropertiesChanged(int)> -> _NONE_
<android.provider.Settings$System: boolean putLong(android.content.ContentResolver,java.lang.String,long)> -> _NONE_
<android.print.PrintAttributes$Resolution: java.lang.String getLabel()> -> _SOURCE_
<android.webkit.WebView: int computeVerticalScrollExtent()> -> _NONE_
<java.nio.DoubleBuffer: java.nio.DoubleBuffer allocate(int)> -> _NONE_
<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()> -> _SOURCE_
<android.content.ComponentName: void <init>(android.content.Context,java.lang.String)> -> _NONE_
<android.widget.AdapterView: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)> -> _NONE_
<android.graphics.Matrix: void mapPoints(float[])> -> _NONE_
<java.nio.Buffer: java.nio.Buffer position(int)> -> _SOURCE_
<android.view.animation.Transformation: void compose(android.view.animation.Transformation)> -> _NONE_
<java.lang.StringBuffer: java.lang.StringBuffer delete(int,int)> -> _NONE_
<android.graphics.Rect: boolean contains(android.graphics.Rect)> -> _NONE_
<java.net.Proxy: boolean equals(java.lang.Object)> -> _NONE_
<android.app.Fragment: void onViewStateRestored(android.os.Bundle)> -> _NONE_
<android.graphics.Canvas: void drawRect(android.graphics.Rect,android.graphics.Paint)> -> _NONE_
<android.telephony.PhoneStateListener: void onSignalStrengthChanged(int)> -> _NONE_
<android.view.MotionEvent: int getMetaState()> -> _SOURCE_
<android.telephony.CellIdentityCdma: void <clinit>()> -> _NONE_
<java.util.Random: int next(int)> -> _SINK_ 
<android.content.pm.ProviderInfo: void <init>()> -> _NONE_
<java.net.NetworkInterface: void <init>()> -> _NONE_
<android.content.ContentProvider: int bulkInsert(android.net.Uri,android.content.ContentValues[])> -> _SOURCE_
<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char)> -> _NONE_
<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()> -> _SOURCE_
<android.graphics.Matrix: boolean postRotate(float)> -> _NONE_
<android.net.wifi.WifiInfo: android.net.wifi.SupplicantState getSupplicantState()> -> _SOURCE_
<android.view.View: void setScaleX(float)> -> _SINK_ 
<android.content.res.Resources: java.lang.String getQuantityString(int,int)> -> _SOURCE_
<android.view.View: void setPivotY(float)> -> _SINK_ 
<java.net.DatagramSocket: int getPort()> -> _SOURCE_
<android.view.View: boolean onKeyShortcut(int,android.view.KeyEvent)> -> _NONE_
<android.location.Criteria: boolean isCostAllowed()> -> _NONE_
<android.content.ContentProvider: void <init>()> -> _NONE_
<android.content.pm.PathPermission: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<android.content.res.AssetManager: java.io.InputStream open(java.lang.String,int)> -> _SINK_ 
<android.widget.AbsListView: float getTopFadingEdgeStrength()> -> _SOURCE_
<java.math.BigInteger: java.math.BigInteger max(java.math.BigInteger)> -> _NONE_
<android.widget.AbsListView: boolean onTouchEvent(android.view.MotionEvent)> -> _NONE_
<android.app.Activity: void startActivity(android.content.Intent)> -> _SINK_ 
<android.graphics.drawable.Drawable: boolean isAutoMirrored()> -> _NONE_
<java.lang.Long: short shortValue()> -> _NONE_
<android.app.Dialog: void setContentView(android.view.View,android.view.ViewGroup$LayoutParams)> -> _SINK_ 
<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)> -> _SOURCE_
<android.net.Uri$Builder: android.net.Uri$Builder query(java.lang.String)> -> _SOURCE_
<android.content.Intent: android.content.Intent setClassName(android.content.Context,java.lang.String)> -> _SINK_ 
<java.net.DatagramSocket: void <init>(int)> -> _NONE_
<android.widget.AdapterView: void setOnItemSelectedListener(android.widget.AdapterView$OnItemSelectedListener)> -> _NONE_
<java.nio.charset.MalformedInputException: java.lang.String getMessage()> -> _SOURCE_
<android.content.ContentProvider: void setReadPermission(java.lang.String)> -> _NONE_
<java.nio.ShortBuffer: int compareTo(java.nio.ShortBuffer)> -> _NONE_
<android.app.Activity: void onCreateNavigateUpTaskStack(android.app.TaskStackBuilder)> -> _NONE_
<android.graphics.Bitmap: void prepareToDraw()> -> _NONE_
<android.view.ViewGroup$MarginLayoutParams: void setLayoutDirection(int)> -> _SINK_ 
<android.text.style.ClickableSpan: void <init>()> -> _NONE_
<java.net.ContentHandler: void <init>()> -> _NONE_
<android.view.ViewGroup: boolean getChildStaticTransformation(android.view.View,android.view.animation.Transformation)> -> _SOURCE_
<android.view.accessibility.AccessibilityRecord: boolean isChecked()> -> _NONE_
<android.os.Parcel: void writeByteArray(byte[],int,int)> -> _NONE_
<java.lang.reflect.InvocationTargetException: void <init>(java.lang.Throwable,java.lang.String)> -> _NONE_
<android.content.ContextWrapper: java.io.FileInputStream openFileInput(java.lang.String)> -> _NONE_
<java.lang.ClassNotFoundException: void <init>()> -> _NONE_
<android.graphics.Paint: android.graphics.MaskFilter setMaskFilter(android.graphics.MaskFilter)> -> _SINK_ 
<android.graphics.Bitmap: void reconfigure(int,int,android.graphics.Bitmap$Config)> -> _NONE_
<java.net.URISyntaxException: java.lang.String getMessage()> -> _SOURCE_
<android.view.ViewTreeObserver: void dispatchOnDraw()> -> _NONE_
<java.lang.Float: void <init>(double)> -> _NONE_
<android.webkit.WebChromeClient: void onExceededDatabaseQuota(java.lang.String,java.lang.String,long,long,long,android.webkit.WebStorage$QuotaUpdater)> -> _NONE_
<android.location.LocationManager: boolean addNmeaListener(android.location.GpsStatus$NmeaListener)> -> _NONE_
<android.widget.AbsListView: void setFastScrollAlwaysVisible(boolean)> -> _NONE_
<java.lang.Short: void <clinit>()> -> _NONE_
<android.os.storage.StorageManager: boolean isObbMounted(java.lang.String)> -> _NONE_
<android.webkit.WebSettings: void setTextSize(android.webkit.WebSettings$TextSize)> -> _NONE_
<android.app.Fragment: boolean onContextItemSelected(android.view.MenuItem)> -> _NONE_
<android.provider.Settings$System: long getLong(android.content.ContentResolver,java.lang.String,long)> -> _SOURCE_
<android.widget.ListView: int getDividerHeight()> -> _SOURCE_
<java.net.URLConnection: java.lang.String getContentType()> -> _SOURCE_
<android.app.ActivityGroup: void onStop()> -> _NONE_
<android.location.Location: float getAccuracy()> -> _SOURCE_
<android.content.ContentProviderOperation: java.lang.String[] resolveSelectionArgsBackReferences(android.content.ContentProviderResult[],int)> -> _NONE_
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator alphaBy(float)> -> _NONE_
<android.graphics.Canvas: void drawRect(android.graphics.RectF,android.graphics.Paint)> -> _NONE_
<android.app.Notification$Builder: android.app.Notification$Builder setFullScreenIntent(android.app.PendingIntent,boolean)> -> _SINK_ 
<java.util.UUID: int clockSequence()> -> _SINK_ 
<android.view.ViewGroup: void <init>(android.content.Context,android.util.AttributeSet)> -> _NONE_
<android.graphics.RectF: void union(float,float)> -> _NONE_
<android.graphics.RectF: void <clinit>()> -> _NONE_
<android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)> -> _SINK_ 
<org.apache.http.message.ParserCursor: boolean atEnd()> -> _NONE_
<java.lang.String: java.lang.String valueOf(int)> -> _SINK_ 
<android.app.Activity: void setResult(int)> -> _SINK_ 
<android.view.inputmethod.CompletionInfo: void <init>(long,int,java.lang.CharSequence,java.lang.CharSequence)> -> _NONE_
<android.os.Parcel: java.lang.String readString()> -> _NONE_
<android.bluetooth.BluetoothGattCharacteristic: int getWriteType()> -> _SOURCE_
<android.content.Intent: android.content.Intent setDataAndNormalize(android.net.Uri)> -> _SINK_ 
<android.widget.AbsListView: void setAdapter(android.widget.Adapter)> -> _NONE_
<android.webkit.WebView: void onChildViewRemoved(android.view.View,android.view.View)> -> _NONE_
<android.content.ClipDescription: java.lang.String[] filterMimeTypes(java.lang.String)> -> _NONE_
<android.content.IntentFilter: void <clinit>()> -> _NONE_
<java.lang.ThreadDeath: void <init>()> -> _NONE_
<android.database.sqlite.SQLiteDatabase: long setMaximumSize(long)> -> _SINK_ 
<android.webkit.HttpAuthHandler: void cancel()> -> _NONE_
<java.lang.Package: void <init>()> -> _NONE_
<android.view.View: void invalidate(int,int,int,int)> -> _NONE_
<java.net.URLStreamHandler: void setURL(java.net.URL,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)> -> _NONE_
<android.webkit.WebChromeClient: void onReachedMaxAppCacheSize(long,long,android.webkit.WebStorage$QuotaUpdater)> -> _NONE_
<android.view.View: boolean hasOnClickListeners()> -> _NONE_
<android.content.ContentResolver: java.io.InputStream openInputStream(android.net.Uri)> -> _SOURCE_
<android.view.ViewGroup$MarginLayoutParams: void setMargins(int,int,int,int)> -> _SINK_ 
<android.view.ViewTreeObserver: void removeOnPreDrawListener(android.view.ViewTreeObserver$OnPreDrawListener)> -> _NONE_
<android.view.KeyEvent: boolean metaStateHasNoModifiers(int)> -> _NONE_
<android.view.ViewTreeObserver: void addOnScrollChangedListener(android.view.ViewTreeObserver$OnScrollChangedListener)> -> _NONE_
<android.content.BroadcastReceiver: android.os.IBinder peekService(android.content.Context,android.content.Intent)> -> _SOURCE_
<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)> -> _SOURCE_
<android.content.ContentProviderResult: java.lang.String toString()> -> _NONE_
<android.widget.TextView: int getImeActionId()> -> _SOURCE_
<android.net.sip.SipManager: boolean isSipWifiOnly(android.content.Context)> -> _NONE_
<android.graphics.drawable.Drawable$ConstantState: void <init>()> -> _NONE_
<android.app.Activity: android.content.SharedPreferences getPreferences(int)> -> _SOURCE_
<android.location.Location: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<android.os.Parcel: android.os.Bundle readBundle()> -> _NONE_
<android.app.ActivityManager$RunningAppProcessInfo: void readFromParcel(android.os.Parcel)> -> _NONE_
<android.accounts.Account: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<android.app.ActivityManager: java.util.List getProcessesInErrorState()> -> _SOURCE_
<android.animation.LayoutTransition: void setStagger(int,long)> -> _SINK_ 
<android.graphics.SurfaceTexture: void setOnFrameAvailableListener(android.graphics.SurfaceTexture$OnFrameAvailableListener)> -> _SINK_ 
<java.net.URLConnection: int getReadTimeout()> -> _SOURCE_
<android.animation.ValueAnimator: android.animation.ValueAnimator setDuration(long)> -> _SINK_ 
<android.content.BroadcastReceiver: void setResultCode(int)> -> _NONE_
<java.math.BigInteger: java.math.BigInteger abs()> -> _NONE_
<android.view.View: void dispatchWindowVisibilityChanged(int)> -> _NONE_
<android.app.Dialog: android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback)> -> _NONE_
<android.location.Criteria: void <init>(android.location.Criteria)> -> _NONE_
<java.security.Permission: void <init>(java.lang.String)> -> _NONE_
<android.webkit.WebSettings: java.lang.String getUserAgentString()> -> _SOURCE_
<java.util.ArrayList: int indexOf(java.lang.Object)> -> _SINK_ 
<android.view.accessibility.AccessibilityNodeProvider: void <init>()> -> _NONE_
<android.content.SyncInfo: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<android.view.accessibility.AccessibilityNodeInfo: void setLabelFor(android.view.View)> -> _SINK_ 
<android.view.accessibility.AccessibilityRecord: void setScrollX(int)> -> _SINK_ 
<android.widget.ListView: boolean drawChild(android.graphics.Canvas,android.view.View,long)> -> _NONE_
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,boolean)> -> _NONE_
<android.graphics.Rect: boolean isEmpty()> -> _NONE_
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.String)> -> _NONE_
<android.view.ViewGroup: void dispatchWindowVisibilityChanged(int)> -> _NONE_
<java.nio.channels.SelectionKey: java.lang.Object attachment()> -> _NONE_
<android.view.View: void dispatchSystemUiVisibilityChanged(int)> -> _NONE_
<android.content.IntentFilter: int countDataSchemes()> -> _SINK_ 
<android.graphics.Paint: float measureText(java.lang.String,int,int)> -> _NONE_
<android.app.Dialog: void setTitle(int)> -> _SINK_ 
<android.view.MotionEvent: float getHistoricalAxisValue(int,int,int)> -> _SOURCE_
<java.nio.LongBuffer: void <init>()> -> _NONE_
<android.widget.AbsListView: void setOverScrollMode(int)> -> _NONE_
<android.view.accessibility.AccessibilityRecord: android.view.accessibility.AccessibilityRecord obtain()> -> _NONE_
<java.lang.Boolean: boolean getBoolean(java.lang.String)> -> _SOURCE_
<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize asLandscape()> -> _NONE_
<java.net.UnknownHostException: void <init>()> -> _NONE_
<android.view.View: void setRotationY(float)> -> _SINK_ 
<java.util.AbstractCollection: boolean isEmpty()> -> _NONE_
<android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat valueOf(java.lang.String)> -> _SINK_ 
<android.widget.ListView: void <init>(android.content.Context,android.util.AttributeSet)> -> _NONE_
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)> -> _SOURCE_
<android.content.res.Resources: java.lang.CharSequence getText(int,java.lang.CharSequence)> -> _SOURCE_
<android.view.View: float getTranslationY()> -> _SOURCE_
<android.app.Activity: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int)> -> _SINK_ 
<java.io.PrintStream: void println(java.lang.String)> -> _NONE_
<android.app.Activity: void onRestart()> -> _NONE_
<android.view.ContextThemeWrapper: void <init>()> -> _NONE_
<android.app.Fragment: java.lang.String getString(int,java.lang.Object[])> -> _SOURCE_
<android.app.Fragment: void startActivityForResult(android.content.Intent,int,android.os.Bundle)> -> _SINK_ 
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator withLayer()> -> _NONE_
<android.webkit.WebSettings: int getDefaultFixedFontSize()> -> _SOURCE_
<android.view.View$DragShadowBuilder: android.view.View getView()> -> _SOURCE_
<android.os.ParcelFileDescriptor: long getStatSize()> -> _SOURCE_
<android.view.View: void setWillNotCacheDrawing(boolean)> -> _SINK_ 
<java.nio.charset.CharsetDecoder: float maxCharsPerByte()> -> _NONE_
<android.app.Dialog: void onContentChanged()> -> _NONE_
<android.app.Dialog: void setCancelable(boolean)> -> _SINK_ 
<android.graphics.Typeface: android.graphics.Typeface create(java.lang.String,int)> -> _NONE_
<android.accounts.AuthenticatorDescription: void <clinit>()> -> _NONE_
<java.io.File: long getUsableSpace()> -> _SOURCE_
<android.bluetooth.BluetoothGattCallback: void onCharacteristicRead(android.bluetooth.BluetoothGatt,android.bluetooth.BluetoothGattCharacteristic,int)> -> _NONE_
<java.net.Socket: void shutdownOutput()> -> _NONE_
<android.content.Intent: short[] getShortArrayExtra(java.lang.String)> -> _SOURCE_
<java.lang.Long: int compareTo(java.lang.Long)> -> _SINK_ 
<java.lang.Thread: java.lang.ThreadGroup getThreadGroup()> -> _SOURCE_
<android.bluetooth.BluetoothAdapter: boolean startLeScan(java.util.UUID[],android.bluetooth.BluetoothAdapter$LeScanCallback)> -> _SINK_ 
<android.view.View: boolean isFocusable()> -> _NONE_
<android.view.View: void onDetachedFromWindow()> -> _NONE_
<android.widget.TextView: int getCompoundDrawablePadding()> -> _SOURCE_
<java.net.URI: void <init>(java.lang.String)> -> _NONE_
<android.content.res.TypedArray: java.lang.String getNonResourceString(int)> -> _SOURCE_
<android.nfc.NdefRecord: byte[] getType()> -> _SOURCE_
<android.accounts.Account: void <clinit>()> -> _NONE_
<java.io.File: int compareTo(java.lang.Object)> -> _SINK_ 
<android.text.Layout: void draw(android.graphics.Canvas)> -> _NONE_
<org.apache.http.protocol.DefaultedHttpContext: java.lang.Object getAttribute(java.lang.String)> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<java.net.DatagramPacket: int getLength()> -> _SOURCE_
<android.text.style.URLSpan: java.lang.String getURL()> -> _SOURCE_
<android.content.res.Resources$Theme: void dump(int,java.lang.String,java.lang.String)> -> _NONE_
<android.text.Layout: int getLineEnd(int)> -> _SOURCE_
<java.lang.Thread: java.lang.Thread$State getState()> -> _SOURCE_
<android.view.MotionEvent: int axisFromString(java.lang.String)> -> _SINK_ 
<android.webkit.WebView: java.lang.String[] getHttpAuthUsernamePassword(java.lang.String,java.lang.String)> -> _SOURCE_
<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)> -> _SINK_ 
<java.lang.Double: boolean isInfinite()> -> _NONE_
<android.app.Dialog: android.view.LayoutInflater getLayoutInflater()> -> _SOURCE_
<android.app.TaskStackBuilder: android.app.TaskStackBuilder addParentStack(android.content.ComponentName)> -> _NONE_
<android.app.Dialog: android.view.View getCurrentFocus()> -> _SOURCE_
<android.graphics.Region: void <clinit>()> -> _NONE_
<android.view.View: android.view.WindowId getWindowId()> -> _SOURCE_
<android.view.KeyCharacterMap: int describeContents()> -> _SINK_ 
<android.app.Activity: boolean startNextMatchingActivity(android.content.Intent,android.os.Bundle)> -> _SINK_ 
<android.view.View: int getNextFocusLeftId()> -> _SOURCE_
<java.security.Timestamp: boolean equals(java.lang.Object)> -> _NONE_
<android.app.Fragment: void onPrepareOptionsMenu(android.view.Menu)> -> _NONE_
<android.app.Notification$Action: int describeContents()> -> _SINK_ 
<android.telephony.CellSignalStrength: void <init>()> -> _NONE_
<android.view.animation.LayoutAnimationController: android.view.animation.Animation getAnimation()> -> _SOURCE_
<android.view.ViewGroup: void childDrawableStateChanged(android.view.View)> -> _NONE_
<java.lang.Enum: int compareTo(java.lang.Object)> -> _NONE_
<java.lang.Short: int intValue()> -> _SINK_ 
<android.content.Intent: android.content.Intent putIntegerArrayListExtra(java.lang.String,java.util.ArrayList)> -> _NONE_
<java.util.ArrayList: java.lang.Object clone()> -> _NONE_
<android.app.LocalActivityManager: void dispatchResume()> -> _NONE_
<android.view.View: float getRotationY()> -> _SOURCE_
<java.io.File: java.lang.String getAbsolutePath()> -> _SOURCE_
<java.net.URI: java.lang.String getRawFragment()> -> _SOURCE_
<android.app.Dialog: boolean onCreateOptionsMenu(android.view.Menu)> -> _NONE_
<android.net.sip.SipSession$Listener: void onRegistrationTimeout(android.net.sip.SipSession)> -> _NONE_
<android.app.Notification: void setLatestEventInfo(android.content.Context,java.lang.CharSequence,java.lang.CharSequence,android.app.PendingIntent)> -> _SINK_ 
<android.content.Loader: boolean takeContentChanged()> -> _NONE_
<android.animation.ValueAnimator: int getRepeatMode()> -> _SOURCE_
<java.nio.channels.spi.AbstractSelector: java.util.Set cancelledKeys()> -> _NONE_
<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,float,float,android.graphics.Paint)> -> _NONE_
<android.provider.Browser: void clearHistory(android.content.ContentResolver)> -> _NONE_
<android.widget.RemoteViews: void setString(int,java.lang.String,java.lang.String)> -> _SINK_ 
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory)> -> _SINK_ 
<android.app.Activity: void onStop()> -> _NONE_
<java.net.SocketImpl: void shutdownInput()> -> _NONE_
<java.io.FileInputStream: void finalize()> -> _NONE_
<java.lang.Character: char forDigit(int,int)> -> _SINK_ 
<java.nio.charset.CoderResult: java.lang.String toString()> -> _NONE_
<android.database.sqlite.SQLiteDatabase: boolean needUpgrade(int)> -> _NONE_
<java.lang.Integer: void <init>(java.lang.String)> -> _NONE_
<java.nio.IntBuffer: int[] array()> -> _NONE_
<java.lang.Character: char[] toChars(int)> -> _SINK_ 
<java.lang.Character: boolean isLetter(char)> -> _NONE_
<android.bluetooth.BluetoothGatt: boolean connect()> -> _NONE_
<java.nio.channels.spi.AbstractInterruptibleChannel: void begin()> -> _NONE_
<java.lang.StackTraceElement: void <init>(java.lang.String,java.lang.String,java.lang.String,int)> -> _NONE_
<android.widget.AdapterView: boolean onRequestSendAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)> -> _NONE_
<java.io.FileOutputStream: void <init>(java.io.File)> -> _NONE_
<android.net.Uri: int compareTo(java.lang.Object)> -> _NONE_
<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()> -> _SOURCE_
<android.util.AndroidException: void <init>()> -> _NONE_
<android.view.View: void setFadingEdgeLength(int)> -> _SINK_ 
<android.content.res.TypedArray: int getDimensionPixelSize(int,int)> -> _SOURCE_
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor dup(java.io.FileDescriptor)> -> _SOURCE_
<android.app.Activity: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)> -> _NONE_
<android.view.View: boolean isPressed()> -> _NONE_
<android.widget.RemoteViews: void setFloat(int,java.lang.String,float)> -> _SINK_ 
<java.nio.CharBuffer: void <init>()> -> _NONE_
<android.app.ActivityManager: boolean isLowRamDevice()> -> _NONE_
<android.content.ComponentName: int compareTo(android.content.ComponentName)> -> _SINK_ 
<android.content.res.AssetFileDescriptor: void <clinit>()> -> _NONE_
<android.app.ExpandableListActivity: void setSelectedGroup(int)> -> _SINK_ 
<android.app.Activity: boolean onNavigateUpFromChild(android.app.Activity)> -> _NONE_
<android.app.Fragment: void onViewCreated(android.view.View,android.os.Bundle)> -> _NONE_
<android.content.res.Resources: java.lang.String getResourceName(int)> -> _SOURCE_
<java.lang.String: void getBytes(int,int,byte[],int)> -> _SOURCE_
<android.app.Fragment: java.lang.String toString()> -> _NONE_
<java.nio.DoubleBuffer: int arrayOffset()> -> _NONE_
<android.widget.TextView: void setFilters(android.text.InputFilter[])> -> _SINK_ 
<android.widget.TextView: void setSelectAllOnFocus(boolean)> -> _SINK_ 
<android.view.KeyCharacterMap: char getMatch(int,char[])> -> _SOURCE_
<android.view.KeyEvent: boolean isAltPressed()> -> _NONE_
<android.app.Dialog: android.app.ActionBar getActionBar()> -> _SOURCE_
<java.lang.ThreadGroup: void setDaemon(boolean)> -> _SINK_ 
<android.app.ActivityManager$MemoryInfo: void <init>()> -> _NONE_
<java.net.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _NONE_
<android.provider.Settings$Secure: long getLong(android.content.ContentResolver,java.lang.String,long)> -> _SOURCE_
<java.net.DatagramSocket: boolean isConnected()> -> _NONE_
<java.lang.StringBuilder: java.lang.StringBuilder append(double)> -> _NONE_
<android.database.DataSetObserver: void onChanged()> -> _NONE_
<java.util.AbstractList: java.util.ListIterator listIterator(int)> -> _NONE_
<android.app.Notification$Builder: android.app.Notification$Builder setUsesChronometer(boolean)> -> _SINK_ 
<android.view.MotionEvent$PointerCoords: void <init>()> -> _NONE_
<android.graphics.Paint$Align: void <clinit>()> -> _NONE_
<android.view.View: void setCameraDistance(float)> -> _SINK_ 
<android.graphics.Bitmap: void recycle()> -> _NONE_
<android.graphics.Paint: void <init>()> -> _NONE_
<android.app.FragmentManager: void enableDebugLogging(boolean)> -> _NONE_
<java.net.DatagramSocket: java.net.SocketAddress getLocalSocketAddress()> -> _SOURCE_
<android.content.pm.ResolveInfo: int describeContents()> -> _SINK_ 
<android.widget.AdapterView: void <init>(android.content.Context,android.util.AttributeSet)> -> _NONE_
<java.net.URI: java.lang.String getUserInfo()> -> _SOURCE_
<java.lang.Byte: void <init>(java.lang.String)> -> _NONE_
<android.location.Location: float getBearing()> -> _SOURCE_
<android.app.LoaderManager: void enableDebugLogging(boolean)> -> _NONE_
<android.os.Bundle: boolean getBoolean(java.lang.String)> -> _SOURCE_
<android.webkit.WebBackForwardList: void <init>()> -> _NONE_
<android.telephony.SignalStrength: boolean isGsm()> -> _NONE_
<android.net.http.SslError: boolean addError(int)> -> _NONE_
<android.content.ContentResolver: android.content.ContentProviderClient acquireUnstableContentProviderClient(java.lang.String)> -> _NONE_
<android.view.View: int getScrollX()> -> _SOURCE_
<android.graphics.drawable.Drawable: boolean setState(int[])> -> _NONE_
<android.util.TypedValue: float complexToDimensionNoisy(int,android.util.DisplayMetrics)> -> _NONE_
<android.accessibilityservice.AccessibilityServiceInfo: java.lang.String toString()> -> _NONE_
<android.widget.TextView: int getSelectionStart()> -> _SOURCE_
<java.nio.channels.spi.AbstractSelectionKey: void <init>()> -> _NONE_
<android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat[] values()> -> _NONE_
<android.os.Parcel: void readIntArray(int[])> -> _NONE_
<android.app.ExpandableListActivity: boolean setSelectedChild(int,int,boolean)> android.permission.STOP_APP_SWITCHES -> _SINK_ 
<android.widget.RemoteViews: int describeContents()> -> _SINK_ 
<android.view.View: android.graphics.Bitmap getDrawingCache(boolean)> -> _SOURCE_
<android.content.res.Resources$Theme: android.content.res.TypedArray obtainStyledAttributes(int[])> -> _NONE_
<android.graphics.SurfaceTexture: void setDefaultBufferSize(int,int)> -> _SINK_ 
<android.app.ActivityGroup: void onSaveInstanceState(android.os.Bundle)> -> _NONE_
<android.os.UserHandle: int hashCode()> -> _SINK_ 
<java.lang.String: void <init>(char[])> -> _NONE_
<java.lang.ClassNotFoundException: java.lang.Throwable getCause()> -> _SOURCE_
<android.util.SparseArray: void append(int,java.lang.Object)> -> _NONE_
<android.graphics.Path$Direction: android.graphics.Path$Direction valueOf(java.lang.String)> -> _SINK_ 
<java.lang.StringBuffer: int capacity()> -> _SINK_ 
<java.io.File: java.lang.String getParent()> -> _SOURCE_
<android.os.Bundle: int size()> -> _SINK_ 
<java.lang.Long: int intValue()> -> _SINK_ 
<android.content.ContentProviderOperation$Builder: android.content.ContentProviderOperation$Builder withValues(android.content.ContentValues)> -> _NONE_
<android.app.Notification$Builder: android.app.Notification$Builder setOnlyAlertOnce(boolean)> -> _SINK_ 
<android.animation.ValueAnimator: android.animation.ValueAnimator clone()> -> _NONE_
<java.lang.Short: byte byteValue()> -> _NONE_
<android.graphics.Rect: void offset(int,int)> -> _NONE_
<java.nio.CharBuffer: int compareTo(java.lang.Object)> -> _NONE_
<android.nfc.Tag: java.lang.String[] getTechList()> -> _SOURCE_
<android.content.ContentResolver: int bulkInsert(android.net.Uri,android.content.ContentValues[])> -> _SOURCE_
<android.graphics.Shader: void <init>()> -> _NONE_
<java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)> -> _NONE_
<android.location.Criteria: boolean isSpeedRequired()> -> _NONE_
<android.widget.RemoteViews: void showPrevious(int)> -> _NONE_
<android.net.sip.SipAudioCall: void startAudio()> -> _NONE_
<java.lang.Class: java.lang.reflect.Method[] getMethods()> -> _SOURCE_
<android.print.PrintAttributes: void <init>()> -> _NONE_
<java.lang.Long: void <init>(long)> -> _NONE_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,double[])> -> _NONE_
<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)> -> _SINK_ 
<java.nio.charset.CharsetEncoder: void implReplaceWith(byte[])> -> _NONE_
<android.os.UserHandle: int describeContents()> -> _SINK_ 
<java.lang.reflect.Field: char getChar(java.lang.Object)> -> _SOURCE_
<android.os.Bundle: void putParcelableArray(java.lang.String,android.os.Parcelable[])> -> _NONE_
<java.net.URLStreamHandler: java.lang.String toExternalForm(java.net.URL)> -> _NONE_
<android.view.View: void refreshDrawableState()> -> _NONE_
<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)> -> _NONE_
<android.widget.TextView: int getOffsetForPosition(float,float)> -> _SOURCE_
<android.hardware.Camera: void setZoomChangeListener(android.hardware.Camera$OnZoomChangeListener)> -> _SINK_ 
<android.graphics.Bitmap: int getByteCount()> -> _SOURCE_
<java.lang.Integer: int numberOfLeadingZeros(int)> -> _SINK_ 
<java.lang.StringBuilder: java.lang.StringBuilder appendCodePoint(int)> -> _NONE_
<java.io.FileDescriptor: java.lang.String toString()> -> _NONE_
<android.os.CancellationSignal: void setOnCancelListener(android.os.CancellationSignal$OnCancelListener)> -> _SINK_ 
<android.webkit.WebViewClient: android.webkit.WebResourceResponse shouldInterceptRequest(android.webkit.WebView,java.lang.String)> -> _NONE_
<android.content.ContentProviderClient: android.content.ContentProvider getLocalContentProvider()> -> _SOURCE_
<android.bluetooth.BluetoothGattCharacteristic: android.bluetooth.BluetoothGattDescriptor getDescriptor(java.util.UUID)> -> _SOURCE_
<android.view.WindowManager$LayoutParams: void <clinit>()> -> _NONE_
<android.content.Intent: java.lang.Object clone()> -> _NONE_
<android.app.Activity: boolean onKeyMultiple(int,int,android.view.KeyEvent)> -> _NONE_
<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char[])> -> _NONE_
<java.lang.Throwable: void printStackTrace(java.io.PrintWriter)> -> _NONE_
<java.net.URLConnection: boolean getAllowUserInteraction()> -> _SOURCE_
<android.animation.ValueAnimator: boolean isStarted()> -> _NONE_
<android.location.Location: void <clinit>()> -> _NONE_
<java.util.Locale: void <init>(java.lang.String,java.lang.String)> -> _NONE_
<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)> -> _SOURCE_
<android.graphics.Paint$FontMetricsInt: void <init>()> -> _NONE_
<android.view.accessibility.AccessibilityNodeInfo: boolean isClickable()> -> _NONE_
<android.graphics.Path: void quadTo(float,float,float,float)> -> _NONE_
<org.apache.http.message.BasicLineParser: org.apache.http.ProtocolVersion createProtocolVersion(int,int)> -> _NONE_
<android.graphics.Path$Op: void <clinit>()> -> _NONE_
<java.security.KeyException: void <init>(java.lang.String,java.lang.Throwable)> -> _NONE_
<android.widget.TextView: void onDraw(android.graphics.Canvas)> -> _NONE_
<java.net.DatagramSocket: boolean getReuseAddress()> -> _SOURCE_
<android.os.PowerManager$WakeLock: void release()> -> _NONE_
<java.lang.ThreadGroup: boolean isDestroyed()> -> _NONE_
<android.content.Intent: java.lang.String resolveType(android.content.ContentResolver)> -> _NONE_
<android.app.backup.BackupAgent: void fullBackupFile(java.io.File,android.app.backup.FullBackupDataOutput)> -> _NONE_
<java.lang.IllegalStateException: void <init>()> -> _NONE_
<android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_ 
<android.app.Activity: void onLowMemory()> -> _NONE_
<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo: int getRowIndex()> -> _SOURCE_
<android.os.Handler: void removeCallbacks(java.lang.Runnable)> -> _NONE_
<java.lang.UnsatisfiedLinkError: void <init>(java.lang.String)> -> _NONE_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.CancellationSignal)> -> _SOURCE_
<java.math.BigInteger: void <init>(byte[])> -> _NONE_
<android.hardware.Camera$Parameters: void setAntibanding(java.lang.String)> -> _SINK_ 
<android.graphics.Rect: int height()> -> _SINK_ 
<android.content.IntentSender: boolean equals(java.lang.Object)> -> _NONE_
<android.graphics.Canvas: void setMatrix(android.graphics.Matrix)> -> _SINK_ 
<android.app.backup.BackupDataInput: boolean readNextHeader()> -> _NONE_
<java.nio.channels.Pipe$SourceChannel: void <init>(java.nio.channels.spi.SelectorProvider)> -> _NONE_
<android.graphics.Path: void setLastPoint(float,float)> -> _SINK_ 
<android.view.View: void onRestoreInstanceState(android.os.Parcelable)> -> _NONE_
<android.content.ClipDescription: java.lang.CharSequence getLabel()> -> _SOURCE_
<android.content.ContentProviderOperation$Builder: android.content.ContentProviderOperation build()> -> _NONE_
<java.nio.DoubleBuffer: java.nio.DoubleBuffer get(double[],int,int)> -> _SOURCE_
<android.webkit.WebSettings: void setSaveFormData(boolean)> -> _NONE_
<android.os.PatternMatcher: void <clinit>()> -> _NONE_
<java.lang.StringBuilder: int lastIndexOf(java.lang.String)> -> _SINK_ 
<java.lang.Throwable: java.lang.Throwable[] getSuppressed()> -> _SOURCE_
<android.graphics.Path: void addPath(android.graphics.Path,float,float)> -> _NONE_
<java.net.InetAddress: boolean isMCOrgLocal()> -> _NONE_
<android.widget.AbsoluteLayout: boolean shouldDelayChildPressedState()> -> _NONE_
<android.webkit.WebSettings: java.lang.String getDatabasePath()> -> _SOURCE_
<android.os.Messenger: android.os.Messenger readMessengerOrNullFromParcel(android.os.Parcel)> -> _SINK_ 
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator alpha(float)> -> _NONE_
<java.lang.StringBuffer: int codePointBefore(int)> -> _SINK_ 
<android.view.MotionEvent: float getHistoricalAxisValue(int,int)> -> _SOURCE_
<android.text.Layout: int getWidth()> -> _SOURCE_
<android.content.res.AssetFileDescriptor: long getLength()> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: void endTransaction()> -> _NONE_
<android.widget.RemoteViews: void setImageViewResource(int,int)> -> _SINK_ 
<android.graphics.Paint: android.graphics.Xfermode getXfermode()> -> _SOURCE_
<android.hardware.Camera$Parameters: float getHorizontalViewAngle()> -> _SOURCE_
<android.content.pm.PathPermission: void <clinit>()> -> _NONE_
<android.provider.Browser: void deleteFromHistory(android.content.ContentResolver,java.lang.String)> -> _NONE_
<java.nio.ShortBuffer: java.nio.ShortBuffer wrap(short[],int,int)> -> _NONE_
<java.io.PrintWriter: void println(java.lang.Object)> -> _NONE_
<android.view.KeyCharacterMap: boolean[] deviceHasKeys(int[])> -> _NONE_
<android.content.Intent: boolean getBooleanExtra(java.lang.String,boolean)> -> _SOURCE_
<java.lang.Double: int compareTo(java.lang.Double)> -> _SINK_ 
<android.os.Parcel: long[] createLongArray()> -> _NONE_
<android.app.Dialog: android.view.View findViewById(int)> -> _NONE_
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothDevice getRemoteDevice(byte[])> -> _SOURCE_
<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)> -> _SINK_ 
<android.app.ActionBar$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)> -> _NONE_
<java.lang.Long: float floatValue()> -> _NONE_
<android.app.Activity: java.lang.CharSequence onCreateDescription()> -> _NONE_
<android.webkit.WebView: int getProgress()> -> _SOURCE_
<java.security.SignatureException: void <init>(java.lang.String)> -> _NONE_
<java.lang.LinkageError: void <init>(java.lang.String)> -> _NONE_
<android.view.KeyEvent: boolean isSystem()> -> _NONE_
<android.os.ParcelFileDescriptor: void finalize()> -> _NONE_
<android.view.View: void setAnimation(android.view.animation.Animation)> -> _SINK_ 
<android.view.ViewGroup: android.view.animation.LayoutAnimationController getLayoutAnimation()> -> _SOURCE_
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.util.DisplayMetrics,int[],int,int,int,int,android.graphics.Bitmap$Config)> -> _SINK_ 
<android.content.Intent: short getShortExtra(java.lang.String,short)> -> _SOURCE_
<android.app.Activity: int getRequestedOrientation()> -> _SOURCE_
<android.animation.Animator: void end()> -> _NONE_
<android.app.Notification$Builder: android.app.Notification$Builder setTicker(java.lang.CharSequence,android.widget.RemoteViews)> -> _SINK_ 
<android.nfc.tech.BasicTagTechnology: void close()> -> _NONE_
<android.content.ContentProvider: java.lang.String getWritePermission()> -> _SOURCE_
<java.net.NetworkInterface: boolean isVirtual()> -> _NONE_
<java.lang.Class: java.lang.annotation.Annotation getAnnotation(java.lang.Class)> -> _SOURCE_
<java.lang.Thread: void interrupt()> -> _NONE_
<java.lang.String: int indexOf(int)> -> _SINK_ 
<android.media.MediaFormat: float getFloat(java.lang.String)> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: boolean isDatabaseIntegrityOk()> -> _NONE_
<java.nio.ShortBuffer: java.nio.ShortBuffer get(short[],int,int)> -> _SOURCE_
<android.content.Intent: android.content.Intent makeRestartActivityTask(android.content.ComponentName)> -> _NONE_
<android.view.KeyEvent: boolean getKeyData(android.view.KeyCharacterMap$KeyData)> -> _SOURCE_
<android.content.ContentResolver: void releasePersistableUriPermission(android.net.Uri,int)> -> _NONE_
<android.view.View: void addChildrenForAccessibility(java.util.ArrayList)> -> _NONE_
<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()> -> _SOURCE_
<android.view.animation.Animation: android.view.animation.Interpolator getInterpolator()> -> _SOURCE_
<android.animation.LayoutTransition: boolean isRunning()> -> _NONE_
<java.util.ArrayList: boolean isEmpty()> -> _NONE_
<android.widget.TextView: boolean onKeyMultiple(int,int,android.view.KeyEvent)> -> _NONE_
<android.graphics.Point: void readFromParcel(android.os.Parcel)> -> _NONE_
<android.content.SyncRequest: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<android.util.TypedValue: float complexToDimension(int,android.util.DisplayMetrics)> -> _NONE_
<android.net.wifi.WifiManager: void <init>()> -> _NONE_
<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)> -> _SOURCE_
<java.lang.AbstractStringBuilder: int codePointCount(int,int)> -> _NONE_
<java.util.Locale: void <init>(java.lang.String)> -> _NONE_
<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Rect,android.graphics.RectF,android.graphics.Paint)> -> _NONE_
<android.view.View: boolean requestFocus(int,android.graphics.Rect)> -> _NONE_
<android.content.IntentFilter: int countActions()> -> _SINK_ 
<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo: int getColumnSpan()> -> _SOURCE_
<android.view.InputDevice: int describeContents()> -> _SINK_ 
<android.app.Service: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _NONE_
<android.view.InputDevice: boolean isVirtual()> -> _NONE_
<android.widget.TextView: void setPaintFlags(int)> -> _SINK_ 
<android.app.Activity: android.view.View getCurrentFocus()> -> _SOURCE_
<java.net.Socket: void <init>(java.net.SocketImpl)> -> _NONE_
<android.content.IntentFilter: void setPriority(int)> -> _SINK_ 
<android.text.style.ImageSpan: void <init>(android.graphics.drawable.Drawable,int)> -> _NONE_
<android.widget.Scroller: boolean computeScrollOffset()> -> _NONE_
<android.view.KeyEvent: boolean isModifierKey(int)> -> _NONE_
<java.net.DatagramPacket: int getPort()> -> _SOURCE_
<android.app.backup.FullBackupDataOutput: void <init>()> -> _NONE_
<android.view.View: int getVerticalFadingEdgeLength()> -> _SOURCE_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)> -> _NONE_
<android.content.ContentValues: void <init>(int)> -> _NONE_
<java.math.BigInteger: boolean isProbablePrime(int)> -> _NONE_
<android.graphics.Path: void <init>(android.graphics.Path)> -> _NONE_
<android.graphics.Matrix: void <init>(android.graphics.Matrix)> -> _NONE_
<android.content.pm.ResolveInfo: int getIconResource()> -> _SOURCE_
<android.app.Notification$Builder: android.app.Notification$Builder setLights(int,int,int)> -> _SINK_ 
<android.app.Fragment: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _NONE_
<java.util.AbstractMap: java.lang.Object clone()> -> _NONE_
<android.content.ContextWrapper: android.content.res.Resources$Theme getTheme()> -> _SOURCE_
<android.widget.TextView: android.text.TextPaint getPaint()> -> _SOURCE_
<android.net.http.SslCertificate: java.util.Date getValidNotAfterDate()> -> _SOURCE_
<android.app.Activity: android.view.LayoutInflater getLayoutInflater()> -> _SOURCE_
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator rotationXBy(float)> -> _NONE_
<java.nio.charset.Charset: java.lang.String displayName()> -> _NONE_
<android.app.LocalActivityManager: android.view.Window destroyActivity(java.lang.String,boolean)> -> _SOURCE_
<android.widget.AbsoluteLayout: android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet)> -> _NONE_
<android.widget.RemoteViews: void setContentDescription(int,java.lang.CharSequence)> -> _SINK_ 
<android.view.accessibility.AccessibilityRecord: void setFullScreen(boolean)> -> _SINK_ 
<android.util.TypedValue: void setTo(android.util.TypedValue)> -> _SINK_ 
<java.lang.Character: int toUpperCase(int)> -> _SINK_ 
<java.util.AbstractList: boolean add(java.lang.Object)> -> _NONE_
<java.nio.FloatBuffer: java.nio.FloatBuffer wrap(float[],int,int)> -> _NONE_
<android.net.Uri$Builder: android.net.Uri$Builder opaquePart(java.lang.String)> -> _NONE_
<android.widget.AbsListView$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)> -> _NONE_
<android.view.ViewTreeObserver: void addOnDrawListener(android.view.ViewTreeObserver$OnDrawListener)> -> _NONE_
<org.xmlpull.v1.XmlPullParserException: int getLineNumber()> -> _SOURCE_
<android.app.Notification: void <clinit>()> -> _NONE_
<android.view.View: void dispatchSaveInstanceState(android.util.SparseArray)> -> _NONE_
<android.view.accessibility.AccessibilityEvent: int getEventType()> -> _SOURCE_
<android.app.Notification$Builder: android.app.Notification$Builder setContent(android.widget.RemoteViews)> -> _SINK_ 
<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)> -> _SOURCE_
<android.widget.AdapterView: void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener)> -> _NONE_
<java.io.OutputStream: void write(byte[])> -> _NONE_
<android.content.Loader: void stopLoading()> -> _NONE_
<android.widget.TextView: void setCompoundDrawablesWithIntrinsicBounds(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)> -> _SINK_ 
<android.view.View: void requestLayout()> -> _NONE_
<android.app.ActivityManager: int getLauncherLargeIconDensity()> -> _SOURCE_
<android.location.Location: long getElapsedRealtimeNanos()> -> _SOURCE_
<android.view.animation.Transformation: java.lang.String toString()> -> _NONE_
<android.content.Loader: void onReset()> -> _NONE_
<android.webkit.WebView: void onScrollChanged(int,int,int,int)> -> _NONE_
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthTokenByFeatures(java.lang.String,java.lang.String,java.lang.String[],android.app.Activity,android.os.Bundle,android.os.Bundle,android.accounts.AccountManagerCallback,android.os.Handler)> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getGroupIdLevel1()> -> _SOURCE_
<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageArchiveInfo(java.lang.String,int)> -> _SOURCE_
<android.os.ParcelFileDescriptor: int describeContents()> -> _SINK_ 
<android.view.Surface: int describeContents()> -> _SINK_ 
<java.net.URLConnection: java.security.Permission getPermission()> -> _SOURCE_
<android.location.LocationProvider: java.lang.String getName()> -> _SOURCE_
<android.app.Fragment: boolean isInLayout()> -> _NONE_
<android.webkit.WebSettings: int getMinimumFontSize()> -> _SOURCE_
<android.view.View: boolean willNotCacheDrawing()> -> _NONE_
<android.widget.ListView: android.graphics.drawable.Drawable getDivider()> -> _SOURCE_
<java.util.Date: void <init>(int,int,int,int,int,int)> -> _NONE_
<android.graphics.RectF: boolean intersect(android.graphics.RectF)> -> _NONE_
<android.view.MotionEvent: void <clinit>()> -> _NONE_
<android.content.ContentProvider: android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String,android.os.CancellationSignal)> -> _NONE_
<java.net.URL: void set(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_ 
<java.lang.Class: boolean isLocalClass()> -> _NONE_
<android.view.DragEvent: float getX()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: void setLiveRegion(int)> -> _SINK_ 
<android.bluetooth.BluetoothAdapter: void finalize()> -> _NONE_
<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)> -> _NONE_
<android.view.animation.Animation: void setRepeatCount(int)> -> _NONE_
<java.nio.FloatBuffer: java.nio.FloatBuffer get(float[],int,int)> -> _SOURCE_
<android.net.Uri: android.net.Uri withAppendedPath(android.net.Uri,java.lang.String)> -> _NONE_
<android.view.View: void setTag(java.lang.Object)> -> _SINK_ 
<android.view.View: boolean onGenericMotionEvent(android.view.MotionEvent)> -> _NONE_
<android.widget.ExpandableListView: android.os.Parcelable onSaveInstanceState()> -> _NONE_
<android.app.Notification$Builder: android.app.Notification$Builder setDefaults(int)> -> _SINK_ 
<android.app.TaskStackBuilder: int getIntentCount()> -> _SOURCE_
<android.widget.TextView: int getCompoundPaddingBottom()> -> _SOURCE_
<java.lang.ReflectiveOperationException: void <init>(java.lang.String)> -> _NONE_
<java.lang.String: boolean equalsIgnoreCase(java.lang.String)> -> _NONE_
<java.lang.Short: java.lang.Short valueOf(java.lang.String)> -> _SINK_ 
<android.content.IntentFilter: boolean hasDataScheme(java.lang.String)> -> _NONE_
<android.widget.TextView: boolean onCheckIsTextEditor()> -> _NONE_
<android.content.res.AssetManager: android.content.res.XmlResourceParser openXmlResourceParser(java.lang.String)> -> _SINK_ 
<android.content.IntentFilter: java.util.Iterator actionsIterator()> -> _NONE_
<android.app.Dialog: boolean onKeyLongPress(int,android.view.KeyEvent)> -> _NONE_
<android.telephony.SignalStrength: int hashCode()> -> _NONE_
<java.io.PrintStream: java.io.PrintStream format(java.lang.String,java.lang.Object[])> -> _NONE_
<java.lang.Thread: java.lang.String getName()> -> _SOURCE_
<android.graphics.Canvas: boolean isHardwareAccelerated()> -> _NONE_
<android.content.Intent: android.content.Intent setDataAndTypeAndNormalize(android.net.Uri,java.lang.String)> -> _SINK_ 
<android.os.storage.StorageManager: boolean mountObb(java.lang.String,java.lang.String,android.os.storage.OnObbStateChangeListener)> -> _NONE_
<android.location.Location: double convert(java.lang.String)> -> _NONE_
<android.widget.Scroller: boolean isFinished()> -> _NONE_
<android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,float,float,int)> -> _SINK_ 
<android.graphics.Bitmap: android.graphics.Bitmap extractAlpha()> -> _NONE_
<org.apache.http.ProtocolVersion: org.apache.http.ProtocolVersion forVersion(int,int)> -> _NONE_
<android.webkit.WebView: void setLayerType(int,android.graphics.Paint)> -> _SINK_ 
<java.lang.reflect.Method: java.lang.annotation.Annotation getAnnotation(java.lang.Class)> -> _SOURCE_
<java.net.URL: java.lang.String getFile()> -> _SOURCE_
<android.webkit.WebView: void onFocusChanged(boolean,int,android.graphics.Rect)> -> _NONE_
<android.view.ContextThemeWrapper: void setTheme(int)> -> _SINK_ 
<android.bluetooth.BluetoothGattService: java.util.UUID getUuid()> -> _SOURCE_
<java.nio.Buffer: int remaining()> -> _NONE_
<android.widget.TextView: void invalidateDrawable(android.graphics.drawable.Drawable)> -> _NONE_
<android.view.KeyEvent: boolean isTracking()> -> _NONE_
<android.content.Intent: android.graphics.Rect getSourceBounds()> -> _SOURCE_
<android.graphics.Region: boolean union(android.graphics.Rect)> -> _NONE_
<java.lang.Character: java.lang.Character valueOf(char)> -> _SINK_ 
<java.nio.MappedByteBuffer: void <init>()> -> _NONE_
<java.io.FileInputStream: void <init>(java.lang.String)> -> _NONE_
<android.content.ClipDescription: void <init>(java.lang.CharSequence,java.lang.String[])> -> _NONE_
<java.net.DatagramSocket: void send(java.net.DatagramPacket)> -> _SINK_ 
<android.provider.Browser: boolean canClearHistory(android.content.ContentResolver)> com.android.browser.permission.READ_HISTORY_BOOKMARKS -> _NONE_
<android.webkit.WebView: void clearHistory()> -> _NONE_
<android.webkit.WebView: void setDownloadListener(android.webkit.DownloadListener)> -> _NONE_
<android.os.Bundle: long getLong(java.lang.String,long)> -> _SOURCE_
<android.view.MotionEvent: void addBatch(long,float,float,float,float,int)> -> _NONE_
<android.view.accessibility.AccessibilityNodeInfo: boolean isFocused()> -> _NONE_
<android.app.ActivityManager: java.util.List getRunningAppProcesses()> -> _SOURCE_
<java.net.SocketException: void <init>()> -> _NONE_
<android.app.Fragment: void onAttach(android.app.Activity)> -> _NONE_
<android.location.LocationProvider: boolean requiresSatellite()> -> _NONE_
<android.view.MotionEvent: void getPointerCoords(int,android.view.MotionEvent$PointerCoords)> -> _SOURCE_
<android.graphics.drawable.Drawable: void onBoundsChange(android.graphics.Rect)> -> _NONE_
<android.telephony.PhoneStateListener: void onCellLocationChanged(android.telephony.CellLocation)> -> _NONE_
<android.hardware.Camera$Parameters: boolean isZoomSupported()> -> _NONE_
<java.lang.LinkageError: void <init>()> -> _NONE_
<java.net.InetAddress: java.lang.String toString()> -> _NONE_
<java.util.HashMap: java.lang.Object get(java.lang.Object)> -> _SOURCE_
<java.lang.AbstractStringBuilder: int indexOf(java.lang.String,int)> -> _NONE_
<android.widget.TextView: void setCompoundDrawablesRelativeWithIntrinsicBounds(int,int,int,int)> -> _SINK_ 
<java.net.URLConnection: java.lang.String getHeaderField(int)> -> _SOURCE_
<android.accounts.AccountManager: void setPassword(android.accounts.Account,java.lang.String)> android.permission.AUTHENTICATE_ACCOUNTS -> _SINK_ 
<android.app.Notification$Style: android.widget.RemoteViews getStandardView(int)> -> _SOURCE_
<android.graphics.Paint: float measureText(char[],int,int)> -> _NONE_
<android.content.res.Configuration: int describeContents()> -> _SINK_ 
<android.app.ActivityManager: boolean isRunningInTestHarness()> -> _NONE_
<android.view.ContextThemeWrapper: void attachBaseContext(android.content.Context)> -> _NONE_
<android.app.TaskStackBuilder: void <init>()> -> _NONE_
<java.util.AbstractList: java.lang.Object set(int,java.lang.Object)> -> _NONE_
<android.print.PrintAttributes: int describeContents()> -> _SINK_ 
<android.content.pm.ProviderInfo: void dump(android.util.Printer,java.lang.String)> -> _NONE_
<android.print.PrintDocumentInfo: int getContentType()> -> _SOURCE_
<java.io.FileInputStream: long skip(long)> -> _NONE_
<android.widget.ExpandableListView: long getPackedPositionForGroup(int)> -> _SOURCE_
<android.content.ContentResolver: void unregisterContentObserver(android.database.ContentObserver)> -> _NONE_
<java.lang.Integer: int signum(int)> -> _SINK_ 
<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)> -> _NONE_
<android.widget.TextView: void onMeasure(int,int)> -> _NONE_
<java.net.Socket: void close()> -> _NONE_
<android.webkit.WebSettings$RenderPriority: void <clinit>()> -> _NONE_
<android.content.ContentProvider: android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String)> -> _NONE_
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator translationX(float)> -> _NONE_
<java.util.BitSet: void clear(int)> -> _NONE_
<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])> -> _SOURCE_
<android.app.Activity: void setDefaultKeyMode(int)> -> _SINK_ 
<android.net.wifi.WifiManager: int updateNetwork(android.net.wifi.WifiConfiguration)> -> _SOURCE_
<android.widget.ListView: void onFinishInflate()> -> _NONE_
<android.app.Activity: void reportFullyDrawn()> -> _NONE_
<android.content.ComponentName: java.lang.String getClassName()> -> _SOURCE_
<android.content.pm.PackageManager$NameNotFoundException: void <init>(java.lang.String)> -> _NONE_
<android.view.ViewGroup: void childHasTransientStateChanged(android.view.View,boolean)> -> _NONE_
<java.lang.Long: java.lang.Long valueOf(java.lang.String)> -> _SINK_ 
<android.content.res.Configuration: int hashCode()> -> _SINK_ 
<java.util.BitSet: java.lang.String toString()> -> _NONE_
<android.view.View: void postInvalidateDelayed(long)> -> _NONE_
<android.graphics.RectF: void readFromParcel(android.os.Parcel)> -> _NONE_
<android.view.accessibility.AccessibilityRecord: int getRemovedCount()> -> _SOURCE_
<android.view.ViewGroup: boolean getChildVisibleRect(android.view.View,android.graphics.Rect,android.graphics.Point)> -> _SOURCE_
<android.content.ContextWrapper: void grantUriPermission(java.lang.String,android.net.Uri,int)> -> _NONE_
<android.os.Handler: void <init>(android.os.Handler$Callback)> -> _NONE_
<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])> -> _SOURCE_
<java.lang.AbstractStringBuilder: int lastIndexOf(java.lang.String)> -> _NONE_
<android.app.ExpandableListActivity: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)> -> _NONE_
<android.os.Parcel: android.os.ParcelFileDescriptor readFileDescriptor()> -> _NONE_
<java.net.URI: java.lang.String getRawAuthority()> -> _SOURCE_
<android.view.Surface: void finalize()> -> _NONE_
<android.widget.AbsListView: boolean isTextFilterEnabled()> android.permission.STOP_APP_SWITCHES -> _NONE_
<android.media.MediaPlayer: void setVideoScalingMode(int)> -> _SINK_ 
<android.app.backup.BackupDataInput: int getDataSize()> -> _SOURCE_
<android.widget.AbsListView: void setScrollIndicators(android.view.View,android.view.View)> -> _NONE_
<android.hardware.Camera$Parameters: void setWhiteBalance(java.lang.String)> -> _SINK_ 
<android.hardware.Camera: void setFaceDetectionListener(android.hardware.Camera$FaceDetectionListener)> -> _SINK_ 
<android.content.SyncAdapterType: int describeContents()> -> _SINK_ 
<android.view.View$AccessibilityDelegate: void sendAccessibilityEvent(android.view.View,int)> -> _SINK_ 
<java.net.URI: java.lang.String getSchemeSpecificPart()> -> _SOURCE_
<android.graphics.Rect: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<android.net.sip.SipManager: void open(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.SipRegistrationListener)> -> _NONE_
<java.lang.String: void getChars(int,int,char[],int)> -> _SOURCE_
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)> -> _NONE_
<android.net.sip.SipSession$Listener: void onRingingBack(android.net.sip.SipSession)> -> _NONE_
<java.net.URLConnection: long getLastModified()> -> _SOURCE_
<android.widget.AbsListView: boolean isScrollingCacheEnabled()> -> _NONE_
<android.bluetooth.BluetoothAdapter: void closeProfileProxy(int,android.bluetooth.BluetoothProfile)> -> _NONE_
<android.view.View: void setPivotX(float)> -> _SINK_ 
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()> -> _SOURCE_
<android.content.Loader: void unregisterListener(android.content.Loader$OnLoadCompleteListener)> -> _NONE_
<android.view.View: void setScaleY(float)> -> _SINK_ 
<android.widget.AdapterView: boolean performItemClick(android.view.View,int,long)> -> _NONE_
<java.nio.charset.Charset: java.nio.CharBuffer decode(java.nio.ByteBuffer)> -> _SOURCE_
<android.app.PendingIntent: void <clinit>()> -> _NONE_
<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)> -> _NONE_
<android.hardware.Camera$Parameters: boolean isSmoothZoomSupported()> -> _NONE_
<android.view.ViewPropertyAnimator: long getStartDelay()> -> _SOURCE_
<java.lang.Character: int toTitleCase(int)> -> _SINK_ 
<android.app.Dialog: void registerForContextMenu(android.view.View)> -> _NONE_
<android.content.pm.PermissionGroupInfo: void <clinit>()> -> _NONE_
<java.net.DatagramSocket: java.net.InetAddress getLocalAddress()> -> _SOURCE_
<android.graphics.Paint: android.graphics.PathEffect getPathEffect()> -> _SOURCE_
<android.app.Dialog: void dismiss()> -> _NONE_
<java.lang.ClassLoader: java.net.URL findResource(java.lang.String)> -> _NONE_
<android.content.SyncAdapterType: int hashCode()> -> _SINK_ 
<java.security.cert.CertificateParsingException: void <init>()> -> _NONE_
<android.provider.CalendarContract$Instances: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],long,long,java.lang.String)> -> _SOURCE_
<android.graphics.drawable.Drawable: int getMinimumWidth()> -> _SOURCE_
<android.view.ViewGroup: void addFocusables(java.util.ArrayList,int,int)> -> _NONE_
<java.nio.charset.Charset: java.nio.ByteBuffer encode(java.lang.String)> -> _NONE_
<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)> -> _NONE_
<android.content.res.Resources: java.lang.String getResourcePackageName(int)> -> _SOURCE_
<android.view.Display: java.lang.String toString()> -> _NONE_
<android.content.Intent: android.content.Intent setClassName(java.lang.String,java.lang.String)> -> _SINK_ 
<android.view.View: void setHorizontalFadingEdgeEnabled(boolean)> -> _SINK_ 
<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)> -> _NONE_
<android.graphics.SurfaceTexture: void detachFromGLContext()> -> _NONE_
<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()> -> _SOURCE_
<java.lang.Boolean: int compare(boolean,boolean)> -> _SINK_ 
<java.net.URLStreamHandler: boolean equals(java.net.URL,java.net.URL)> -> _NONE_
<android.widget.TextView: void onLayout(boolean,int,int,int,int)> -> _NONE_
<android.content.ContentProviderOperation: android.net.Uri getUri()> -> _SOURCE_
<android.animation.Animator: void removeAllListeners()> -> _NONE_
<android.view.View: void initializeScrollbars(android.content.res.TypedArray)> -> _NONE_
<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String)> -> _SOURCE_
<java.lang.Short: short reverseBytes(short)> -> _SINK_ 
<android.net.Uri: android.net.Uri normalizeScheme()> -> _NONE_
<android.app.ActivityManager: int getMemoryClass()> -> _SOURCE_
<java.lang.StackTraceElement: java.lang.String getFileName()> -> _SOURCE_
<android.app.ExpandableListActivity: boolean onChildClick(android.widget.ExpandableListView,android.view.View,int,int,long)> -> _NONE_
<java.net.URL: java.lang.String toString()> -> _NONE_
<java.nio.Buffer: int capacity()> -> _NONE_
<android.webkit.WebSettings: java.lang.String getDefaultUserAgent(android.content.Context)> -> _SOURCE_
<android.widget.TextView: android.graphics.drawable.Drawable[] getCompoundDrawables()> -> _SOURCE_
<android.app.ActivityManager$MemoryInfo: int describeContents()> -> _SINK_ 
<java.io.File: java.io.File getParentFile()> -> _SOURCE_
<android.view.InputDevice: android.view.InputDevice getDevice(int)> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: void setRangeInfo(android.view.accessibility.AccessibilityNodeInfo$RangeInfo)> -> _SINK_ 
<android.database.sqlite.SQLiteDatabase: android.database.Cursor queryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.CancellationSignal)> -> _SOURCE_
<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)> -> _NONE_
<android.os.RemoteException: void <init>(java.lang.String)> -> _NONE_
<android.view.View: void onRtlPropertiesChanged(int)> -> _NONE_
<android.bluetooth.BluetoothGattCallback: void onDescriptorRead(android.bluetooth.BluetoothGatt,android.bluetooth.BluetoothGattDescriptor,int)> -> _NONE_
<android.webkit.WebView: boolean performAccessibilityAction(int,android.os.Bundle)> -> _NONE_
<java.lang.Character: int offsetByCodePoints(java.lang.CharSequence,int,int)> -> _SINK_ 
<android.graphics.Paint: void setTextLocale(java.util.Locale)> -> _SINK_ 
<java.net.DatagramSocketImpl: void disconnect()> -> _NONE_
<java.lang.ClassCircularityError: void <init>()> -> _NONE_
<android.graphics.Paint: android.graphics.Shader setShader(android.graphics.Shader)> -> _SINK_ 
<android.os.Bundle: void putCharArray(java.lang.String,char[])> -> _NONE_
<android.view.ViewGroup: void <init>(android.content.Context)> -> _NONE_
<android.os.Parcel: java.util.HashMap readHashMap(java.lang.ClassLoader)> -> _NONE_
<android.bluetooth.BluetoothDevice: void <clinit>()> -> _NONE_
<android.view.accessibility.AccessibilityRecord: void <init>()> -> _NONE_
<android.os.Bundle: short[] getShortArray(java.lang.String)> -> _SOURCE_
<java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)> -> _NONE_
<android.text.Layout: float getLineLeft(int)> -> _SOURCE_
<android.content.ContentProvider: void onLowMemory()> -> _NONE_
<android.graphics.Paint: boolean isAntiAlias()> -> _NONE_
<android.accounts.Account: java.lang.String toString()> -> _NONE_
<android.content.ContentProviderClient: void <init>()> -> _NONE_
<android.view.ViewGroup: android.animation.LayoutTransition getLayoutTransition()> -> _SOURCE_
<android.location.LocationProvider: boolean requiresCell()> -> _NONE_
<java.nio.IntBuffer: java.nio.IntBuffer put(int[])> -> _SOURCE_
<android.view.accessibility.AccessibilityEvent: void setContentChangeTypes(int)> -> _SINK_ 
<android.view.KeyEvent: int getFlags()> -> _SOURCE_
<android.app.Dialog: void setVolumeControlStream(int)> -> _SINK_ 
<java.net.InetAddress: boolean equals(java.lang.Object)> -> _NONE_
<android.nfc.NfcAdapter: void enableForegroundNdefPush(android.app.Activity,android.nfc.NdefMessage)> -> _NONE_
<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)> -> _NONE_
<android.nfc.NdefRecord: byte[] getPayload()> -> _SOURCE_
<java.security.CodeSigner: java.security.cert.CertPath getSignerCertPath()> -> _SOURCE_
<java.lang.reflect.Method: boolean isBridge()> -> _NONE_
<android.bluetooth.BluetoothHeadset: boolean isAudioConnected(android.bluetooth.BluetoothDevice)> -> _NONE_
<android.view.ContextThemeWrapper: void onApplyThemeResource(android.content.res.Resources$Theme,int,boolean)> -> _NONE_
<android.accounts.AccountManager: android.accounts.AccountManagerFuture editProperties(java.lang.String,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> -> _SOURCE_
<android.widget.AbsListView: void getFocusedRect(android.graphics.Rect)> -> _SOURCE_
<java.nio.channels.spi.AbstractSelector: java.nio.channels.spi.SelectorProvider provider()> -> _NONE_
<android.content.ContentResolver: void removeStatusChangeListener(java.lang.Object)> -> _NONE_
<org.apache.http.message.ParserCursor: java.lang.String toString()> -> _NONE_
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,boolean,android.accounts.AccountManagerCallback,android.os.Handler)> -> _SOURCE_
<android.text.style.DynamicDrawableSpan: void <init>(int)> -> _NONE_
<android.view.View: int getScrollY()> -> _SOURCE_
<java.util.UUID: java.lang.String toString()> -> _NONE_
<java.nio.ByteBuffer: boolean hasArray()> -> _NONE_
<android.widget.TextView: void setHorizontallyScrolling(boolean)> -> _SINK_ 
<android.database.sqlite.SQLiteDatabase: boolean isDbLockedByCurrentThread()> -> _NONE_
<android.text.Layout: void <init>(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,float,float)> -> _NONE_
<android.widget.Scroller: void setFinalX(int)> -> _SINK_ 
<android.accessibilityservice.AccessibilityService: boolean onGesture(int)> -> _NONE_
<android.location.LocationManager: void clearTestProviderLocation(java.lang.String)> -> _NONE_
<java.util.concurrent.TimeUnit: long toMinutes(long)> -> _NONE_
<android.view.ViewGroup: void setLayoutAnimation(android.view.animation.LayoutAnimationController)> -> _NONE_
<org.apache.http.util.CharArrayBuffer: java.lang.String toString()> -> _NONE_
<android.content.Intent: android.os.Parcelable getParcelableExtra(java.lang.String)> -> _SOURCE_
<java.util.HashMap: java.lang.Object remove(java.lang.Object)> -> _NONE_
<android.content.Loader: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _NONE_
<android.nfc.FormatException: void <init>(java.lang.String)> -> _NONE_
<android.app.ActionBar: void <init>()> -> _NONE_
<java.nio.channels.SelectionKey: java.lang.Object attach(java.lang.Object)> -> _SOURCE_
<java.io.File: boolean isAbsolute()> -> _NONE_
<android.view.accessibility.AccessibilityNodeInfo: void setDismissable(boolean)> -> _SINK_ 
<android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,int,int[],android.view.MotionEvent$PointerCoords[],int,float,float,int,int,int,int)> -> _SINK_ 
<android.content.IntentFilter: java.util.Iterator schemesIterator()> -> _NONE_
<android.view.View: void unscheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable)> -> _NONE_
<android.app.Dialog: void setFeatureDrawableUri(int,android.net.Uri)> -> _SINK_ 
<android.webkit.WebSettings: void setEnableSmoothTransition(boolean)> -> _NONE_
<java.lang.Class: java.lang.String getCanonicalName()> -> _SOURCE_
<android.app.FragmentManager: void invalidateOptionsMenu()> -> _NONE_
<android.os.Handler: void removeCallbacks(java.lang.Runnable,java.lang.Object)> -> _NONE_
<android.animation.LayoutTransition: void showChild(android.view.ViewGroup,android.view.View)> -> _NONE_
<android.hardware.Camera: void finalize()> -> _NONE_
<android.bluetooth.BluetoothClass: void <clinit>()> -> _NONE_
<android.webkit.WebView: void clearMatches()> -> _NONE_
<android.widget.ExpandableListView: long getSelectedId()> -> _SOURCE_
<android.view.View: int[] getDrawableState()> -> _SOURCE_
<android.telephony.PhoneStateListener: void onCallForwardingIndicatorChanged(boolean)> -> _NONE_
<android.graphics.Canvas: int getMaximumBitmapWidth()> -> _SOURCE_
<java.lang.IllegalAccessError: void <init>()> -> _NONE_
<android.content.res.TypedArray: int getIndex(int)> -> _SOURCE_
<android.nfc.tech.IsoDep: void <init>()> -> _NONE_
<android.view.View: int getNextFocusRightId()> -> _SOURCE_
<android.view.View: void dispatchConfigurationChanged(android.content.res.Configuration)> -> _NONE_
<android.content.ContextWrapper: void revokeUriPermission(android.net.Uri,int)> -> _NONE_
<java.security.ProtectionDomain: void <init>(java.security.CodeSource,java.security.PermissionCollection)> -> _NONE_
<android.net.http.SslCertificate: java.lang.String getValidNotAfter()> -> _SOURCE_
<java.lang.Thread: void join(long,int)> -> _NONE_
<android.view.WindowId: int describeContents()> -> _SINK_ 
<java.lang.IllegalMonitorStateException: void <init>()> -> _NONE_
<android.os.Handler: boolean sendEmptyMessageAtTime(int,long)> -> _SINK_ 
<android.app.PendingIntent: android.app.PendingIntent getActivities(android.content.Context,int,android.content.Intent[],int,android.os.Bundle)> -> _SOURCE_
<android.webkit.WebView: void onGlobalFocusChanged(android.view.View,android.view.View)> -> _NONE_
<android.content.ContentProviderClient: android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String,android.os.CancellationSignal)> -> _NONE_
<java.nio.LongBuffer: java.nio.LongBuffer put(java.nio.LongBuffer)> -> _NONE_
<android.widget.TextView: void jumpDrawablesToCurrentState()> -> _NONE_
<android.net.wifi.WifiManager$WifiLock: void setReferenceCounted(boolean)> -> _SINK_ 
<android.widget.AbsListView: java.lang.CharSequence getTextFilter()> -> _SOURCE_
<android.content.Intent: void removeExtra(java.lang.String)> -> _NONE_
<java.lang.Integer: byte byteValue()> -> _NONE_
<android.app.Notification$Action: void <init>(int,java.lang.CharSequence,android.app.PendingIntent)> -> _NONE_
<java.net.URL: boolean sameFile(java.net.URL)> -> _NONE_
<java.lang.Package: java.lang.Package[] getPackages()> -> _SOURCE_
<android.os.Handler: boolean sendEmptyMessageDelayed(int,long)> -> _SINK_ 
<android.webkit.WebView: void setHttpAuthUsernamePassword(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_ 
<java.net.URLConnection: long getExpiration()> -> _SOURCE_
<android.app.backup.BackupDataInput: void <init>()> -> _NONE_
<java.io.PrintWriter: void print(boolean)> -> _NONE_
<java.nio.channels.FileLock: long position()> -> _NONE_
<android.widget.AdapterView: int getFirstVisiblePosition()> -> _SOURCE_
<android.webkit.WebSettings: void setDefaultZoom(android.webkit.WebSettings$ZoomDensity)> -> _NONE_
<java.lang.Double: byte byteValue()> -> _NONE_
<android.os.CancellationSignal: void throwIfCanceled()> -> _NONE_
<android.view.View: int getMinimumHeight()> -> _SOURCE_
<android.bluetooth.BluetoothGattCharacteristic: boolean setValue(java.lang.String)> -> _SINK_ 
<android.provider.Settings$Secure: void <init>()> -> _NONE_
<android.app.Fragment: boolean isRemoving()> -> _NONE_
<android.content.SyncAdapterType: void <init>(android.os.Parcel)> -> _NONE_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,short)> -> _NONE_
<java.nio.charset.CharsetEncoder: byte[] replacement()> -> _NONE_
<android.graphics.Movie: void finalize()> -> _NONE_
<android.view.View: void <init>(android.content.Context,android.util.AttributeSet)> -> _NONE_
<android.view.MotionEvent: int getActionIndex()> -> _SOURCE_
<android.telephony.SignalStrength: void <init>()> -> _NONE_
<android.content.res.Resources: void getValue(java.lang.String,android.util.TypedValue,boolean)> -> _SOURCE_
<android.graphics.drawable.Drawable: void setChangingConfigurations(int)> -> _NONE_
<android.widget.TextView: void setInputType(int)> -> _SINK_ 
<java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)> -> _NONE_
<java.lang.Short: int compareTo(java.lang.Short)> -> _SINK_ 
<android.text.TextPaint: void set(android.text.TextPaint)> -> _SINK_ 
<android.print.PrintDocumentAdapter$LayoutResultCallback: void onLayoutFinished(android.print.PrintDocumentInfo,boolean)> -> _NONE_
<android.bluetooth.BluetoothGattCallback: void onCharacteristicChanged(android.bluetooth.BluetoothGatt,android.bluetooth.BluetoothGattCharacteristic)> -> _NONE_
<android.view.accessibility.AccessibilityRecord: int getAddedCount()> -> _SOURCE_
<android.app.PendingIntent: int describeContents()> -> _SINK_ 
<android.view.WindowId: void registerFocusObserver(android.view.WindowId$FocusObserver)> -> _NONE_
<android.os.Handler: void removeCallbacksAndMessages(java.lang.Object)> -> _NONE_
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int[],int,int,android.graphics.Bitmap$Config)> -> _SINK_ 
<android.app.Notification: void <init>()> -> _NONE_
<java.io.File: java.net.URL toURL()> -> _NONE_
<android.os.Parcel: android.os.IBinder readStrongBinder()> -> _NONE_
<java.nio.charset.CharsetDecoder: float averageCharsPerByte()> -> _NONE_
<java.net.URI: int getPort()> -> _SOURCE_
<java.nio.channels.Pipe: void <init>()> -> _NONE_
<java.io.PrintStream: void <init>(java.io.File)> -> _NONE_
<android.app.Activity: android.content.Intent getIntent()> -> _SOURCE_
<android.content.IntentFilter: int getPriority()> -> _SOURCE_
<android.telephony.CellInfo: int hashCode()> -> _NONE_
<android.widget.ExpandableListView: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)> -> _NONE_
<android.view.WindowId: java.lang.String toString()> -> _NONE_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,double)> -> _NONE_
<android.graphics.Shader: void setLocalMatrix(android.graphics.Matrix)> -> _SINK_ 
<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)> -> _NONE_
<android.view.ViewGroup: android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()> -> _NONE_
<android.widget.RemoteViews: android.view.View apply(android.content.Context,android.view.ViewGroup)> -> _NONE_
<java.lang.Float: int hashCode()> -> _SINK_ 
<java.io.File: boolean isHidden()> -> _NONE_
<android.view.View: int getLeftPaddingOffset()> -> _SOURCE_
<android.widget.TextView: void setTransformationMethod(android.text.method.TransformationMethod)> -> _SINK_ 
<android.view.View: void setClickable(boolean)> -> _SINK_ 
<android.view.ActionProvider: android.view.View onCreateActionView(android.view.MenuItem)> -> _NONE_
<android.content.ContextWrapper: void setTheme(int)> -> _SINK_ 
<java.lang.Short: float floatValue()> -> _NONE_
<android.content.Context: java.lang.CharSequence getText(int)> -> _SOURCE_
<android.content.Intent: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<android.os.Messenger: boolean equals(java.lang.Object)> -> _NONE_
<android.widget.ListView: boolean areFooterDividersEnabled()> -> _NONE_
<android.view.WindowManager$LayoutParams: java.lang.CharSequence getTitle()> -> _SOURCE_
<android.content.ContentResolver: int getIsSyncable(android.accounts.Account,java.lang.String)> -> _SOURCE_
<android.app.Activity: void startActivities(android.content.Intent[],android.os.Bundle)> -> _SINK_ 
<android.app.backup.BackupDataInputStream: int read()> -> _SINK_ 
<android.graphics.RectF: void offsetTo(float,float)> -> _NONE_
<android.os.Message: void <clinit>()> -> _NONE_
<android.content.pm.PermissionGroupInfo: int describeContents()> -> _SINK_ 
<android.view.animation.Animation: boolean getFillBefore()> -> _SOURCE_
<android.print.PrintDocumentInfo: int describeContents()> -> _SINK_ 
<android.location.Criteria: void setBearingRequired(boolean)> -> _SINK_ 
<android.webkit.WebView: boolean isPrivateBrowsingEnabled()> -> _NONE_
<android.view.View: void scrollBy(int,int)> -> _NONE_
<android.content.ClipData$Item: java.lang.String getHtmlText()> -> _SOURCE_
<android.accessibilityservice.AccessibilityServiceInfo: boolean equals(java.lang.Object)> -> _NONE_
<android.view.accessibility.AccessibilityNodeInfo: void setEnabled(boolean)> -> _SINK_ 
<android.hardware.Camera$Parameters: int getExposureCompensation()> -> _SOURCE_
<android.view.KeyCharacterMap: void finalize()> -> _NONE_
<android.widget.AdapterView: void addView(android.view.View)> -> _NONE_
<android.webkit.WebView: void onOverScrolled(int,int,boolean,boolean)> -> _NONE_
<android.telephony.gsm.SmsManager: java.util.ArrayList divideMessage(java.lang.String)> -> _SOURCE_
<java.lang.Character: boolean isMirrored(int)> -> _NONE_
<android.view.accessibility.AccessibilityNodeInfo: boolean isMultiLine()> -> _NONE_
<android.view.accessibility.AccessibilityNodeInfo: int hashCode()> -> _SINK_ 
<android.content.IntentFilter: int countDataAuthorities()> -> _SINK_ 
<android.view.animation.Animation: void setDuration(long)> -> _NONE_
<android.app.Application: void onCreate()> -> _NONE_
<android.graphics.Bitmap: boolean hasAlpha()> -> _NONE_
<android.view.View: android.content.Context getContext()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: void setLongClickable(boolean)> -> _SINK_ 
<java.lang.Character: boolean isDefined(int)> -> _NONE_
<java.lang.NoSuchFieldException: void <init>(java.lang.String)> -> _NONE_
<android.graphics.Paint$Cap: android.graphics.Paint$Cap valueOf(java.lang.String)> -> _SINK_ 
<java.net.URLConnection: void setFileNameMap(java.net.FileNameMap)> -> _NONE_
<java.lang.Package: java.lang.annotation.Annotation getAnnotation(java.lang.Class)> -> _SOURCE_
<java.util.concurrent.TimeUnit: long toDays(long)> -> _NONE_
<java.lang.Thread: long getId()> -> _SOURCE_
<java.lang.Void: void <init>()> -> _NONE_
<android.net.sip.SipSession: void setListener(android.net.sip.SipSession$Listener)> -> _SINK_ 
<android.net.wifi.WifiInfo: java.lang.String toString()> -> _NONE_
<android.widget.AbsListView: void onFocusChanged(boolean,int,android.graphics.Rect)> -> _NONE_
<android.widget.TextView: float getShadowDx()> -> _SOURCE_
<java.net.DatagramSocket: void connect(java.net.SocketAddress)> -> _NONE_
<java.io.InputStream: long skip(long)> -> _NONE_
<android.widget.TextView: void setMinHeight(int)> -> _SINK_ 
<java.nio.ByteOrder: java.lang.String toString()> -> _NONE_
<java.util.concurrent.TimeUnit: void timedWait(java.lang.Object,long)> -> _NONE_
<android.media.TimedText: java.lang.String getText()> -> _SOURCE_
<android.graphics.Bitmap: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<android.animation.ValueAnimator: void setFloatValues(float[])> -> _SINK_ 
<org.apache.http.message.ParserCursor: int getPos()> -> _SOURCE_
<android.net.sip.SipManager: android.net.sip.SipAudioCall takeAudioCall(android.content.Intent,android.net.sip.SipAudioCall$Listener)> android.permission.USE_SIP -> _SOURCE_
<android.media.MediaPlayer$TrackInfo: void <init>()> -> _NONE_
<android.app.PendingIntent: java.lang.String toString()> -> _NONE_
<java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)> -> _SINK_ 
<android.view.Display: void getMetrics(android.util.DisplayMetrics)> -> _SOURCE_
<android.bluetooth.BluetoothDevice: java.lang.String getName()> android.permission.BLUETOOTH -> _SOURCE_
<android.net.Uri: void <clinit>()> -> _NONE_
<android.net.sip.SipProfile: java.lang.String getProtocol()> -> _SOURCE_
<java.lang.AbstractStringBuilder: int length()> -> _NONE_
<java.net.Socket: void <init>(java.net.InetAddress,int,java.net.InetAddress,int)> -> _NONE_
<android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri)> -> _SINK_ 
<android.content.pm.PermissionGroupInfo: java.lang.String toString()> -> _NONE_
<android.view.InputDevice: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<android.os.ParcelFileDescriptor: boolean canDetectErrors()> -> _NONE_
<android.content.Intent: void <init>(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)> -> _NONE_
<java.net.ServerSocket: boolean getReuseAddress()> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: void setSource(android.view.View,int)> -> _SINK_ 
<android.view.View: void dispatchDisplayHint(int)> -> _NONE_
<java.nio.charset.Charset: java.nio.ByteBuffer encode(java.nio.CharBuffer)> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: void setPassword(boolean)> -> _SINK_ 
<android.util.DisplayMetrics: boolean equals(java.lang.Object)> -> _NONE_
<java.lang.StringBuffer: char charAt(int)> -> _NONE_
<android.net.wifi.WifiInfo: boolean getHiddenSSID()> -> _SOURCE_
<android.content.ContextWrapper: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)> -> _SOURCE_
<android.webkit.WebSettings: boolean getMediaPlaybackRequiresUserGesture()> -> _SOURCE_
<android.view.View: void setMinimumWidth(int)> -> _SINK_ 
<android.graphics.Bitmap: void setConfig(android.graphics.Bitmap$Config)> -> _SINK_ 
<android.webkit.ConsoleMessage: void <init>(java.lang.String,java.lang.String,int,android.webkit.ConsoleMessage$MessageLevel)> -> _NONE_
<android.webkit.WebView: void clearFormData()> -> _NONE_
<java.lang.Thread: java.lang.String toString()> -> _NONE_
<java.nio.channels.ServerSocketChannel: java.nio.channels.ServerSocketChannel open()> -> _NONE_
<android.graphics.Bitmap: int getScaledWidth(android.graphics.Canvas)> -> _SOURCE_
<org.apache.http.ProtocolVersion: int getMajor()> -> _SOURCE_
<java.lang.Long: java.lang.Long decode(java.lang.String)> -> _SINK_ 
<java.nio.CharBuffer: java.lang.CharSequence subSequence(int,int)> -> _NONE_
<java.io.PrintStream: void print(java.lang.String)> -> _NONE_
<java.lang.ClassNotFoundException: void <init>(java.lang.String)> -> _NONE_
<android.graphics.Bitmap$Config: android.graphics.Bitmap$Config valueOf(java.lang.String)> -> _SINK_ 
<android.location.Location: void setElapsedRealtimeNanos(long)> -> _SINK_ 
<java.lang.Long: byte byteValue()> -> _NONE_
<android.widget.RemoteViews: void setChar(int,java.lang.String,char)> -> _SINK_ 
<android.nfc.NdefMessage: java.lang.String toString()> -> _NONE_
<android.view.ViewGroup: void jumpDrawablesToCurrentState()> -> _NONE_
<java.security.ProtectionDomain: void <init>(java.security.CodeSource,java.security.PermissionCollection,java.lang.ClassLoader,java.security.Principal[])> -> _NONE_
<android.app.Dialog: android.content.Context getContext()> -> _SOURCE_
<android.location.Location: void <init>(android.location.Location)> -> _NONE_
<android.graphics.Bitmap: boolean sameAs(android.graphics.Bitmap)> -> _NONE_
<android.os.Bundle: java.lang.String getString(java.lang.String)> -> _SOURCE_
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setInterpolator(android.animation.TimeInterpolator)> -> _SINK_ 
<android.view.accessibility.AccessibilityNodeInfo: void getBoundsInParent(android.graphics.Rect)> -> _SOURCE_
<android.app.Activity: android.app.Activity getParent()> -> _SOURCE_
<org.apache.http.message.BasicLineParser: org.apache.http.Header parseHeader(java.lang.String,org.apache.http.message.LineParser)> -> _NONE_
<android.widget.TextView: void setCursorVisible(boolean)> -> _SINK_ 
<android.os.storage.OnObbStateChangeListener: void <init>()> -> _NONE_
<android.hardware.Camera$Parameters: java.lang.String getColorEffect()> -> _SOURCE_
<android.view.View: void setFocusable(boolean)> -> _SINK_ 
<android.animation.Animator: void removePauseListener(android.animation.Animator$AnimatorPauseListener)> -> _NONE_
<android.content.ContextWrapper: void sendStickyBroadcast(android.content.Intent)> -> _SINK_ 
<android.database.sqlite.SQLiteDatabase: boolean isReadOnly()> -> _NONE_
<java.security.CodeSource: boolean implies(java.security.CodeSource)> -> _NONE_
<android.webkit.WebView: boolean zoomOut()> -> _NONE_
<android.view.inputmethod.EditorInfo: void <init>()> -> _NONE_
<android.graphics.Matrix: boolean mapRect(android.graphics.RectF)> -> _NONE_
<android.content.res.AssetFileDescriptor: java.io.FileInputStream createInputStream()> -> _NONE_
<java.lang.StringBuilder: java.lang.StringBuilder insert(int,double)> -> _NONE_
<android.graphics.Canvas: void drawPoints(float[],android.graphics.Paint)> -> _NONE_
<android.content.res.Resources: void parseBundleExtras(android.content.res.XmlResourceParser,android.os.Bundle)> -> _NONE_
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothServerSocket listenUsingRfcommWithServiceRecord(java.lang.String,java.util.UUID)> -> _NONE_
<android.telephony.TelephonyManager: java.lang.String getDeviceSoftwareVersion()> -> _SOURCE_
<android.view.InputEvent: void <init>()> -> _NONE_
<java.nio.charset.Charset: boolean canEncode()> -> _NONE_
<java.io.PrintStream: void clearError()> -> _NONE_
<android.view.Window: android.view.Window$Callback getCallback()> -> _SOURCE_
<android.animation.ValueAnimator: void <init>()> -> _NONE_
<android.widget.ExpandableListView: long getExpandableListPosition(int)> -> _SOURCE_
<org.apache.http.util.CharArrayBuffer: void ensureCapacity(int)> -> _NONE_
<android.app.backup.BackupAgentHelper: void setWallpaper(android.graphics.Bitmap)> android.permission.MANAGE_APP_TOKENS android.permission.SET_WALLPAPER -> _SINK_ 
<android.animation.ValueAnimator: void start()> -> _NONE_
<java.lang.StringBuffer: int lastIndexOf(java.lang.String,int)> -> _SINK_ 
<android.widget.TextView: android.content.res.ColorStateList getHintTextColors()> -> _SOURCE_
<android.widget.TextView: void setHintTextColor(android.content.res.ColorStateList)> -> _SINK_ 
<android.view.View: boolean isLongClickable()> -> _NONE_
<android.view.accessibility.AccessibilityRecord: java.lang.CharSequence getContentDescription()> -> _SOURCE_
<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])> -> _SOURCE_
<android.telephony.TelephonyManager: java.lang.String getSimCountryIso()> -> _SOURCE_
<android.view.ActionMode: boolean isTitleOptional()> -> _NONE_
<java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit[] values()> -> _NONE_
<android.view.accessibility.AccessibilityNodeInfo$CollectionInfo: int getColumnCount()> -> _SOURCE_
<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.CharSequence,int,int)> -> _NONE_
<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo: int getColumnIndex()> -> _SOURCE_
<android.text.style.DynamicDrawableSpan: int getVerticalAlignment()> -> _SOURCE_
<android.text.Layout: int getLineBounds(int,android.graphics.Rect)> -> _SOURCE_
<android.content.IntentSender: void sendIntent(android.content.Context,int,android.content.Intent,android.content.IntentSender$OnFinished,android.os.Handler,java.lang.String)> -> _SINK_ 
<android.widget.AbsListView: void onDisplayHint(int)> -> _NONE_
<android.view.View: android.view.animation.Animation getAnimation()> -> _SOURCE_
<java.security.Timestamp: java.lang.String toString()> -> _NONE_
<java.util.Locale: java.lang.String toString()> -> _NONE_
<android.view.KeyEvent: boolean isCapsLockOn()> -> _NONE_
<android.animation.Keyframe: void setInterpolator(android.animation.TimeInterpolator)> -> _NONE_
<android.widget.AbsListView: void setStackFromBottom(boolean)> -> _NONE_
<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])> -> _NONE_
<android.location.Criteria: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<android.graphics.RectF: void offset(float,float)> -> _NONE_
<android.view.WindowManager$LayoutParams: void <init>(int)> -> _NONE_
<android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri,java.util.Map)> -> _SINK_ 
<android.app.Dialog: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)> -> _NONE_
<java.util.AbstractMap: java.lang.String toString()> -> _NONE_
<android.net.wifi.WifiEnterpriseConfig: int getEapMethod()> -> _SOURCE_
<android.os.Parcel: void writeBundle(android.os.Bundle)> -> _NONE_
<android.print.PageRange: void <clinit>()> -> _NONE_
<android.os.ParcelFileDescriptor: int getFd()> -> _SOURCE_
<android.view.accessibility.AccessibilityEvent: void setMovementGranularity(int)> -> _SINK_ 
<android.widget.TextView: void <init>(android.content.Context)> -> _NONE_
<java.lang.Enum: java.lang.Object clone()> -> _NONE_
<android.content.Intent: int[] getIntArrayExtra(java.lang.String)> -> _SOURCE_
<android.view.ViewGroup: void cleanupLayoutState(android.view.View)> -> _NONE_
<android.view.View: boolean isInLayout()> -> _NONE_
<android.view.DragEvent: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<android.view.View: android.view.Display getDisplay()> -> _SOURCE_
<android.location.Location: void removeAccuracy()> -> _NONE_
<android.content.BroadcastReceiver$PendingResult: java.lang.String getResultData()> -> _SOURCE_
<java.math.BigInteger: java.lang.String toString(int)> -> _NONE_
<android.app.Notification$Builder: android.app.Notification$Builder setContentTitle(java.lang.CharSequence)> -> _SINK_ 
<android.webkit.WebSettings: boolean supportZoom()> -> _NONE_
<org.apache.http.util.CharArrayBuffer: int indexOf(int)> -> _SINK_ 
<android.animation.ValueAnimator: void setRepeatCount(int)> -> _SINK_ 
<android.widget.AdapterView: boolean canAnimate()> -> _NONE_
<android.os.Bundle: java.util.ArrayList getParcelableArrayList(java.lang.String)> -> _SOURCE_
<android.app.backup.BackupAgentHelper: void onRestore(android.app.backup.BackupDataInput,int,android.os.ParcelFileDescriptor)> -> _NONE_
<java.lang.Byte: float floatValue()> -> _NONE_
<android.bluetooth.BluetoothGatt: android.bluetooth.BluetoothGattService getService(java.util.UUID)> -> _SOURCE_
<android.graphics.drawable.Drawable: android.graphics.Rect getBounds()> -> _SOURCE_
<android.graphics.Region: boolean getBounds(android.graphics.Rect)> -> _SOURCE_
<java.nio.FloatBuffer: float[] array()> -> _NONE_
<android.graphics.Paint: android.graphics.MaskFilter getMaskFilter()> -> _SOURCE_
<android.view.ViewGroup: void findViewsWithText(java.util.ArrayList,java.lang.CharSequence,int)> -> _NONE_
<android.widget.ExpandableListView: void <init>(android.content.Context,android.util.AttributeSet)> -> _NONE_
<android.view.ViewTreeObserver: void removeOnDrawListener(android.view.ViewTreeObserver$OnDrawListener)> -> _NONE_
<android.nfc.NdefMessage: void <init>(android.nfc.NdefRecord[])> -> _NONE_
<android.content.res.Resources$Theme: void applyStyle(int,boolean)> -> _NONE_
<android.text.style.CharacterStyle: void <init>()> -> _NONE_
<java.nio.charset.Charset: int hashCode()> -> _NONE_
<android.telephony.PhoneStateListener: void onDataConnectionStateChanged(int,int)> -> _NONE_
<java.lang.Byte: void <init>(byte)> -> _NONE_
<android.telephony.TelephonyManager: int getPhoneType()> -> _SOURCE_
<java.net.URI: int compareTo(java.lang.Object)> -> _SINK_ 
<android.content.BroadcastReceiver$PendingResult: void finish()> -> _NONE_
<android.app.Activity: void finish()> android.permission.BROADCAST_STICKY android.permission.USE_CREDENTIALS android.permission.MANAGE_APP_TOKENS android.permission.UPDATE_DEVICE_STATS -> _NONE_
<android.util.Log: int w(java.lang.String,java.lang.String)> -> _SINK_ 
<java.lang.Integer: int highestOneBit(int)> -> _SINK_ 
<android.view.accessibility.AccessibilityEvent: java.lang.String eventTypeToString(int)> -> _SINK_ 
<android.webkit.WebSettings: void setRenderPriority(android.webkit.WebSettings$RenderPriority)> -> _NONE_
<java.nio.channels.FileLock: java.lang.String toString()> -> _NONE_
<android.telephony.ServiceState: boolean equals(java.lang.Object)> -> _NONE_
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getContentDescription()> -> _SOURCE_
<android.content.Intent: java.lang.String toURI()> -> _NONE_
<android.telephony.PhoneStateListener: void onDataActivity(int)> -> _NONE_
<android.app.Activity: void setFinishOnTouchOutside(boolean)> -> _SINK_ 
<android.view.accessibility.AccessibilityEvent: java.lang.CharSequence getPackageName()> -> _SOURCE_
<android.view.animation.Animation: long getStartOffset()> -> _SOURCE_
<android.database.sqlite.SQLiteStatement: android.os.ParcelFileDescriptor simpleQueryForBlobFileDescriptor()> -> _NONE_
<android.os.Parcel: void writeInt(int)> -> _NONE_
<android.view.View: float getPivotY()> -> _SOURCE_
<java.lang.Short: java.lang.Short valueOf(java.lang.String,int)> -> _SINK_ 
<android.graphics.SurfaceTexture: void finalize()> -> _NONE_
<android.telephony.SignalStrength: int getCdmaDbm()> -> _SOURCE_
<android.content.BroadcastReceiver: int getResultCode()> -> _SOURCE_
<android.app.backup.BackupDataInput: void skipEntityData()> -> _NONE_
<java.net.NetworkInterface: java.net.NetworkInterface getByIndex(int)> -> _SOURCE_
<java.lang.AssertionError: void <init>(double)> -> _NONE_
<android.content.IntentSender$SendIntentException: void <init>()> -> _NONE_
<android.print.PrintAttributes: java.lang.String toString()> -> _NONE_
<java.io.Writer: java.io.Writer append(java.lang.CharSequence,int,int)> -> _NONE_
<java.nio.LongBuffer: java.nio.LongBuffer put(long[],int,int)> -> _NONE_
<android.content.ContentProviderClient: android.os.Bundle call(java.lang.String,java.lang.String,android.os.Bundle)> -> _NONE_
<android.webkit.WebView: android.graphics.Picture capturePicture()> -> _NONE_
<android.hardware.Camera$Parameters: float getVerticalViewAngle()> -> _SOURCE_
<java.net.URLConnection: int getContentLength()> -> _SOURCE_
<android.widget.TextView$BufferType: android.widget.TextView$BufferType valueOf(java.lang.String)> -> _SINK_ 
<android.view.Display: java.lang.String getName()> -> _SOURCE_
<android.os.Message: android.os.Handler getTarget()> -> _SOURCE_
<java.net.Socket: void <init>(java.net.InetAddress,int,boolean)> -> _NONE_
<android.view.accessibility.AccessibilityRecord: java.util.List getText()> -> _SOURCE_
<android.view.View: android.view.TouchDelegate getTouchDelegate()> -> _SOURCE_
<android.widget.AbsListView: int getListPaddingLeft()> -> _SOURCE_
<android.content.pm.ConfigurationInfo: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<android.text.style.DynamicDrawableSpan: void draw(android.graphics.Canvas,java.lang.CharSequence,int,int,float,int,int,int,android.graphics.Paint)> -> _NONE_
<android.content.IntentFilter: void <init>(java.lang.String,java.lang.String)> -> _NONE_
<java.net.InetAddress: boolean isMCSiteLocal()> -> _NONE_
<java.lang.reflect.InvocationTargetException: void <init>()> -> _NONE_
<android.accounts.Account: int describeContents()> -> _SINK_ 
<android.hardware.Camera$Parameters: void setZoom(int)> -> _SINK_ 
<java.security.cert.X509Certificate: void <init>()> -> _NONE_
<org.apache.http.util.ByteArrayBuffer: void append(int)> -> _NONE_
<android.bluetooth.BluetoothGattCharacteristic: java.lang.Float getFloatValue(int,int)> -> _SOURCE_
<java.net.URLConnection: java.util.Map getRequestProperties()> -> _SOURCE_
<android.view.Window: int getForcedWindowFlags()> -> _SOURCE_
<android.graphics.Matrix: boolean setRectToRect(android.graphics.RectF,android.graphics.RectF,android.graphics.Matrix$ScaleToFit)> -> _SINK_ 
<java.nio.IntBuffer: void <init>()> -> _NONE_
<android.widget.ExpandableListView: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> -> _NONE_
<android.provider.Settings$Secure: long getLong(android.content.ContentResolver,java.lang.String)> -> _SOURCE_
<java.nio.CharBuffer: java.nio.CharBuffer wrap(char[])> -> _NONE_
<android.hardware.Camera$Parameters: void setRecordingHint(boolean)> -> _SINK_ 
<java.lang.Float: void <clinit>()> -> _NONE_
<android.graphics.Path$FillType: android.graphics.Path$FillType valueOf(java.lang.String)> -> _SINK_ 
<android.provider.Settings$System: void <clinit>()> -> _NONE_
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getPackageName()> -> _SOURCE_
<java.lang.Character: char toLowerCase(char)> -> _SINK_ 
<java.lang.Byte: java.lang.Byte valueOf(byte)> -> _SINK_ 
<java.util.BitSet: void flip(int)> -> _NONE_
<android.content.SyncRequest: void <init>()> -> _NONE_
<java.lang.Character: char charValue()> -> _NONE_
<java.lang.AbstractStringBuilder: void getChars(int,int,char[],int)> -> _SOURCE_
<android.widget.AbsListView: android.graphics.drawable.Drawable getSelector()> -> _SOURCE_
<android.widget.TextView: void setMinEms(int)> -> _SINK_ 
<android.content.pm.ApplicationInfo: java.lang.String toString()> -> _NONE_
<android.widget.TextView: void setFreezesText(boolean)> -> _SINK_ 
<android.graphics.Matrix: void setSinCos(float,float,float,float)> -> _SINK_ 
<android.graphics.Canvas$VertexMode: void <clinit>()> -> _NONE_
<android.graphics.Bitmap: void copyPixelsFromBuffer(java.nio.Buffer)> -> _NONE_
<android.net.wifi.WifiManager: boolean pingSupplicant()> -> _NONE_
<android.view.KeyEvent: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<java.lang.StackTraceElement: java.lang.String toString()> -> _NONE_
<android.net.sip.SipException: void <init>(java.lang.String)> -> _NONE_
<android.graphics.Point: void negate()> -> _NONE_
<android.webkit.WebView: void <init>(android.content.Context,android.util.AttributeSet)> android.permission.INTERNET -> _NONE_
<android.content.ContentProvider: boolean isTemporary()> -> _NONE_
<java.net.InetAddress: boolean isSiteLocalAddress()> -> _NONE_
<java.nio.ByteBuffer: java.nio.ByteOrder order()> -> _NONE_
<android.webkit.SslErrorHandler: void cancel()> -> _NONE_
<java.util.BitSet: boolean equals(java.lang.Object)> -> _NONE_
<android.accounts.AccountManager: java.lang.String getUserData(android.accounts.Account,java.lang.String)> -> _SOURCE_
<android.app.LocalActivityManager: void dispatchStop()> -> _NONE_
<android.app.Fragment: void onConfigurationChanged(android.content.res.Configuration)> -> _NONE_
<java.net.DatagramSocket: int getSendBufferSize()> -> _SOURCE_
<java.nio.Buffer: java.nio.Buffer rewind()> -> _NONE_
<java.security.NoSuchAlgorithmException: void <init>(java.lang.String,java.lang.Throwable)> -> _NONE_
<android.view.MotionEvent: void setAction(int)> -> _SINK_ 
<android.location.Location: void set(android.location.Location)> -> _SINK_ 
<android.net.sip.SipAudioCall: void <init>(android.content.Context,android.net.sip.SipProfile)> -> _NONE_
<java.net.Proxy: int hashCode()> -> _SINK_ 
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)> -> _NONE_
<java.lang.StackTraceElement: java.lang.String getClassName()> -> _SOURCE_
<android.view.ViewGroup: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)> -> _NONE_
<java.nio.CharBuffer: boolean hasArray()> -> _NONE_
<android.view.accessibility.AccessibilityRecord: int getFromIndex()> -> _SOURCE_
<android.content.pm.PermissionGroupInfo: void <init>(android.content.pm.PermissionGroupInfo)> -> _NONE_
<java.lang.Character: boolean isUpperCase(char)> -> _NONE_
<java.lang.ClassLoader: void setPackageAssertionStatus(java.lang.String,boolean)> -> _NONE_
<java.io.FileDescriptor: void <clinit>()> -> _NONE_
<android.location.Location: void setLongitude(double)> -> _SINK_ 
<android.content.ClipData$Item: void <init>(java.lang.CharSequence,android.content.Intent,android.net.Uri)> -> _NONE_
<android.graphics.Bitmap: byte[] getNinePatchChunk()> -> _SOURCE_
<java.util.AbstractList: int hashCode()> -> _NONE_
<android.view.InputDevice$MotionRange: int getSource()> -> _SOURCE_
<android.view.View: boolean dispatchTouchEvent(android.view.MotionEvent)> -> _NONE_
<android.webkit.WebSettings: void setSansSerifFontFamily(java.lang.String)> -> _NONE_
<android.graphics.Matrix: void setSkew(float,float)> -> _SINK_ 
<java.net.DatagramPacket: void <init>(byte[],int,int,java.net.SocketAddress)> -> _NONE_
<android.widget.TextView: void setImeOptions(int)> -> _SINK_ 
<android.graphics.Region: void setEmpty()> -> _SINK_ 
<java.io.FileInputStream: void <init>(java.io.File)> -> _NONE_
<android.app.Dialog: boolean onOptionsItemSelected(android.view.MenuItem)> -> _NONE_
<java.lang.String: int lastIndexOf(java.lang.String)> -> _SINK_ 
<android.content.pm.PermissionInfo: java.lang.String toString()> -> _NONE_
<android.view.LayoutInflater: void setFilter(android.view.LayoutInflater$Filter)> -> _NONE_
<android.net.sip.SipAudioCall: void sendDtmf(int,android.os.Message)> -> _SINK_ 
<android.content.pm.InstrumentationInfo: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<android.content.BroadcastReceiver: void setResultData(java.lang.String)> -> _NONE_
<android.net.wifi.WifiManager: boolean setWifiEnabled(boolean)> -> _SINK_ 
<java.nio.channels.spi.AbstractSelector: boolean isOpen()> -> _NONE_
<android.view.View: int computeVerticalScrollRange()> -> _NONE_
<android.content.ContentValues: void put(java.lang.String,java.lang.Long)> -> _NONE_
<org.apache.http.util.CharArrayBuffer: void append(org.apache.http.util.CharArrayBuffer,int,int)> -> _NONE_
<java.lang.Float: boolean isInfinite(float)> -> _NONE_
<android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState[] values()> -> _NONE_
<android.content.ContentResolver: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)> -> _SOURCE_
<java.io.File: boolean setExecutable(boolean,boolean)> -> _SINK_ 
<android.widget.TextView: int getCompoundPaddingLeft()> -> _SOURCE_
<android.accounts.AuthenticatorDescription: void <init>(java.lang.String,java.lang.String,int,int,int,int,boolean)> -> _NONE_
<java.io.PrintWriter: void println(char[])> -> _NONE_
<android.animation.LayoutTransition: void enableTransitionType(int)> -> _NONE_
<android.content.ClipData: java.lang.String toString()> -> _NONE_
<android.view.accessibility.AccessibilityNodeInfo: int getWindowId()> -> _SOURCE_
<android.app.Service: void stopSelf(int)> -> _NONE_
<android.view.ViewGroup: boolean onInterceptTouchEvent(android.view.MotionEvent)> -> _NONE_
<android.graphics.Canvas: boolean quickReject(float,float,float,float,android.graphics.Canvas$EdgeType)> -> _NONE_
<android.text.style.ReplacementSpan: void <init>()> -> _NONE_
<android.database.sqlite.SQLiteDatabase: long getMaximumSize()> -> _SOURCE_
<android.widget.ListView: long[] getCheckItemIds()> -> _SOURCE_
<android.telephony.ServiceState: int getState()> -> _SOURCE_
<java.lang.ArrayStoreException: void <init>(java.lang.String)> -> _NONE_
<android.view.View: void setNextFocusRightId(int)> -> _SINK_ 
<android.view.KeyEvent: int getKeyCode()> -> _SOURCE_
<java.lang.reflect.AccessibleObject: void <init>()> -> _NONE_
<android.graphics.drawable.Drawable: boolean getPadding(android.graphics.Rect)> -> _SOURCE_
<java.nio.IntBuffer: int arrayOffset()> -> _NONE_
<android.content.res.TypedArray: java.lang.String toString()> -> _NONE_
<android.webkit.ConsoleMessage$MessageLevel: android.webkit.ConsoleMessage$MessageLevel valueOf(java.lang.String)> -> _NONE_
<java.io.PrintWriter: void print(java.lang.Object)> -> _NONE_
<android.webkit.WebChromeClient: void onShowCustomView(android.view.View,android.webkit.WebChromeClient$CustomViewCallback)> -> _NONE_
<android.telephony.CellIdentityCdma: int getSystemId()> -> _SOURCE_
<java.util.BitSet: void set(int,boolean)> -> _SINK_ 
<android.graphics.Region: void <init>()> -> _NONE_
<android.widget.AbsListView: boolean onRemoteAdapterConnected()> -> _NONE_
<android.view.animation.LayoutAnimationController: boolean isDone()> -> _NONE_
<java.nio.charset.CharsetEncoder: java.nio.ByteBuffer encode(java.nio.CharBuffer)> -> _SOURCE_
<android.bluetooth.BluetoothGattService: int getType()> -> _SOURCE_
<android.content.ComponentName: java.lang.String flattenToShortString()> -> _NONE_
<android.text.style.ImageSpan: java.lang.String getSource()> -> _SOURCE_
<android.app.Notification: void <init>(android.os.Parcel)> -> _NONE_
<android.view.KeyEvent: int getMaxKeyCode()> -> _SOURCE_
<android.webkit.WebSettings: boolean getAllowFileAccess()> -> _SOURCE_
<android.graphics.Matrix: boolean preScale(float,float,float,float)> -> _NONE_
<android.view.View: void setContentDescription(java.lang.CharSequence)> -> _SINK_ 
<java.io.Reader: void <init>(java.lang.Object)> -> _NONE_
<java.nio.channels.FileChannel: java.nio.channels.FileLock lock()> -> _NONE_
<android.net.sip.SipAudioCall: boolean isOnHold()> -> _NONE_
<android.view.KeyEvent: int keyCodeFromString(java.lang.String)> -> _SINK_ 
<android.view.View: android.os.IBinder getWindowToken()> -> _SOURCE_
<android.webkit.WebView: android.print.PrintDocumentAdapter createPrintDocumentAdapter()> -> _NONE_
<android.view.accessibility.AccessibilityRecord: void setMaxScrollX(int)> -> _SINK_ 
<android.content.res.Configuration: boolean equals(java.lang.Object)> -> _NONE_
<java.lang.StringBuffer: java.lang.String substring(int)> -> _NONE_
<android.view.View: void setSelected(boolean)> -> _SINK_ 
<android.webkit.WebView: void onDetachedFromWindow()> -> _NONE_
<java.net.ServerSocket: void implAccept(java.net.Socket)> -> _NONE_
<android.util.SparseArray: int keyAt(int)> -> _SINK_ 
<android.provider.Settings$Secure: boolean putInt(android.content.ContentResolver,java.lang.String,int)> android.permission.WRITE_SETTINGS -> _NONE_
<android.net.DhcpInfo: int describeContents()> -> _SINK_ 
<android.view.ViewGroupOverlay: void remove(android.view.View)> -> _NONE_
<android.bluetooth.BluetoothGatt: android.bluetooth.BluetoothDevice getDevice()> -> _SOURCE_
<android.graphics.Canvas$EdgeType: void <clinit>()> -> _NONE_
<android.content.ContextWrapper: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)> -> _SINK_ 
<java.security.ProtectionDomain: java.security.PermissionCollection getPermissions()> -> _SOURCE_
<android.widget.TextView: void setLinksClickable(boolean)> -> _SINK_ 
<android.print.PrintDocumentAdapter: void onStart()> -> _NONE_
<android.view.Window: void setGravity(int)> -> _NONE_
<android.hardware.Camera$Parameters: void setGpsTimestamp(long)> -> _SINK_ 
<android.graphics.Canvas: void drawArc(android.graphics.RectF,float,float,boolean,android.graphics.Paint)> -> _NONE_
<android.content.ContextWrapper: boolean deleteFile(java.lang.String)> -> _NONE_
<android.view.View: int getBottomPaddingOffset()> -> _SOURCE_
<android.net.http.SslCertificate: java.lang.String toString()> -> _NONE_
<android.nfc.NfcAdapter: void <init>()> -> _NONE_
<android.content.BroadcastReceiver: void setResultExtras(android.os.Bundle)> -> _NONE_
<android.content.ComponentName: java.lang.String toShortString()> -> _NONE_
<java.lang.ThreadGroup: void destroy()> -> _NONE_
<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)> -> _SOURCE_
<android.graphics.Point: void set(int,int)> -> _SINK_ 
<android.view.accessibility.AccessibilityEvent: int describeContents()> -> _SINK_ 
<android.accounts.AccountAuthenticatorActivity: void setAccountAuthenticatorResult(android.os.Bundle)> -> _SINK_ 
<android.text.style.URLSpan: int getSpanTypeId()> -> _SOURCE_
<android.view.View: android.content.res.Resources getResources()> -> _SOURCE_
<android.view.View: void drawableStateChanged()> -> _NONE_
<android.nfc.NfcAdapter: void enableReaderMode(android.app.Activity,android.nfc.NfcAdapter$ReaderCallback,int,android.os.Bundle)> -> _NONE_
<java.lang.Thread: void setPriority(int)> -> _SINK_ 
<android.widget.ExpandableListView: int getPackedPositionGroup(long)> -> _SOURCE_
<android.nfc.tech.NfcB: void connect()> -> _NONE_
<android.content.ContextWrapper: android.content.Context getApplicationContext()> -> _SOURCE_
<android.graphics.Paint: void setStrokeCap(android.graphics.Paint$Cap)> -> _SINK_ 
<android.app.Activity: android.view.Window getWindow()> -> _SOURCE_
<android.graphics.Matrix: void mapVectors(float[],int,float[],int,int)> -> _NONE_
<java.net.DatagramSocket: boolean isBound()> -> _NONE_
<android.app.PendingIntent: java.lang.String getCreatorPackage()> -> _SOURCE_
<java.lang.StackTraceElement: int getLineNumber()> -> _SOURCE_
<java.nio.LongBuffer: java.nio.LongBuffer get(long[])> -> _SOURCE_
<java.util.BitSet: void set(int,int,boolean)> -> _SINK_ 
<java.util.Locale: java.lang.String getISO3Language()> -> _SOURCE_
<android.graphics.Region: boolean quickContains(android.graphics.Rect)> -> _NONE_
<java.lang.ThreadGroup: boolean parentOf(java.lang.ThreadGroup)> -> _NONE_
<android.graphics.Matrix: boolean setPolyToPoly(float[],int,float[],int,int)> -> _SINK_ 
<java.lang.UnsupportedOperationException: void <init>(java.lang.String)> -> _NONE_
<android.animation.ValueAnimator: android.animation.TimeInterpolator getInterpolator()> -> _SOURCE_
<java.lang.StringBuilder: java.lang.StringBuilder insert(int,int)> -> _NONE_
<java.lang.AssertionError: void <init>(java.lang.Object)> -> _NONE_
<android.database.sqlite.SQLiteDatabase: void <init>()> -> _NONE_
<android.view.View: int getPaddingLeft()> -> _SOURCE_
<java.io.PrintStream: void close()> -> _NONE_
<android.content.Loader: java.lang.String dataToString(java.lang.Object)> -> _NONE_
<android.content.BroadcastReceiver$PendingResult: void setResultExtras(android.os.Bundle)> -> _SINK_ 
<android.widget.AbsListView: long pointToRowId(int,int)> -> _NONE_
<android.view.View: void onWindowSystemUiVisibilityChanged(int)> -> _NONE_
<java.lang.Float: short shortValue()> -> _NONE_
<android.view.View: boolean isLaidOut()> -> _NONE_
<android.graphics.Rect: void inset(int,int)> -> _NONE_
<android.bluetooth.BluetoothAdapter: java.lang.String getAddress()> -> _SOURCE_
<android.hardware.Camera$Parameters: java.util.List getSupportedColorEffects()> -> _SOURCE_
<java.util.BitSet: int nextSetBit(int)> -> _SINK_ 
<android.content.pm.ComponentInfo: int getIconResource()> -> _SOURCE_
<android.app.backup.BackupAgent: void onFullBackup(android.app.backup.FullBackupDataOutput)> -> _NONE_
<android.view.View: boolean isSaveEnabled()> -> _NONE_
<android.graphics.Bitmap: int getScaledHeight(int)> -> _SOURCE_
<java.net.Socket: boolean getTcpNoDelay()> -> _SOURCE_
<android.os.Handler: void <init>(android.os.Looper,android.os.Handler$Callback)> -> _NONE_
<java.security.spec.ECPoint: void <clinit>()> -> _NONE_
<android.os.Handler: boolean postAtTime(java.lang.Runnable,java.lang.Object,long)> -> _NONE_
<java.nio.Buffer: int limit()> -> _NONE_
<android.net.sip.SipManager: java.lang.String getOfferSessionDescription(android.content.Intent)> -> _SOURCE_
<android.text.style.ImageSpan: void <init>(android.content.Context,android.net.Uri,int)> -> _NONE_
<android.graphics.Paint: boolean getFillPath(android.graphics.Path,android.graphics.Path)> -> _SOURCE_
<java.lang.Byte: int compareTo(java.lang.Byte)> -> _SINK_ 
<android.content.ClipData: android.content.ClipData newUri(android.content.ContentResolver,java.lang.CharSequence,android.net.Uri)> -> _SOURCE_
<android.view.View: void setLayerType(int,android.graphics.Paint)> -> _SINK_ 
<java.util.UUID: int compareTo(java.util.UUID)> -> _SINK_ 
<android.text.style.ImageSpan: void <init>(android.graphics.Bitmap,int)> -> _NONE_
<android.content.res.TypedArray: float getFloat(int,float)> -> _SOURCE_
<android.content.Loader: boolean cancelLoad()> -> _NONE_
<android.view.View: android.os.IBinder getApplicationWindowToken()> -> _SOURCE_
<android.content.ContextWrapper: java.io.FileOutputStream openFileOutput(java.lang.String,int)> -> _NONE_
<java.io.File: void <init>(java.lang.String)> -> _NONE_
<android.widget.RemoteViews: void <init>(java.lang.String,int)> -> _NONE_
<android.widget.TextView: void setOnEditorActionListener(android.widget.TextView$OnEditorActionListener)> -> _SINK_ 
<android.net.sip.SipAudioCall$Listener: void onChanged(android.net.sip.SipAudioCall)> -> _NONE_
<android.os.Parcel: void readLongArray(long[])> -> _NONE_
<android.app.Activity: void onBackPressed()> -> _NONE_
<android.content.Intent: void setClipData(android.content.ClipData)> -> _SINK_ 
<android.content.Intent: android.content.Intent makeMainActivity(android.content.ComponentName)> -> _NONE_
<android.net.wifi.WifiConfiguration: int describeContents()> -> _SINK_ 
<android.content.IntentSender: java.lang.String toString()> -> _NONE_
<java.lang.ClassLoader: void setSigners(java.lang.Class,java.lang.Object[])> -> _NONE_
<android.content.ContentResolver: java.util.List getOutgoingPersistedUriPermissions()> -> _SOURCE_
<android.webkit.WebSettings: void setAllowContentAccess(boolean)> -> _NONE_
<android.view.accessibility.AccessibilityNodeInfo: void setBoundsInScreen(android.graphics.Rect)> -> _SINK_ 
<android.location.LocationManager: java.util.List getProviders(android.location.Criteria,boolean)> -> _SOURCE_
<android.net.sip.SipSession: android.net.sip.SipProfile getLocalProfile()> -> _SOURCE_
<android.graphics.Paint: void getTextPath(char[],int,int,float,float,android.graphics.Path)> -> _SOURCE_
<android.view.ContextThemeWrapper: java.lang.Object getSystemService(java.lang.String)> -> _SOURCE_
<android.content.ContextWrapper: int checkUriPermission(android.net.Uri,java.lang.String,java.lang.String,int,int,int)> -> _SINK_ 
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator rotationYBy(float)> -> _NONE_
<java.lang.String: boolean startsWith(java.lang.String,int)> -> _SINK_ 
<android.view.animation.Transformation: android.graphics.Matrix getMatrix()> -> _SOURCE_
<android.os.Messenger: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<android.widget.TextView: void setTextKeepState(java.lang.CharSequence)> -> _SINK_ 
<android.app.Activity: boolean onTouchEvent(android.view.MotionEvent)> -> _NONE_
<android.content.IntentFilter: java.lang.String getDataType(int)> -> _SOURCE_
<android.graphics.Canvas: void drawBitmapMesh(android.graphics.Bitmap,int,int,float[],int,int[],int,android.graphics.Paint)> -> _NONE_
<java.lang.Class: java.lang.String toString()> -> _NONE_
<android.app.PendingIntent: void writePendingIntentOrNullToParcel(android.app.PendingIntent,android.os.Parcel)> -> _NONE_
<android.content.Intent: boolean hasCategory(java.lang.String)> -> _NONE_
<java.nio.LongBuffer: int compareTo(java.lang.Object)> -> _NONE_
<android.app.Activity: void addContentView(android.view.View,android.view.ViewGroup$LayoutParams)> -> _NONE_
<android.view.MotionEvent$PointerCoords: float getAxisValue(int)> -> _SOURCE_
<android.view.animation.Animation: boolean hasStarted()> -> _NONE_
<android.view.accessibility.AccessibilityNodeInfo$RangeInfo: float getMin()> -> _SOURCE_
<android.os.Handler: boolean post(java.lang.Runnable)> -> _NONE_
<android.widget.Scroller: void setFinalY(int)> -> _SINK_ 
<android.content.ContentProvider: java.lang.String getCallingPackage()> -> _SOURCE_
<java.io.Writer: void write(java.lang.String)> -> _NONE_
<java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)> -> _NONE_
<android.widget.TextView: void findViewsWithText(java.util.ArrayList,java.lang.CharSequence,int)> -> _NONE_
<android.content.ContentProviderClient: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)> -> _NONE_
<android.content.pm.ServiceInfo: void <init>(android.content.pm.ServiceInfo)> -> _NONE_
<android.app.FragmentTransaction: void <init>()> -> _NONE_
<android.widget.AbsListView: android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo)> -> _NONE_
<android.view.View: void onScrollChanged(int,int,int,int)> -> _NONE_
<android.os.Parcel: long readLong()> -> _NONE_
<android.widget.AbsListView: void requestLayout()> -> _NONE_
<android.view.ViewTreeObserver: void removeGlobalOnLayoutListener(android.view.ViewTreeObserver$OnGlobalLayoutListener)> -> _NONE_
<java.lang.Character: int codePointCount(char[],int,int)> -> _SINK_ 
<java.nio.ShortBuffer: boolean equals(java.lang.Object)> -> _NONE_
<java.nio.charset.CoderResult: int length()> -> _SINK_ 
<android.content.Intent: android.content.Intent replaceExtras(android.os.Bundle)> -> _NONE_
<android.os.Parcel: java.lang.String[] createStringArray()> -> _NONE_
<java.net.URL: java.net.URLConnection openConnection()> android.permission.INTERNET -> _SINK_ 
<android.view.KeyEvent: boolean metaStateHasModifiers(int,int)> -> _NONE_
<android.nfc.tech.IsoDep: void close()> android.permission.NFC -> _NONE_
<android.graphics.Canvas: void drawText(java.lang.String,int,int,float,float,android.graphics.Paint)> -> _NONE_
<android.widget.AbsListView: void setTranscriptMode(int)> -> _NONE_
<android.graphics.Path: void addRect(android.graphics.RectF,android.graphics.Path$Direction)> -> _NONE_
<android.widget.Scroller: float getCurrVelocity()> -> _SOURCE_
<android.view.animation.LayoutAnimationController: long getDelayForView(android.view.View)> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: boolean isContentInvalid()> -> _NONE_
<android.widget.AbsListView: void onSizeChanged(int,int,int,int)> -> _NONE_
<android.widget.TextView: int getTotalPaddingLeft()> -> _SOURCE_
<android.view.View: void onConfigurationChanged(android.content.res.Configuration)> -> _NONE_
<android.telephony.CellSignalStrengthCdma: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<java.util.BitSet: java.util.BitSet valueOf(java.nio.LongBuffer)> -> _NONE_
<android.animation.ValueAnimator: void removeAllUpdateListeners()> -> _NONE_
<java.lang.Character: int toCodePoint(char,char)> -> _SINK_ 
<android.hardware.Camera$Parameters: java.util.List getSupportedJpegThumbnailSizes()> -> _SOURCE_
<android.telephony.ServiceState: java.lang.String getOperatorAlphaShort()> -> _SOURCE_
<android.os.storage.StorageManager: void <init>()> -> _NONE_
<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)> -> _SINK_ 
<android.graphics.Point: void <init>(android.graphics.Point)> -> _NONE_
<android.telephony.TelephonyManager: java.lang.String getNetworkOperator()> -> _SOURCE_
<android.animation.PropertyValuesHolder: void setIntValues(int[])> -> _SINK_ 
<android.database.sqlite.SQLiteDatabase: java.lang.String getPath()> -> _SOURCE_
<android.content.ContentProviderClient: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> -> _SOURCE_
<android.view.KeyEvent: char getMatch(char[],int)> -> _SOURCE_
<android.net.sip.SipProfile: void <clinit>()> -> _NONE_
<android.app.Fragment: android.view.View getView()> -> _SOURCE_
<java.net.ServerSocket: java.nio.channels.ServerSocketChannel getChannel()> -> _SOURCE_
<java.nio.FloatBuffer: int hashCode()> -> _NONE_
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromResourceStream(android.content.res.Resources,android.util.TypedValue,java.io.InputStream,java.lang.String)> -> _NONE_
<android.content.pm.ComponentInfo: void <init>(android.os.Parcel)> -> _NONE_
<java.lang.reflect.Method: int getModifiers()> -> _SOURCE_
<android.content.Intent: android.content.ClipData getClipData()> -> _SOURCE_
<java.security.spec.EllipticCurve: java.math.BigInteger getA()> -> _SOURCE_
<java.net.URL: java.lang.String toExternalForm()> -> _NONE_
<android.app.Activity: void onPostResume()> -> _NONE_
<java.util.HashMap: java.util.Collection values()> -> _NONE_
<android.view.InputDevice$MotionRange: float getMin()> -> _SOURCE_
<android.os.Bundle: java.lang.CharSequence getCharSequence(java.lang.String,java.lang.CharSequence)> -> _SOURCE_
<java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File)> -> _SINK_ 
<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofObject(java.lang.String,android.animation.TypeEvaluator,java.lang.Object[])> -> _NONE_
<android.widget.AbsListView: void invalidateViews()> -> _NONE_
<android.app.Activity: void stopManagingCursor(android.database.Cursor)> -> _NONE_
<android.app.Dialog: android.view.View onCreatePanelView(int)> -> _NONE_
<java.security.spec.ECParameterSpec: java.math.BigInteger getOrder()> -> _SOURCE_
<android.os.Bundle: void putLong(java.lang.String,long)> -> _NONE_
<android.webkit.WebSettings: void setSupportZoom(boolean)> -> _NONE_
<android.os.Bundle: java.lang.String[] getStringArray(java.lang.String)> -> _SOURCE_
<java.io.File: java.io.File getAbsoluteFile()> -> _SOURCE_
<android.bluetooth.BluetoothHeadset: int getConnectionState(android.bluetooth.BluetoothDevice)> android.permission.BLUETOOTH -> _SOURCE_
<android.util.TypedValue: java.lang.CharSequence coerceToString()> -> _NONE_
<android.view.accessibility.AccessibilityNodeInfo: int describeContents()> -> _SINK_ 
<android.animation.LayoutTransition: void setInterpolator(int,android.animation.TimeInterpolator)> -> _SINK_ 
<java.io.File: java.io.File[] listRoots()> -> _NONE_
<java.lang.reflect.Method: java.lang.Class[] getExceptionTypes()> -> _SOURCE_
<android.view.View: void onHoverChanged(boolean)> -> _NONE_
<android.os.Bundle: short getShort(java.lang.String)> -> _SOURCE_
<android.net.Uri$Builder: android.net.Uri build()> -> _NONE_
<android.app.Activity: android.app.Dialog onCreateDialog(int,android.os.Bundle)> -> _NONE_
<android.content.res.TypedArray: int getColor(int,int)> -> _SOURCE_
<android.content.res.TypedArray: java.lang.CharSequence[] getTextArray(int)> -> _SOURCE_
<android.app.Activity: android.content.ComponentName getComponentName()> -> _SOURCE_
<java.util.Random: void nextBytes(byte[])> -> _NONE_
<android.graphics.Paint: boolean isFakeBoldText()> -> _NONE_
<java.lang.AbstractStringBuilder: int offsetByCodePoints(int,int)> -> _NONE_
<android.os.Parcel: void writeFileDescriptor(java.io.FileDescriptor)> -> _SINK_ 
<android.bluetooth.BluetoothClass: int getDeviceClass()> -> _SOURCE_
<java.security.spec.EllipticCurve: java.math.BigInteger getB()> -> _SOURCE_
<android.graphics.Rect: boolean equals(java.lang.Object)> -> _NONE_
<android.view.KeyCharacterMap: android.view.KeyCharacterMap load(int)> -> _NONE_
<java.net.Socket: int getSendBufferSize()> -> _SOURCE_
<android.os.Bundle: byte[] getByteArray(java.lang.String)> -> _SOURCE_
<java.net.ServerSocket: void setSoTimeout(int)> -> _SINK_ 
<android.view.ViewGroup: void dispatchSetActivated(boolean)> -> _NONE_
<android.content.Intent: android.content.Intent setType(java.lang.String)> -> _SINK_ 
<android.app.Activity: void unregisterForContextMenu(android.view.View)> -> _NONE_
<java.lang.IllegalAccessException: void <init>(java.lang.String)> -> _NONE_
<android.widget.TextView: int getMaxWidth()> -> _SOURCE_
<java.util.Random: void setSeed(long)> -> _SINK_ 
<android.view.View: void postInvalidateOnAnimation()> -> _NONE_
<java.io.PrintWriter: java.io.PrintWriter format(java.lang.String,java.lang.Object[])> -> _NONE_
<android.provider.Settings$System: java.lang.String getString(android.content.ContentResolver,java.lang.String)> -> _SOURCE_
<android.hardware.Camera: void stopPreview()> -> _NONE_
<android.widget.TextView: android.text.method.MovementMethod getMovementMethod()> -> _SOURCE_
<android.os.Handler: boolean sendMessageAtFrontOfQueue(android.os.Message)> -> _SINK_ 
<android.widget.ExpandableListView: void setAdapter(android.widget.ListAdapter)> -> _SINK_ 
<java.lang.reflect.Field: void setChar(java.lang.Object,char)> -> _SINK_ 
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener,android.os.Looper)> -> _NONE_
<java.lang.Long: long parseLong(java.lang.String,int)> -> _SINK_ 
<android.app.Dialog: void setOnShowListener(android.content.DialogInterface$OnShowListener)> -> _SINK_ 
<java.io.FileInputStream: void close()> -> _NONE_
<android.bluetooth.BluetoothSocket: void close()> -> _NONE_
<android.graphics.Matrix$ScaleToFit: void <clinit>()> -> _NONE_
<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)> -> _SINK_ 
<android.content.BroadcastReceiver: boolean isInitialStickyBroadcast()> -> _NONE_
<android.graphics.Path: void set(android.graphics.Path)> -> _SINK_ 
<android.nfc.NfcAdapter: void setBeamPushUris(android.net.Uri[],android.app.Activity)> -> _SINK_ 
<android.text.style.URLSpan: void onClick(android.view.View)> -> _NONE_
<android.view.WindowId: void unregisterFocusObserver(android.view.WindowId$FocusObserver)> -> _NONE_
<android.webkit.WebView: void setCertificate(android.net.http.SslCertificate)> -> _SINK_ 
<android.accounts.AuthenticatorException: void <init>(java.lang.String)> -> _NONE_
<android.os.Parcel: android.os.Parcelable[] readParcelableArray(java.lang.ClassLoader)> -> _NONE_
<android.widget.ExpandableListView: void setAdapter(android.widget.ExpandableListAdapter)> -> _SINK_ 
<android.view.Window: boolean hasChildren()> -> _NONE_
<android.view.MotionEvent: void getHistoricalPointerCoords(int,int,android.view.MotionEvent$PointerCoords)> -> _SOURCE_
<java.net.Socket: void <init>(java.net.Proxy)> -> _NONE_
<java.io.PrintWriter: void print(char[])> -> _NONE_
<android.widget.TextView: void endBatchEdit()> -> _NONE_
<java.lang.reflect.Constructor: java.lang.String getName()> -> _SOURCE_
<android.app.Activity: boolean onSearchRequested()> -> _NONE_
<android.telephony.SmsManager: java.util.ArrayList divideMessage(java.lang.String)> -> _SOURCE_
<android.view.View: void clearFocus()> -> _NONE_
<java.util.BitSet: void clear(int,int)> -> _NONE_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SOURCE_
<android.graphics.Matrix: void setScale(float,float,float,float)> -> _SINK_ 
<android.content.Intent: android.content.Intent putExtra(java.lang.String,byte)> -> _NONE_
<java.lang.Thread: void join(long)> -> _NONE_
<android.content.pm.ActivityInfo: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<android.view.Surface: void unlockCanvas(android.graphics.Canvas)> -> _NONE_
<java.lang.NullPointerException: void <init>()> -> _NONE_
<android.accessibilityservice.AccessibilityServiceInfo: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<android.bluetooth.BluetoothHeadset: boolean stopVoiceRecognition(android.bluetooth.BluetoothDevice)> -> _NONE_
<android.graphics.Path: boolean isInverseFillType()> -> _NONE_
<android.view.View: boolean onKeyDown(int,android.view.KeyEvent)> -> _NONE_
<android.accounts.AuthenticatorException: void <init>(java.lang.String,java.lang.Throwable)> -> _NONE_
<android.widget.TextView: void onRestoreInstanceState(android.os.Parcelable)> -> _NONE_
<android.graphics.Bitmap: void setDensity(int)> -> _SINK_ 
<java.util.AbstractMap: boolean containsValue(java.lang.Object)> -> _NONE_
<android.os.MessageQueue: void <init>()> -> _NONE_
<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothGatt connectGatt(android.content.Context,boolean,android.bluetooth.BluetoothGattCallback)> -> _NONE_
<android.content.res.Resources: android.graphics.Movie getMovie(int)> -> _SOURCE_
<android.graphics.Point: java.lang.String toString()> -> _NONE_
<android.telephony.PhoneNumberFormattingTextWatcher: void afterTextChanged(android.text.Editable)> -> _NONE_
<android.os.Bundle: java.lang.CharSequence[] getCharSequenceArray(java.lang.String)> -> _SOURCE_
<android.content.IntentSender: java.lang.String getCreatorPackage()> -> _SOURCE_
<android.provider.Browser: android.database.Cursor getAllBookmarks(android.content.ContentResolver)> -> _SOURCE_
<java.lang.AbstractStringBuilder: void setLength(int)> -> _NONE_
<java.lang.NullPointerException: void <init>(java.lang.String)> -> _NONE_
<android.os.Bundle: java.lang.Byte getByte(java.lang.String,byte)> -> _SOURCE_
<android.widget.AbsListView: int computeVerticalScrollExtent()> -> _NONE_
<android.content.IntentSender: void writeIntentSenderOrNullToParcel(android.content.IntentSender,android.os.Parcel)> -> _SINK_ 
<android.webkit.WebSettings: boolean enableSmoothTransition()> -> _NONE_
<android.view.animation.Transformation: void <init>()> -> _NONE_
<android.util.Log: int e(java.lang.String,java.lang.String)> -> _SINK_ 
<android.content.ClipData: android.content.ClipData newRawUri(java.lang.CharSequence,android.net.Uri)> -> _NONE_
<android.view.animation.Animation: long computeDurationHint()> -> _NONE_
<android.util.TypedValue: float applyDimension(int,float,android.util.DisplayMetrics)> -> _NONE_
<android.view.View: android.view.ViewOverlay getOverlay()> -> _SOURCE_
<android.content.BroadcastReceiver$PendingResult: void abortBroadcast()> -> _NONE_
<android.view.MotionEvent: float getSize(int)> -> _SOURCE_
<java.lang.reflect.Constructor: boolean isAnnotationPresent(java.lang.Class)> -> _NONE_
<org.apache.http.message.ParserCursor: int getLowerBound()> -> _SOURCE_
<android.app.Activity: void startIntentSenderFromChild(android.app.Activity,android.content.IntentSender,int,android.content.Intent,int,int,int)> -> _SINK_ 
<android.content.IntentSender: java.lang.String getTargetPackage()> -> _SOURCE_
<android.view.View: void setScrollBarFadeDuration(int)> -> _SINK_ 
<android.view.Window: boolean hasFeature(int)> -> _NONE_
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)> -> _NONE_
<android.view.ViewGroup: void <init>(android.content.Context,android.util.AttributeSet,int)> -> _NONE_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,float[])> -> _NONE_
<java.nio.Buffer: java.lang.String toString()> -> _NONE_
<android.media.MediaPlayer$TrackInfo: android.media.MediaFormat getFormat()> -> _SOURCE_
<android.content.Intent: char[] getCharArrayExtra(java.lang.String)> -> _SOURCE_
<android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityEvent obtain(android.view.accessibility.AccessibilityEvent)> -> _SINK_ 
<java.lang.ArithmeticException: void <init>()> -> _NONE_
<org.apache.http.util.CharArrayBuffer: java.lang.String substring(int,int)> -> _NONE_
<android.graphics.Matrix: void setSinCos(float,float)> -> _SINK_ 
<android.app.Activity: boolean isFinishing()> -> _NONE_
<android.webkit.JsPromptResult: void <init>()> -> _NONE_
<java.lang.StringBuilder: java.lang.StringBuilder append(char[])> -> _NONE_
<android.content.ClipData$Item: android.net.Uri getUri()> -> _SOURCE_
<android.widget.TextView: int getMaxEms()> -> _SOURCE_
<android.view.accessibility.AccessibilityRecord: android.view.accessibility.AccessibilityNodeInfo getSource()> -> _SOURCE_
<android.bluetooth.BluetoothHeadset: boolean sendVendorSpecificResultCode(android.bluetooth.BluetoothDevice,java.lang.String,java.lang.String)> -> _SINK_ 
<android.content.res.Resources: android.content.res.AssetFileDescriptor openRawResourceFd(int)> -> _NONE_
<java.lang.String: int indexOf(java.lang.String)> -> _SINK_ 
<android.widget.ListView: android.view.View findViewWithTagTraversal(java.lang.Object)> -> _NONE_
<android.media.MediaPlayer: void setOnBufferingUpdateListener(android.media.MediaPlayer$OnBufferingUpdateListener)> -> _SINK_ 
<android.app.Dialog: void setContentView(android.view.View)> -> _SINK_ 
<android.widget.TextView: void setTextIsSelectable(boolean)> -> _SINK_ 
<android.os.Debug$MemoryInfo: void <init>()> -> _NONE_
<java.nio.LongBuffer: boolean hasArray()> -> _NONE_
<android.widget.AbsoluteLayout: void onMeasure(int,int)> -> _NONE_
<android.os.Parcel: void writeParcelableArray(android.os.Parcelable[],int)> -> _NONE_
<java.io.File: boolean mkdirs()> -> _NONE_
<android.app.ActionBar: void setHomeAsUpIndicator(int)> -> _NONE_
<android.animation.LayoutTransition: long getDuration(int)> -> _SOURCE_
<android.print.PrintAttributes$Margins: int getTopMils()> -> _SOURCE_
<android.view.View: void dispatchRestoreInstanceState(android.util.SparseArray)> -> _NONE_
<java.lang.Float: double doubleValue()> -> _NONE_
<android.content.res.Configuration: void <init>(android.content.res.Configuration)> -> _NONE_
<android.app.Dialog: void takeKeyEvents(boolean)> -> _NONE_
<java.nio.charset.CoderResult: java.nio.charset.CoderResult malformedForLength(int)> -> _NONE_
<android.graphics.Canvas: boolean clipRegion(android.graphics.Region,android.graphics.Region$Op)> -> _NONE_
<android.graphics.Path: android.graphics.Path$FillType getFillType()> -> _SOURCE_
<android.view.accessibility.AccessibilityRecord: void setParcelableData(android.os.Parcelable)> -> _SINK_ 
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)> -> _NONE_
<android.content.OperationApplicationException: void <init>(java.lang.String,java.lang.Throwable)> -> _NONE_
<org.apache.http.util.CharArrayBuffer: void append(byte[],int,int)> -> _NONE_
<java.io.PrintWriter: void <init>(java.io.OutputStream)> -> _NONE_
<android.webkit.WebSettings: android.webkit.WebSettings$TextSize getTextSize()> -> _SOURCE_
<java.net.Socket: void <init>(java.lang.String,int,java.net.InetAddress,int)> -> _NONE_
<java.io.PrintWriter: void <init>(java.lang.String)> -> _NONE_
<java.lang.Character: boolean isJavaIdentifierPart(int)> -> _NONE_
<android.content.pm.PackageItemInfo: void <init>()> -> _NONE_
<java.lang.Double: boolean isInfinite(double)> -> _NONE_
<android.webkit.WebSettings: boolean getUseWideViewPort()> -> _SOURCE_
<android.widget.RemoteViews: void setUri(int,java.lang.String,android.net.Uri)> -> _SINK_ 
<java.nio.FloatBuffer: int arrayOffset()> -> _NONE_
<android.view.View: boolean isShown()> -> _NONE_
<android.net.sip.SipProfile: boolean getSendKeepAlive()> -> _SOURCE_
<android.view.View: void offsetLeftAndRight(int)> -> _NONE_
<android.content.res.AssetFileDescriptor: android.os.ParcelFileDescriptor getParcelFileDescriptor()> -> _SOURCE_
<android.animation.ValueAnimator: android.animation.ValueAnimator ofFloat(float[])> -> _NONE_
<android.nfc.tech.NfcB: byte[] transceive(byte[])> -> _NONE_
<android.graphics.Typeface: boolean equals(java.lang.Object)> -> _NONE_
<android.bluetooth.BluetoothClass: boolean hasService(int)> -> _NONE_
<android.graphics.Paint: android.graphics.Paint$Join getStrokeJoin()> -> _SOURCE_
<java.lang.UnknownError: void <init>()> -> _NONE_
<android.widget.AbsListView: void onTextChanged(java.lang.CharSequence,int,int,int)> -> _NONE_
<android.view.ContextThemeWrapper: android.content.res.Resources$Theme getTheme()> -> _SOURCE_
<android.print.PageRange: int getStart()> -> _SOURCE_
<android.content.ContentProviderOperation: android.content.ContentProviderOperation$Builder newAssertQuery(android.net.Uri)> -> _SOURCE_
<java.io.PrintStream: void println(java.lang.Object)> -> _NONE_
<android.os.Bundle: java.lang.String getString(java.lang.String,java.lang.String)> -> _SOURCE_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable[])> -> _NONE_
<android.app.Dialog: boolean onTrackballEvent(android.view.MotionEvent)> -> _NONE_
<java.lang.StackTraceElement: int hashCode()> -> _SINK_ 
<android.database.sqlite.SQLiteProgram: void bindLong(int,long)> -> _NONE_
<android.widget.TextView: int getPaintFlags()> -> _SOURCE_
<android.database.SQLException: void <init>(java.lang.String,java.lang.Throwable)> -> _NONE_
<android.print.PrintAttributes: android.print.PrintAttributes$Margins getMinMargins()> -> _SOURCE_
<android.widget.RemoteViews: void setLabelFor(int,int)> -> _SINK_ 
<android.media.TimedText: void <init>()> -> _NONE_
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromStream(java.io.InputStream,java.lang.String)> -> _NONE_
<android.view.ViewGroup: boolean dispatchKeyEvent(android.view.KeyEvent)> -> _NONE_
<android.location.LocationManager: boolean addGpsStatusListener(android.location.GpsStatus$Listener)> -> _NONE_
<android.app.Activity: java.lang.Object onRetainNonConfigurationInstance()> -> _NONE_
<android.nfc.NdefMessage: int getByteArrayLength()> -> _SOURCE_
<android.accounts.AccountManager: void invalidateAuthToken(java.lang.String,java.lang.String)> -> _NONE_
<android.graphics.Matrix: void mapPoints(float[],int,float[],int,int)> -> _NONE_
<java.lang.String: int indexOf(int,int)> -> _SINK_ 
<java.security.cert.Certificate: java.lang.Object writeReplace()> -> _NONE_
<android.telephony.CellInfoCdma: void <init>()> -> _NONE_
<android.view.View: void addFocusables(java.util.ArrayList,int)> -> _NONE_
<android.view.WindowManager$LayoutParams: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<android.accounts.AuthenticatorException: void <init>()> -> _NONE_
<android.print.PrintAttributes$MediaSize: int getWidthMils()> -> _SOURCE_
<java.lang.Character: boolean isSurrogatePair(char,char)> -> _NONE_
<android.content.ContentResolver: void setMasterSyncAutomatically(boolean)> -> _NONE_
<android.app.Activity: void startSearch(java.lang.String,boolean,android.os.Bundle,boolean)> android.permission.GLOBAL_SEARCH -> _SINK_ 
<java.lang.Object: boolean equals(java.lang.Object)> -> _NONE_
<android.net.http.SslCertificate$DName: java.lang.String getCName()> -> _SOURCE_
<android.app.Activity: void startActivityFromFragment(android.app.Fragment,android.content.Intent,int,android.os.Bundle)> -> _SINK_ 
<android.os.Handler: boolean sendMessageAtTime(android.os.Message,long)> -> _SINK_ 
<android.app.Fragment: void onDestroy()> -> _NONE_
<android.graphics.Paint$FontMetricsInt: java.lang.String toString()> -> _NONE_
<java.util.AbstractList: void clear()> -> _NONE_
<android.view.Window: void setWindowAnimations(int)> -> _NONE_
<android.content.Loader: java.lang.String toString()> -> _NONE_
<android.view.inputmethod.CompletionInfo: java.lang.String toString()> -> _NONE_
<android.content.ContextWrapper: boolean startInstrumentation(android.content.ComponentName,java.lang.String,android.os.Bundle)> -> _SINK_ 
<android.app.ActionBar: void setHomeActionContentDescription(java.lang.CharSequence)> -> _NONE_
<android.view.animation.Animation: int getZAdjustment()> -> _SOURCE_
<java.nio.CharBuffer: int read(java.nio.CharBuffer)> -> _NONE_
<android.app.Activity: boolean startActivityIfNeeded(android.content.Intent,int,android.os.Bundle)> -> _SINK_ 
<android.animation.LayoutTransition: long getStagger(int)> -> _SOURCE_
<java.lang.StringBuilder: java.lang.StringBuilder reverse()> -> _NONE_
<android.net.http.SslError: void <init>(int,java.security.cert.X509Certificate,java.lang.String)> -> _NONE_
<java.net.Socket: java.io.OutputStream getOutputStream()> -> _SOURCE_
<android.view.View: boolean onSetAlpha(int)> -> _NONE_
<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()> -> _SOURCE_
<android.view.animation.Transformation: void clear()> -> _NONE_
<java.lang.reflect.Constructor: java.lang.annotation.Annotation[] getDeclaredAnnotations()> -> _SOURCE_
<android.view.View: void setAccessibilityDelegate(android.view.View$AccessibilityDelegate)> -> _SINK_ 
<android.view.ViewGroup: boolean dispatchDragEvent(android.view.DragEvent)> -> _NONE_
<java.lang.StringBuffer: void <init>(java.lang.String)> -> _NONE_
<android.nfc.NfcAdapter: void enableForegroundDispatch(android.app.Activity,android.app.PendingIntent,android.content.IntentFilter[],java.lang.String[][])> -> _SINK_ 
<android.widget.TextView: void <init>(android.content.Context,android.util.AttributeSet,int)> -> _NONE_
<android.view.View: boolean callOnClick()> -> _NONE_
<android.webkit.WebView: float getScale()> -> _SOURCE_
<android.content.SyncAdapterType: boolean equals(java.lang.Object)> -> _NONE_
<java.lang.reflect.Constructor: int hashCode()> -> _SINK_ 
<android.webkit.WebHistoryItem: android.webkit.WebHistoryItem clone()> -> _NONE_
<android.content.res.Resources: int getInteger(int)> -> _SOURCE_
<android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt valueOf(java.lang.String)> -> _SINK_ 
<org.apache.http.util.ByteArrayBuffer: int capacity()> -> _SINK_ 
<java.io.PrintWriter: void write(java.lang.String)> -> _NONE_
<android.os.Looper: void setMessageLogging(android.util.Printer)> -> _SINK_ 
<android.webkit.WebView: int computeHorizontalScrollRange()> -> _NONE_
<android.graphics.Path: void offset(float,float)> -> _NONE_
<android.content.ComponentName: void writeToParcel(android.content.ComponentName,android.os.Parcel)> -> _NONE_
<android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_ 
<android.content.Loader: void rollbackContentChanged()> -> _NONE_
<org.apache.http.ProtocolVersion: void <init>(java.lang.String,int,int)> -> _NONE_
<java.lang.Double: boolean isNaN()> -> _NONE_
<android.view.accessibility.AccessibilityRecord: void setRemovedCount(int)> -> _SINK_ 
<android.location.Location: java.lang.String toString()> -> _NONE_
<android.view.View: boolean isVerticalFadingEdgeEnabled()> -> _NONE_
<java.lang.StringBuilder: int offsetByCodePoints(int,int)> -> _SINK_ 
<android.content.ContentResolver: java.util.List getCurrentSyncs()> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: void setForeignKeyConstraintsEnabled(boolean)> -> _SINK_ 
<android.nfc.tech.NfcB: int getMaxTransceiveLength()> -> _SOURCE_
<android.content.ClipData: int describeContents()> -> _SINK_ 
<java.lang.Character: int offsetByCodePoints(char[],int,int,int,int)> -> _SINK_ 
<android.widget.AbsListView: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> -> _NONE_
<java.io.File: long getTotalSpace()> -> _SOURCE_
<android.widget.ExpandableListView: void setOnGroupClickListener(android.widget.ExpandableListView$OnGroupClickListener)> -> _SINK_ 
<android.nfc.NdefRecord: void <clinit>()> -> _NONE_
<android.database.sqlite.SQLiteDatabase: long getPageSize()> -> _SOURCE_
<java.lang.Integer: int rotateRight(int,int)> -> _SINK_ 
<android.os.PowerManager$WakeLock: void setReferenceCounted(boolean)> -> _SINK_ 
<android.widget.ExpandableListView: void setOnGroupExpandListener(android.widget.ExpandableListView$OnGroupExpandListener)> -> _SINK_ 
<java.lang.Long: long reverseBytes(long)> -> _SINK_ 
<android.media.MediaFormat: android.media.MediaFormat createVideoFormat(java.lang.String,int,int)> -> _SINK_ 
<android.print.PrintAttributes$MediaSize: java.lang.String toString()> -> _NONE_
<android.widget.AbsListView: android.util.SparseBooleanArray getCheckedItemPositions()> -> _SOURCE_
<android.content.res.AssetFileDescriptor: void <init>(android.os.ParcelFileDescriptor,long,long,android.os.Bundle)> -> _NONE_
<android.content.pm.ApplicationInfo: int describeContents()> -> _SINK_ 
<java.math.BigInteger: boolean equals(java.lang.Object)> -> _NONE_
<android.content.ContextWrapper: android.content.ComponentName startService(android.content.Intent)> -> _SINK_ 
<android.view.accessibility.AccessibilityRecord: void setSource(android.view.View,int)> -> _SINK_ 
<android.content.ComponentName: java.lang.String getShortClassName()> -> _SOURCE_
<java.net.NetworkInterface: java.util.Enumeration getNetworkInterfaces()> -> _SOURCE_
<android.graphics.drawable.Drawable: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)> -> _NONE_
<java.lang.StringBuffer: java.lang.StringBuffer append(float)> -> _NONE_
<java.security.NoSuchAlgorithmException: void <init>(java.lang.Throwable)> -> _NONE_
<android.content.ComponentName: java.lang.String toString()> -> _NONE_
<android.graphics.Bitmap: boolean compress(android.graphics.Bitmap$CompressFormat,int,java.io.OutputStream)> -> _SINK_ 
<java.net.URI: boolean isOpaque()> -> _NONE_
<android.animation.Animator: android.animation.Animator clone()> -> _NONE_
<java.lang.AbstractStringBuilder: void <init>()> -> _NONE_
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getChild(int)> -> _SOURCE_
<android.view.View: int getNextFocusForwardId()> -> _SOURCE_
<java.util.concurrent.TimeUnit: void sleep(long)> -> _NONE_
<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)> -> _NONE_
<java.math.BigInteger: long longValue()> -> _NONE_
<java.lang.String: void <clinit>()> -> _NONE_
<android.net.wifi.WifiEnterpriseConfig: void setPassword(java.lang.String)> -> _SINK_ 
<android.graphics.Paint: void getTextBounds(java.lang.String,int,int,android.graphics.Rect)> -> _SOURCE_
<android.widget.RemoteViews: void <clinit>()> -> _NONE_
<android.view.View: void postInvalidate()> -> _NONE_
<android.os.PatternMatcher: java.lang.String toString()> -> _NONE_
<android.view.WindowManager$LayoutParams: int describeContents()> -> _SINK_ 
<javax.security.auth.x500.X500Principal: byte[] getEncoded()> -> _SOURCE_
<android.widget.TextView: boolean onGenericMotionEvent(android.view.MotionEvent)> -> _NONE_
<android.content.ContentProvider: android.os.ParcelFileDescriptor openPipeHelper(android.net.Uri,java.lang.String,android.os.Bundle,java.lang.Object,android.content.ContentProvider$PipeDataWriter)> -> _NONE_
<android.view.accessibility.AccessibilityRecord: void setPassword(boolean)> -> _SINK_ 
<java.lang.Short: double doubleValue()> -> _NONE_
<java.lang.Boolean: boolean equals(java.lang.Object)> -> _NONE_
<android.webkit.WebView: boolean pageUp(boolean)> -> _NONE_
<android.accounts.Account: int hashCode()> -> _SINK_ 
<android.content.ContentProvider: android.os.Bundle call(java.lang.String,java.lang.String,android.os.Bundle)> -> _NONE_
<android.view.ViewTreeObserver: void <init>()> -> _NONE_
<android.graphics.Paint: void reset()> -> _NONE_
<android.os.Looper: java.lang.Thread getThread()> -> _SOURCE_
<android.app.PendingIntent: int hashCode()> -> _SINK_ 
<android.app.Activity: android.app.PendingIntent createPendingResult(int,android.content.Intent,int)> -> _SINK_ 
<android.view.KeyCharacterMap: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<java.lang.UnsupportedOperationException: void <init>(java.lang.String,java.lang.Throwable)> -> _NONE_
<android.content.pm.ResolveInfo: void <init>(android.content.pm.ResolveInfo)> -> _NONE_
<java.net.Socket: int getSoTimeout()> -> _SOURCE_
<android.graphics.Matrix$ScaleToFit: android.graphics.Matrix$ScaleToFit valueOf(java.lang.String)> -> _SINK_ 
<android.hardware.Camera$Parameters: int getJpegThumbnailQuality()> -> _SOURCE_
<android.app.Notification$Action: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<android.graphics.Paint: boolean isUnderlineText()> -> _NONE_
<android.hardware.Camera: void startFaceDetection()> -> _NONE_
<android.telephony.TelephonyManager: java.lang.String getMmsUAProfUrl()> -> _SOURCE_
<java.util.BitSet: int previousClearBit(int)> -> _SINK_ 
<java.nio.DoubleBuffer: boolean equals(java.lang.Object)> -> _NONE_
<android.view.View: android.view.View inflate(android.content.Context,int,android.view.ViewGroup)> -> _NONE_
<java.lang.StringBuffer: java.lang.StringBuffer append(char)> -> _NONE_
<android.nfc.NdefRecord: android.net.Uri toUri()> -> _NONE_
<java.lang.Double: double parseDouble(java.lang.String)> -> _SINK_ 
<java.util.UUID: long timestamp()> -> _NONE_
<android.net.Uri: java.util.Set getQueryParameterNames()> -> _SOURCE_
<android.graphics.Rect: int centerY()> -> _SINK_ 
<android.os.Messenger: void writeMessengerOrNullToParcel(android.os.Messenger,android.os.Parcel)> -> _NONE_
<java.math.BigInteger: int getLowestSetBit()> -> _SOURCE_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.CharSequence)> -> _NONE_
<android.content.ClipData$Item: java.lang.String coerceToHtmlText(android.content.Context)> -> _NONE_
<android.os.Bundle: java.util.ArrayList getCharSequenceArrayList(java.lang.String)> -> _SOURCE_
<android.app.Activity: boolean dispatchGenericMotionEvent(android.view.MotionEvent)> -> _NONE_
<android.text.Layout: float getSecondaryHorizontal(int)> -> _SOURCE_
<android.widget.TextView: int getCurrentTextColor()> -> _SOURCE_
<java.lang.IllegalMonitorStateException: void <init>(java.lang.String)> -> _NONE_
<android.view.accessibility.AccessibilityNodeInfo: void setVisibleToUser(boolean)> -> _SINK_ 
<android.util.TypedValue: float getFraction(float,float)> -> _SOURCE_
<android.view.Window: void setLocalFocus(boolean,boolean)> -> _NONE_
<android.widget.AbsListView: void setRecyclerListener(android.widget.AbsListView$RecyclerListener)> -> _NONE_
<android.content.IntentSender: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<android.graphics.Canvas: boolean clipRect(android.graphics.Rect,android.graphics.Region$Op)> -> _NONE_
<java.nio.DoubleBuffer: java.nio.DoubleBuffer get(double[])> -> _SOURCE_
<org.apache.http.util.CharArrayBuffer: int length()> -> _SINK_ 
<java.lang.String: java.lang.String copyValueOf(char[])> -> _SINK_ 
<android.view.ViewGroup: void setAddStatesFromChildren(boolean)> -> _NONE_
<android.hardware.Camera$Parameters: int getInt(java.lang.String)> -> _SOURCE_
<android.widget.Scroller: int getStartY()> -> _SOURCE_
<android.net.sip.SipManager: android.net.sip.SipManager newInstance(android.content.Context)> -> _SOURCE_
<android.animation.ValueAnimator: void reverse()> -> _NONE_
<java.net.Proxy: void <clinit>()> -> _NONE_
<android.view.View: void destroyDrawingCache()> -> _NONE_
<android.database.sqlite.SQLiteProgram: int getUniqueId()> -> _SOURCE_
<android.app.ActivityManager$MemoryInfo: void readFromParcel(android.os.Parcel)> -> _NONE_
<android.view.MotionEvent: void transform(android.graphics.Matrix)> -> _NONE_
<android.view.DragEvent: int getAction()> -> _SOURCE_
<java.nio.charset.Charset: boolean isRegistered()> -> _NONE_
<android.view.accessibility.AccessibilityEvent: void <clinit>()> -> _NONE_
<java.net.URLConnection: long getIfModifiedSince()> -> _SOURCE_
<android.webkit.WebResourceResponse: java.lang.String getEncoding()> -> _SOURCE_
<android.graphics.Point: boolean equals(int,int)> -> _NONE_
<android.print.PrintAttributes: android.print.PrintAttributes$MediaSize getMediaSize()> -> _SOURCE_
<java.nio.CharBuffer: java.lang.String toString()> -> _NONE_
<android.app.Dialog: boolean onSearchRequested()> -> _NONE_
<android.print.PrintDocumentAdapter$WriteResultCallback: void onWriteFailed(java.lang.CharSequence)> -> _NONE_
<android.view.View: void setScrollY(int)> -> _SINK_ 
<java.nio.charset.CoderResult: void <init>()> -> _NONE_
<android.graphics.Matrix: void mapVectors(float[])> -> _NONE_
<android.content.IntentFilter: void <init>(java.lang.String)> -> _NONE_
<android.bluetooth.BluetoothAdapter: java.lang.String getName()> -> _SOURCE_
<android.view.ViewTreeObserver: void addOnWindowAttachListener(android.view.ViewTreeObserver$OnWindowAttachListener)> -> _NONE_
<android.view.View: void setLabelFor(int)> -> _SINK_ 
<android.graphics.Region$Op: android.graphics.Region$Op valueOf(java.lang.String)> -> _SINK_ 
<java.lang.String: java.lang.String valueOf(float)> -> _SINK_ 
<org.apache.http.ProtocolVersion: java.lang.String toString()> -> _NONE_
<android.view.InputDevice$MotionRange: float getMax()> -> _SOURCE_
<android.app.LocalActivityManager: void dispatchCreate(android.os.Bundle)> -> _NONE_
<android.widget.AdapterView: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)> -> _NONE_
<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Rect,android.graphics.Rect,android.graphics.Paint)> -> _NONE_
<java.lang.String: java.lang.String replace(char,char)> -> _NONE_
<android.content.pm.ConfigurationInfo: java.lang.String toString()> -> _NONE_
<android.os.Handler: void removeMessages(int,java.lang.Object)> -> _NONE_
<android.content.IntentFilter: void addDataSchemeSpecificPart(java.lang.String,int)> -> _NONE_
<android.animation.LayoutTransition: long getStartDelay(int)> -> _SOURCE_
<java.lang.reflect.Field: int getInt(java.lang.Object)> -> _SOURCE_
<java.lang.String: byte[] getBytes()> -> _SOURCE_
<android.os.Message: long getWhen()> -> _SOURCE_
<android.widget.AbsListView: boolean onKeyDown(int,android.view.KeyEvent)> -> _NONE_
<android.hardware.Camera$Parameters: boolean isAutoExposureLockSupported()> -> _NONE_
<java.lang.Class: java.lang.Package getPackage()> -> _SOURCE_
<android.view.View$AccessibilityDelegate: void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)> -> _NONE_
<java.net.NetworkInterface: java.lang.String getName()> -> _SOURCE_
<android.telephony.ServiceState: void <init>(android.os.Parcel)> -> _NONE_
<android.content.pm.FeatureInfo: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<java.nio.IntBuffer: int compareTo(java.lang.Object)> -> _NONE_
<android.content.IntentSender: void sendIntent(android.content.Context,int,android.content.Intent,android.content.IntentSender$OnFinished,android.os.Handler)> -> _SINK_ 
<android.widget.AbsListView: void setSelector(android.graphics.drawable.Drawable)> -> _NONE_
<android.graphics.Path: void arcTo(android.graphics.RectF,float,float)> -> _NONE_
<java.net.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _NONE_
<android.webkit.WebViewClient: void onPageStarted(android.webkit.WebView,java.lang.String,android.graphics.Bitmap)> -> _NONE_
<android.app.Dialog: void openOptionsMenu()> -> _NONE_
<android.content.res.Resources: java.lang.CharSequence getQuantityText(int,int)> -> _SOURCE_
<android.content.pm.ResolveInfo: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<android.view.MotionEvent: long getDownTime()> -> _SOURCE_
<android.webkit.WebBackForwardList: android.webkit.WebBackForwardList clone()> -> _NONE_
<android.content.res.Resources: void getValue(int,android.util.TypedValue,boolean)> -> _SOURCE_
<java.net.NetworkInterface: java.net.NetworkInterface getByInetAddress(java.net.InetAddress)> -> _SOURCE_
<java.lang.ClassCircularityError: void <init>(java.lang.String)> -> _NONE_
<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Matrix,android.graphics.Paint)> -> _NONE_
<java.security.spec.ECPoint: int hashCode()> -> _SINK_ 
<android.widget.Scroller: void abortAnimation()> -> _NONE_
<android.content.Context: void unregisterComponentCallbacks(android.content.ComponentCallbacks)> -> _NONE_
<java.nio.channels.spi.AbstractSelectableChannel: java.nio.channels.SelectionKey register(java.nio.channels.Selector,int,java.lang.Object)> -> _SOURCE_
<android.graphics.Matrix: void setScale(float,float)> -> _SINK_ 
<android.hardware.Camera$Parameters: java.util.List getSupportedFocusModes()> -> _SOURCE_
<android.app.Activity: java.lang.CharSequence getTitle()> -> _SOURCE_
<java.lang.reflect.AccessibleObject: boolean isAccessible()> -> _NONE_
<android.view.Window: void setAttributes(android.view.WindowManager$LayoutParams)> -> _NONE_
<android.os.ParcelFileDescriptor: void <clinit>()> -> _NONE_
<android.provider.ContactsContract$ProfileSyncState: void set(android.content.ContentProviderClient,android.accounts.Account,byte[])> -> _SINK_ 
<android.view.Display: int getDisplayId()> -> _SOURCE_
<android.animation.Keyframe: void setFraction(float)> -> _NONE_
<android.telephony.CellSignalStrengthCdma: int getCdmaEcio()> -> _SOURCE_
<java.lang.Long: long rotateLeft(long,int)> -> _SINK_ 
<java.nio.channels.ServerSocketChannel: void <init>(java.nio.channels.spi.SelectorProvider)> -> _NONE_
<android.hardware.Camera$Parameters: java.lang.String flatten()> -> _NONE_
<android.view.View: void setVerticalScrollBarEnabled(boolean)> -> _SINK_ 
<android.location.Criteria: int getBearingAccuracy()> -> _SOURCE_
<android.widget.TextView: int getMinEms()> -> _SOURCE_
<android.graphics.Canvas: boolean clipRegion(android.graphics.Region)> -> _NONE_
<android.graphics.Canvas: android.graphics.DrawFilter getDrawFilter()> -> _SOURCE_
<android.view.ViewGroup$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)> -> _NONE_
<android.os.Parcel: void writeException(java.lang.Exception)> -> _NONE_
<android.content.res.ColorStateList: android.content.res.ColorStateList valueOf(int)> -> _NONE_
<java.lang.Integer: java.lang.String toString()> -> _NONE_
<android.view.ViewGroup: void dispatchConfigurationChanged(android.content.res.Configuration)> -> _NONE_
<org.apache.http.ProtocolVersion: boolean lessEquals(org.apache.http.ProtocolVersion)> -> _NONE_
<java.security.spec.EllipticCurve: int hashCode()> -> _SINK_ 
<android.webkit.WebSettings: void setMinimumLogicalFontSize(int)> -> _NONE_
<android.provider.Browser: void clearSearches(android.content.ContentResolver)> -> _NONE_
<android.content.pm.PathPermission: java.lang.String getWritePermission()> -> _SOURCE_
<android.graphics.Region: boolean op(android.graphics.Rect,android.graphics.Region$Op)> -> _NONE_
<android.graphics.Canvas$VertexMode: android.graphics.Canvas$VertexMode valueOf(java.lang.String)> -> _SINK_ 
<java.security.GeneralSecurityException: void <init>(java.lang.Throwable)> -> _NONE_
<android.widget.AbsListView: void sendAccessibilityEvent(int)> -> _NONE_
<android.os.Parcel: void writeLong(long)> -> _NONE_
<java.nio.channels.spi.AbstractSelectableChannel: java.nio.channels.spi.SelectorProvider provider()> -> _NONE_
<android.view.KeyEvent: android.view.KeyEvent changeTimeRepeat(android.view.KeyEvent,long,int,int)> -> _NONE_
<android.os.WorkSource: int describeContents()> -> _SINK_ 
<android.net.Uri$Builder: android.net.Uri$Builder encodedFragment(java.lang.String)> -> _NONE_
<java.lang.Character: boolean isJavaIdentifierStart(char)> -> _NONE_
<android.widget.ListView: android.widget.ListAdapter getAdapter()> -> _SOURCE_
<android.content.ContentResolver: void setIsSyncable(android.accounts.Account,java.lang.String,int)> -> _NONE_
<android.app.Dialog: boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> -> _NONE_
<android.net.http.SslCertificate$DName: java.lang.String getOName()> -> _SOURCE_
<android.widget.AbsListView: void setTextFilterEnabled(boolean)> -> _NONE_
<java.net.Proxy: java.net.SocketAddress address()> -> _NONE_
<java.lang.Throwable: void printStackTrace()> -> _NONE_
<android.telephony.TelephonyManager: java.lang.String getSimOperatorName()> -> _SOURCE_
<android.content.res.Configuration: void <clinit>()> -> _NONE_
<android.view.MotionEvent: java.lang.String toString()> -> _NONE_
<android.widget.AbsoluteLayout: void <init>(android.content.Context,android.util.AttributeSet)> -> _NONE_
<java.util.Date: void setYear(int)> -> _SINK_ 
<android.telephony.CellInfo: java.lang.String toString()> -> _NONE_
<android.provider.Settings$Secure: android.net.Uri getUriFor(java.lang.String)> -> _SOURCE_
<android.view.KeyEvent: long getEventTime()> -> _SOURCE_
<android.accounts.AccountManager: void clearPassword(android.accounts.Account)> -> _NONE_
<android.view.View: void <clinit>()> -> _NONE_
<android.nfc.NdefRecord: boolean equals(java.lang.Object)> -> _NONE_
<android.content.Intent: void setExtrasClassLoader(java.lang.ClassLoader)> -> _SINK_ 
<android.content.ClipData$Item: void <init>(java.lang.CharSequence,java.lang.String)> -> _NONE_
<java.lang.NoSuchFieldException: void <init>()> -> _NONE_
<android.view.MotionEvent$PointerProperties: void <init>()> -> _NONE_
<android.graphics.Bitmap: int getAllocationByteCount()> -> _SOURCE_
<android.view.WindowId: int hashCode()> -> _SINK_ 
<android.util.SparseArray: java.lang.String toString()> -> _NONE_
<android.view.ViewGroup: void addView(android.view.View,int)> -> _NONE_
<java.io.InputStream: int available()> -> _NONE_
<android.widget.TextView: int computeVerticalScrollExtent()> -> _NONE_
<java.lang.Character: int codePointAt(char[],int,int)> -> _SINK_ 
<android.view.ViewGroup: void setMotionEventSplittingEnabled(boolean)> -> _NONE_
<android.view.View: void requestFitSystemWindows()> -> _NONE_
<android.webkit.HttpAuthHandler: boolean useHttpAuthUsernamePassword()> -> _NONE_
<org.apache.http.message.BasicLineParser: org.apache.http.StatusLine parseStatusLine(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)> -> _NONE_
<java.net.SocketAddress: void <init>()> -> _NONE_
<android.app.Activity: boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> -> _NONE_
<android.view.DragEvent: java.lang.String toString()> -> _NONE_
<android.widget.TextView: void setPaddingRelative(int,int,int,int)> -> _SINK_ 
<android.location.Criteria: int describeContents()> -> _SINK_ 
<android.util.TypedValue: float complexToFraction(int,float,float)> -> _NONE_
<java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()> -> _SOURCE_
<java.io.PrintStream: java.io.PrintStream append(char)> -> _NONE_
<java.io.Reader: long skip(long)> -> _NONE_
<java.lang.Thread$State: void <clinit>()> -> _NONE_
<java.lang.Void: void <clinit>()> -> _NONE_
<android.view.Surface: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<java.lang.Long: long rotateRight(long,int)> -> _SINK_ 
<android.telephony.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)> -> _SINK_ 
<java.net.URI: java.lang.String getRawPath()> -> _SOURCE_
<android.telephony.CellSignalStrengthCdma: int getLevel()> -> _SOURCE_
<java.nio.charset.CoderResult: boolean isError()> -> _NONE_
<android.content.BroadcastReceiver: void clearAbortBroadcast()> -> _NONE_
<android.view.accessibility.AccessibilityRecord: java.lang.CharSequence getBeforeText()> -> _SOURCE_
<android.webkit.WebChromeClient: void onReceivedIcon(android.webkit.WebView,android.graphics.Bitmap)> -> _NONE_
<android.widget.AbsListView: boolean isStackFromBottom()> -> _NONE_
<android.view.KeyEvent: char getMatch(char[])> -> _SOURCE_
<android.text.Layout: int getLineBaseline(int)> -> _SOURCE_
<android.content.pm.ConfigurationInfo: void <init>(android.content.pm.ConfigurationInfo)> -> _NONE_
<java.util.Date: int getMinutes()> -> _SOURCE_
<android.view.KeyCharacterMap$KeyData: void <init>()> -> _NONE_
<android.widget.AdapterView: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> -> _NONE_
<android.net.sip.SipSession: void register(int)> -> _NONE_
<android.hardware.Camera: void takePicture(android.hardware.Camera$ShutterCallback,android.hardware.Camera$PictureCallback,android.hardware.Camera$PictureCallback)> -> _NONE_
<android.view.ViewGroup: void setClipChildren(boolean)> -> _NONE_
<android.text.Editable$Factory: android.text.Editable$Factory getInstance()> -> _SOURCE_
<android.net.wifi.WifiInfo: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<android.content.ContentProviderOperation$Builder: android.content.ContentProviderOperation$Builder withValueBackReference(java.lang.String,int)> -> _NONE_
<android.content.Intent: int fillIn(android.content.Intent,int)> -> _SINK_ 
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)> -> _SOURCE_
<android.location.Criteria: java.lang.String toString()> -> _NONE_
<android.view.DragEvent: int describeContents()> -> _SINK_ 
<java.lang.NegativeArraySizeException: void <init>()> -> _NONE_
<android.view.InputDevice$MotionRange: float getFlat()> -> _SOURCE_
<android.view.Display: int getRotation()> -> _SOURCE_
<android.os.Message: android.os.Message obtain(android.os.Handler,int,java.lang.Object)> -> _SINK_ 
<android.os.Parcel: void writeList(java.util.List)> -> _NONE_
<android.widget.TextView: void setHintTextColor(int)> -> _SINK_ 
<android.view.View: void <init>(android.content.Context)> -> _NONE_
<android.content.res.TypedArray: int getLayoutDimension(int,java.lang.String)> -> _SOURCE_
<android.widget.AbsListView: void onDetachedFromWindow()> -> _NONE_
<android.app.Activity: void onStart()> -> _NONE_
<java.nio.CharBuffer: char[] array()> -> _NONE_
<android.content.res.Resources: boolean getBoolean(int)> -> _SOURCE_
<java.io.InputStream: void reset()> -> _NONE_
<android.app.Activity: boolean onCreatePanelMenu(int,android.view.Menu)> -> _NONE_
<android.content.IntentFilter: int countDataSchemeSpecificParts()> -> _SINK_ 
<java.nio.charset.CoderResult: boolean isUnmappable()> -> _NONE_
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator rotation(float)> -> _NONE_
<java.lang.Long: long lowestOneBit(long)> -> _SINK_ 
<android.widget.ListView: boolean isOpaque()> -> _NONE_
<java.net.InetAddress: java.lang.String getCanonicalHostName()> -> _SOURCE_
<android.app.ActivityGroup: void finishFromChild(android.app.Activity)> android.permission.USE_CREDENTIALS android.permission.MANAGE_APP_TOKENS android.permission.MANAGE_ACCOUNTS -> _NONE_
<android.os.Parcel: void writeLongArray(long[])> -> _NONE_
<android.app.Service: void onTrimMemory(int)> -> _NONE_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[])> -> _SOURCE_
<java.lang.String: int codePointBefore(int)> -> _SINK_ 
<android.bluetooth.BluetoothGatt: void abortReliableWrite(android.bluetooth.BluetoothDevice)> -> _NONE_
<android.widget.TextView: void setLinkTextColor(android.content.res.ColorStateList)> -> _SINK_ 
<android.view.animation.Animation: float resolveSize(int,float,int,int)> -> _NONE_
<android.widget.TextView: boolean onKeyPreIme(int,android.view.KeyEvent)> -> _NONE_
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator withEndAction(java.lang.Runnable)> -> _NONE_
<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)> -> _NONE_
<android.widget.TextView: void setCompoundDrawablesWithIntrinsicBounds(int,int,int,int)> -> _SINK_ 
<java.security.CodeSigner: boolean equals(java.lang.Object)> -> _NONE_
<android.webkit.WebSettings$ZoomDensity: android.webkit.WebSettings$ZoomDensity[] values()> -> _NONE_
<android.location.Criteria: void setHorizontalAccuracy(int)> -> _SINK_ 
<android.view.inputmethod.ExtractedTextRequest: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<android.view.InputDevice: java.lang.String toString()> -> _NONE_
<android.widget.TextView: void getFocusedRect(android.graphics.Rect)> -> _SOURCE_
<android.view.accessibility.AccessibilityRecord: void setSource(android.view.View)> -> _SINK_ 
<android.widget.RemoteViews: void setIntent(int,java.lang.String,android.content.Intent)> -> _SINK_ 
<android.view.View: int getMeasuredWidthAndState()> -> _SOURCE_
<android.view.View: int getMeasuredState()> -> _SOURCE_
<android.webkit.WebView: void goBack()> -> _NONE_
<android.media.MediaPlayer: void setWakeMode(android.content.Context,int)> -> _SINK_ 
<android.graphics.Bitmap: boolean hasMipMap()> -> _NONE_
<android.widget.AbsListView: boolean isInFilterMode()> -> _NONE_
<org.apache.http.protocol.DefaultedHttpContext: java.lang.Object removeAttribute(java.lang.String)> -> _NONE_
<android.net.wifi.WifiManager$WifiLock: boolean isHeld()> -> _NONE_
<android.graphics.PorterDuff$Mode: void <clinit>()> -> _NONE_
<android.bluetooth.BluetoothGattCallback: void onReadRemoteRssi(android.bluetooth.BluetoothGatt,int,int)> -> _NONE_
<android.content.res.Resources$NotFoundException: void <init>(java.lang.String)> -> _NONE_
<android.widget.TextView: int computeHorizontalScrollRange()> -> _NONE_
<android.view.Window: void setDefaultWindowFormat(int)> -> _NONE_
<android.widget.ListView: void setFooterDividersEnabled(boolean)> -> _SINK_ 
<android.view.LayoutInflater: android.view.LayoutInflater$Filter getFilter()> -> _SOURCE_
<android.webkit.WebView: boolean requestFocus(int,android.graphics.Rect)> -> _NONE_
<java.net.URI: java.lang.String toString()> -> _NONE_
<android.view.accessibility.AccessibilityNodeInfo: void setLabelFor(android.view.View,int)> -> _SINK_ 
<android.graphics.RectF: int hashCode()> -> _SINK_ 
<android.app.Activity: void onProvideAssistData(android.os.Bundle)> -> _NONE_
<android.view.accessibility.AccessibilityRecord: void setMaxScrollY(int)> -> _SINK_ 
<android.widget.AbsListView: void onLayout(boolean,int,int,int,int)> -> _NONE_
<android.os.ParcelUuid: boolean equals(java.lang.Object)> -> _NONE_
<android.location.Location: void dump(android.util.Printer,java.lang.String)> -> _NONE_
<java.util.AbstractMap: java.lang.Object get(java.lang.Object)> -> _SOURCE_
<java.security.cert.CertificateEncodingException: void <init>(java.lang.Throwable)> -> _NONE_
<android.provider.Settings$System: boolean putString(android.content.ContentResolver,java.lang.String,java.lang.String)> -> _NONE_
<android.app.Activity: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> -> _SINK_ 
<android.view.View: void setFilterTouchesWhenObscured(boolean)> -> _SINK_ 
<java.net.InetAddress: void <init>()> -> _NONE_
<java.nio.CharBuffer: java.nio.CharBuffer wrap(java.lang.CharSequence,int,int)> -> _NONE_
<android.os.UserHandle: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<android.webkit.WebView: java.lang.String findAddress(java.lang.String)> -> _NONE_
<android.content.ContentResolver: java.util.List getPersistedUriPermissions()> -> _SOURCE_
<java.lang.Long: int signum(long)> -> _SINK_ 
<android.telephony.CellIdentityCdma: boolean equals(java.lang.Object)> -> _NONE_
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothServerSocket listenUsingInsecureRfcommWithServiceRecord(java.lang.String,java.util.UUID)> -> _NONE_
<android.net.wifi.WifiEnterpriseConfig: java.lang.String getAnonymousIdentity()> -> _SOURCE_
<android.widget.AbsListView: void setChoiceMode(int)> -> _NONE_
<android.content.SyncAdapterType: boolean allowParallelSyncs()> -> _NONE_
<android.graphics.Rect: void setEmpty()> -> _SINK_ 
<android.telephony.CellIdentityCdma: int getLongitude()> -> _SOURCE_
<android.nfc.NdefRecord: void <init>(byte[])> -> _NONE_
<android.content.res.Resources: int getDimensionPixelOffset(int)> -> _SOURCE_
<java.lang.Character: boolean equals(java.lang.Object)> -> _NONE_
<android.content.pm.PackageInfo: void <init>()> -> _NONE_
<android.print.PrintDocumentInfo: void <clinit>()> -> _NONE_
<android.os.Bundle: char getChar(java.lang.String,char)> -> _SOURCE_
<android.content.ClipDescription: int getMimeTypeCount()> -> _SOURCE_
<android.app.Dialog: boolean dispatchGenericMotionEvent(android.view.MotionEvent)> -> _NONE_
<android.view.accessibility.AccessibilityNodeInfo: boolean refresh()> -> _NONE_
<java.math.BigInteger: java.math.BigInteger[] divideAndRemainder(java.math.BigInteger)> -> _NONE_
<java.io.File: java.io.File[] listFiles()> -> _NONE_
<android.view.MotionEvent: float getHistoricalSize(int)> -> _SOURCE_
<java.lang.StringBuilder: int lastIndexOf(java.lang.String,int)> -> _SINK_ 
<android.content.ContentValues: byte[] getAsByteArray(java.lang.String)> -> _SOURCE_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String[])> -> _NONE_
<android.os.Bundle: void putFloat(java.lang.String,float)> -> _NONE_
<android.view.accessibility.AccessibilityNodeInfo: void <clinit>()> -> _NONE_
<android.widget.AbsListView$LayoutParams: void <init>(int,int)> -> _NONE_
<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean[])> -> _NONE_
<android.bluetooth.BluetoothAdapter: boolean isDiscovering()> -> _NONE_
<android.content.ContentValues: int size()> -> _SINK_ 
<android.os.PatternMatcher: int describeContents()> -> _SINK_ 
<android.graphics.Path: void setFillType(android.graphics.Path$FillType)> -> _SINK_ 
<android.graphics.Path: void addOval(android.graphics.RectF,android.graphics.Path$Direction)> -> _NONE_
<android.view.View: android.graphics.Rect getClipBounds()> -> _SOURCE_
<android.graphics.Point: int describeContents()> -> _SINK_ 
<android.graphics.drawable.Drawable: boolean setVisible(boolean,boolean)> -> _NONE_
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo findFocus(int)> -> _NONE_
<android.media.MediaPlayer: void reset()> -> _NONE_
<android.view.ViewGroup$LayoutParams: void resolveLayoutDirection(int)> -> _NONE_
<android.accounts.AccountAuthenticatorActivity: void setRequestedOrientation(int)> android.permission.DEVICE_POWER android.permission.BROADCAST_STICKY android.permission.WAKE_LOCK android.permission.MANAGE_APP_TOKENS android.permission.UPDATE_DEVICE_STATS -> _SINK_ 
<android.graphics.Canvas: void concat(android.graphics.Matrix)> -> _NONE_
<android.print.PrintDocumentInfo: int hashCode()> -> _SINK_ 
<android.graphics.Matrix: void mapPoints(float[],float[])> -> _NONE_
<android.content.IntentFilter: void <init>(android.content.IntentFilter)> -> _SINK_ 
<android.graphics.Matrix: boolean preRotate(float,float,float)> -> _NONE_
<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofFloat(android.util.Property,float[])> -> _NONE_
<org.apache.http.util.CharArrayBuffer: void clear()> -> _NONE_
<android.view.KeyEvent: android.view.KeyEvent changeAction(android.view.KeyEvent,int)> -> _NONE_
<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_ 
<java.lang.annotation.RetentionPolicy: java.lang.annotation.RetentionPolicy[] values()> -> _NONE_
<java.lang.reflect.Field: boolean isSynthetic()> -> _NONE_
<android.text.Layout: int getLineForOffset(int)> -> _SOURCE_
<android.app.ExpandableListActivity: android.widget.ExpandableListAdapter getExpandableListAdapter()> -> _SOURCE_
<android.content.res.Resources: android.content.res.Resources getSystem()> -> _SOURCE_
<android.hardware.Camera$Parameters: java.util.List getSupportedPreviewFrameRates()> -> _SOURCE_
<android.bluetooth.BluetoothGattCharacteristic: void setWriteType(int)> -> _SINK_ 
<java.nio.channels.DatagramChannel: int validOps()> -> _NONE_
<android.util.Log: int v(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_ 
<android.animation.Animator: android.animation.TimeInterpolator getInterpolator()> -> _SOURCE_
<android.content.res.AssetManager: android.content.res.AssetFileDescriptor openFd(java.lang.String)> -> _SINK_ 
<android.app.Activity: void setProgressBarIndeterminate(boolean)> -> _SINK_ 
<java.nio.ShortBuffer: int compareTo(java.lang.Object)> -> _NONE_
<android.content.pm.PackageItemInfo: android.graphics.drawable.Drawable loadLogo(android.content.pm.PackageManager)> -> _NONE_
<android.os.Parcel: android.util.SparseArray readSparseArray(java.lang.ClassLoader)> -> _NONE_
<android.content.ContentProviderClient: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<java.net.NetworkInterface: int getMTU()> -> _SOURCE_
<android.view.Window: void setDimAmount(float)> -> _NONE_
<android.graphics.Canvas: android.graphics.Rect getClipBounds()> -> _SOURCE_
<android.app.ActivityManager$RunningAppProcessInfo: void <init>()> -> _NONE_
<java.math.BigInteger: void <init>(java.lang.String)> -> _NONE_
<android.view.ViewGroup: void dispatchFreezeSelfOnly(android.util.SparseArray)> -> _NONE_
<android.content.IntentFilter: android.os.PatternMatcher getDataPath(int)> -> _SOURCE_
<android.provider.Settings$System: float getFloat(android.content.ContentResolver,java.lang.String)> -> _SOURCE_
<android.nfc.tech.IsoDep: int getTimeout()> -> _SOURCE_
<android.view.MotionEvent: float getHistoricalPressure(int,int)> -> _SOURCE_
<android.net.Uri: java.lang.String decode(java.lang.String)> -> _NONE_
<android.webkit.WebChromeClient: void onGeolocationPermissionsHidePrompt()> -> _NONE_
<android.graphics.Rect: void union(int,int,int,int)> -> _NONE_
<javax.security.auth.x500.X500Principal: java.lang.String getName(java.lang.String,java.util.Map)> -> _SOURCE_
<android.content.BroadcastReceiver: java.lang.String getResultData()> -> _SOURCE_
<android.widget.AbsListView: int getCheckedItemPosition()> -> _SOURCE_
<android.view.animation.LayoutAnimationController: boolean willOverlap()> -> _NONE_
<android.print.PrintAttributes$MediaSize: java.lang.String getId()> -> _SOURCE_
<android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)> -> _SOURCE_
<java.lang.ThreadGroup: void <init>(java.lang.String)> -> _NONE_
<android.graphics.Canvas: void drawVertices(android.graphics.Canvas$VertexMode,int,float[],int,float[],int,int[],int,short[],int,int,android.graphics.Paint)> -> _NONE_
<android.webkit.WebSettings$PluginState: android.webkit.WebSettings$PluginState[] values()> -> _NONE_
<android.widget.AbsListView: int getLeftPaddingOffset()> -> _SOURCE_
<android.webkit.WebSettings: void setGeolocationEnabled(boolean)> -> _NONE_
<android.app.TaskStackBuilder: android.content.Intent editIntentAt(int)> -> _NONE_
<android.widget.TextView: int getSelectionEnd()> -> _SOURCE_
<java.nio.CharBuffer: java.nio.CharBuffer append(java.lang.CharSequence)> -> _NONE_
<android.view.accessibility.AccessibilityNodeInfo: void setFocusable(boolean)> -> _SINK_ 
<android.graphics.Typeface: int getStyle()> -> _SOURCE_
<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)> -> _NONE_
<java.net.DatagramPacket: java.net.InetAddress getAddress()> -> _SOURCE_
<android.text.style.ReplacementSpan: void updateMeasureState(android.text.TextPaint)> -> _NONE_
<android.view.animation.Animation: void reset()> -> _NONE_
<android.graphics.Paint: float measureText(java.lang.CharSequence,int,int)> -> _NONE_
<android.app.Activity: android.view.ActionMode startActionMode(android.view.ActionMode$Callback)> -> _SINK_ 
<android.os.Parcel: void readException()> -> _NONE_
<java.net.ServerSocket: java.net.Socket accept()> -> _NONE_
<java.lang.String: void <init>(byte[],int,int,java.nio.charset.Charset)> -> _NONE_
<android.widget.AbsListView: boolean onGenericMotionEvent(android.view.MotionEvent)> -> _NONE_
<android.app.Notification$Builder: android.app.Notification$Builder setContentText(java.lang.CharSequence)> -> _SINK_ 
<android.hardware.Camera$Parameters: java.lang.String getFlashMode()> -> _SOURCE_
<android.widget.Scroller: int getFinalY()> -> _SOURCE_
<android.widget.TextView: void setMovementMethod(android.text.method.MovementMethod)> -> _SINK_ 
<android.nfc.NdefRecord: byte[] toByteArray()> -> _NONE_
<java.lang.ClassLoader: java.lang.Package definePackage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.net.URL)> -> _NONE_
<android.app.Notification$Builder: android.app.Notification$Builder setStyle(android.app.Notification$Style)> -> _SINK_ 
<android.hardware.Camera$Size: boolean equals(java.lang.Object)> -> _NONE_
<android.graphics.Matrix: boolean isIdentity()> -> _NONE_
<android.app.Dialog: boolean onPreparePanel(int,android.view.View,android.view.Menu)> -> _NONE_
<java.lang.Boolean: int compareTo(java.lang.Object)> -> _SINK_ 
<android.util.DisplayMetrics: void setToDefaults()> -> _SINK_ 
<android.content.Intent: android.content.Intent putExtra(java.lang.String,char[])> -> _NONE_
<java.lang.Error: void <init>()> -> _NONE_
<android.accessibilityservice.AccessibilityService: android.accessibilityservice.AccessibilityServiceInfo getServiceInfo()> -> _SOURCE_
<android.location.LocationManager: void removeUpdates(android.location.LocationListener)> -> _NONE_
<android.app.ActionBar: void setHomeButtonEnabled(boolean)> -> _NONE_
<android.widget.AbsListView: void setCacheColorHint(int)> -> _NONE_
<android.graphics.Paint$Join: void <clinit>()> -> _NONE_
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.CharSequence,int,int)> -> _NONE_
<java.nio.channels.Pipe$SinkChannel: void <init>(java.nio.channels.spi.SelectorProvider)> -> _NONE_
<java.net.URLConnection: boolean getDefaultUseCaches()> -> _SOURCE_
<android.accounts.AccountsException: void <init>(java.lang.Throwable)> -> _NONE_
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.io.File,android.database.sqlite.SQLiteDatabase$CursorFactory)> -> _SINK_ 
<android.widget.TextView: void setError(java.lang.CharSequence)> -> _SINK_ 
<java.lang.reflect.Method: boolean equals(java.lang.Object)> -> _NONE_
<android.view.View: void onFocusChanged(boolean,int,android.graphics.Rect)> -> _NONE_
<android.app.Dialog: boolean dispatchTrackballEvent(android.view.MotionEvent)> -> _NONE_
<android.view.ViewGroup: void dispatchDisplayHint(int)> -> _NONE_
<android.app.PendingIntent: android.app.PendingIntent getActivity(android.content.Context,int,android.content.Intent,int,android.os.Bundle)> -> _SOURCE_
<java.lang.Byte: int compare(byte,byte)> -> _SINK_ 
<android.os.Parcel: void setDataCapacity(int)> -> _SINK_ 
<android.app.Activity: boolean dispatchTrackballEvent(android.view.MotionEvent)> -> _NONE_
<android.widget.TextView: android.content.res.ColorStateList getTextColors(android.content.Context,android.content.res.TypedArray)> -> _SOURCE_
<android.view.View: int getDrawingCacheBackgroundColor()> -> _SOURCE_
<android.os.Message: android.os.Message obtain()> -> _NONE_
<android.os.Handler: boolean postAtFrontOfQueue(java.lang.Runnable)> -> _NONE_
<android.animation.ValueAnimator: void end()> -> _NONE_
<java.net.InetAddress: boolean isReachable(java.net.NetworkInterface,int,int)> -> _NONE_
<android.view.ViewGroup: void setStaticTransformationsEnabled(boolean)> -> _NONE_
<java.nio.charset.CharsetDecoder: boolean isCharsetDetected()> -> _NONE_
<android.view.View: void cancelPendingInputEvents()> -> _NONE_
<android.view.inputmethod.CompletionInfo: int describeContents()> -> _SINK_ 
<java.nio.charset.Charset: java.util.Set aliases()> -> _NONE_
<android.view.MotionEvent: float getHistoricalPressure(int)> -> _SOURCE_
<android.view.ViewGroup: int[] onCreateDrawableState(int)> -> _NONE_
<android.bluetooth.BluetoothGatt: boolean readRemoteRssi()> -> _NONE_
<java.net.Socket: java.net.InetAddress getLocalAddress()> -> _SOURCE_
<android.bluetooth.BluetoothGattCharacteristic: boolean setValue(int,int,int)> -> _SINK_ 
<android.telephony.ServiceState: void setStateOutOfService()> -> _SINK_ 
<android.database.sqlite.SQLiteProgram: void bindAllArgsAsStrings(java.lang.String[])> -> _NONE_
<android.webkit.WebView: android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo)> -> _NONE_
<java.net.URL: java.lang.String getAuthority()> -> _SOURCE_
<android.view.KeyEvent: int getModifierMetaStateMask()> -> _SOURCE_
<android.widget.ExpandableListView: int getPackedPositionType(long)> -> _SOURCE_
<android.widget.TextView: float getLineSpacingExtra()> -> _SOURCE_
<android.text.TextUtils$TruncateAt: void <clinit>()> -> _NONE_
<android.location.Location: void removeAltitude()> -> _NONE_
<android.app.Fragment$SavedState: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<android.animation.Keyframe: android.animation.Keyframe ofObject(float,java.lang.Object)> -> _NONE_
<java.lang.Long: java.lang.String toString(long)> -> _SINK_ 
<android.graphics.Path: void rewind()> -> _NONE_
<android.net.wifi.WifiInfo: java.lang.String getBSSID()> -> _SOURCE_
<android.webkit.WebSettings: boolean getDomStorageEnabled()> -> _SOURCE_
<android.hardware.Camera: void cancelAutoFocus()> -> _NONE_
<android.webkit.WebView: void onWindowFocusChanged(boolean)> -> _NONE_
<java.net.URISyntaxException: void <init>(java.lang.String,java.lang.String,int)> -> _NONE_
<java.lang.Character: int digit(int,int)> -> _SINK_ 
<android.widget.AbsListView: void <init>(android.content.Context,android.util.AttributeSet,int)> -> _NONE_
<android.view.animation.Animation: void restrictDuration(long)> -> _NONE_
<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofInt(java.lang.String,int[])> -> _NONE_
<android.location.Location: int describeContents()> -> _SINK_ 
<android.net.http.SslCertificate: void <init>(java.lang.String,java.lang.String,java.util.Date,java.util.Date)> -> _NONE_
<android.provider.Settings$System: boolean getShowGTalkServiceStatus(android.content.ContentResolver)> -> _SOURCE_
<android.content.ContentProviderResult: void <init>(android.net.Uri)> -> _NONE_
<java.lang.Character: java.lang.String getName(int)> -> _SOURCE_
<android.widget.AdapterView: void addView(android.view.View,int)> -> _NONE_
<java.lang.String: java.lang.String valueOf(long)> -> _SINK_ 
<java.security.cert.CertificateParsingException: void <init>(java.lang.Throwable)> -> _NONE_
<java.util.BitSet: void flip(int,int)> -> _NONE_
<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.CharSequence)> -> _NONE_
<android.webkit.WebBackForwardList: android.webkit.WebHistoryItem getItemAtIndex(int)> -> _SOURCE_
<android.view.View: void setDrawingCacheBackgroundColor(int)> -> _SINK_ 
<java.lang.reflect.Constructor: java.lang.String toString()> -> _NONE_
<android.webkit.WebSettings: void setLoadsImagesAutomatically(boolean)> -> _NONE_
<android.hardware.Camera$Parameters: void getPreviewFpsRange(int[])> -> _SOURCE_
<java.net.Proxy$Type: java.net.Proxy$Type valueOf(java.lang.String)> -> _SINK_ 
<android.test.mock.MockContentResolver: void addProvider(java.lang.String,android.content.ContentProvider)> -> _NONE_
<android.view.Window: void clearFlags(int)> -> _NONE_
<android.webkit.WebView: void dispatchDraw(android.graphics.Canvas)> -> _NONE_
<android.view.View: void computeScroll()> -> _NONE_
<android.view.accessibility.AccessibilityEvent: int getAction()> -> _SOURCE_
<java.nio.ShortBuffer: java.nio.ShortBuffer put(java.nio.ShortBuffer)> -> _NONE_
<java.lang.reflect.Field: java.lang.Class getType()> -> _SOURCE_
<java.lang.String: java.lang.String toUpperCase()> -> _NONE_
<android.animation.PropertyValuesHolder: void setObjectValues(java.lang.Object[])> -> _SINK_ 
<android.util.DisplayMetrics: void <init>()> -> _NONE_
<java.lang.reflect.Constructor: java.lang.annotation.Annotation[][] getParameterAnnotations()> -> _SOURCE_
<android.view.View: int getHeight()> -> _SOURCE_
<android.view.View: void setClipBounds(android.graphics.Rect)> -> _SINK_ 
<android.content.res.Configuration: void setLayoutDirection(java.util.Locale)> -> _SINK_ 
<java.net.DatagramSocket: void <init>()> -> _NONE_
<org.apache.http.ParseException: void <init>(java.lang.String)> -> _NONE_
<android.view.MotionEvent: int findPointerIndex(int)> -> _SINK_ 
<android.content.BroadcastReceiver: android.content.BroadcastReceiver$PendingResult goAsync()> -> _NONE_
<android.print.PrintDocumentAdapter$LayoutResultCallback: void onLayoutFailed(java.lang.CharSequence)> -> _NONE_
<android.widget.TextView: boolean bringPointIntoView(int)> -> _NONE_
<android.app.Activity: void openOptionsMenu()> -> _NONE_
<android.webkit.WebSettings: void setBlockNetworkImage(boolean)> -> _NONE_
<android.net.sip.SipException: void <init>()> -> _NONE_
<android.view.ViewGroup$MarginLayoutParams: boolean isMarginRelative()> -> _NONE_
<java.net.URLConnection: java.net.FileNameMap getFileNameMap()> -> _SOURCE_
<android.os.Parcel: float[] createFloatArray()> -> _NONE_
<android.widget.ExpandableListView: void setGroupIndicator(android.graphics.drawable.Drawable)> -> _SINK_ 
<android.view.ViewGroup: void setLayoutMode(int)> -> _NONE_
<android.webkit.WebView: void setScrollBarStyle(int)> -> _SINK_ 
<android.content.res.TypedArray: float getDimension(int,float)> -> _SOURCE_
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor)> -> _SINK_ 
<android.database.sqlite.SQLiteStatement: void execute()> -> _NONE_
<android.graphics.Path: void computeBounds(android.graphics.RectF,boolean)> -> _NONE_
<android.nfc.tech.IsoDep: byte[] transceive(byte[])> -> _NONE_
<android.content.ComponentName: int describeContents()> -> _SINK_ 
<android.widget.AbsListView: int getBottomPaddingOffset()> -> _SOURCE_
<android.content.res.Resources: int getDimensionPixelSize(int)> -> _SOURCE_
<android.view.WindowManager$LayoutParams: java.lang.String toString()> -> _NONE_
<android.accounts.AuthenticatorException: void <init>(java.lang.Throwable)> -> _NONE_
<java.nio.ByteBuffer: byte[] array()> -> _NONE_
<android.app.Activity: void finishFromChild(android.app.Activity)> -> _NONE_
<java.nio.DoubleBuffer: int compareTo(java.lang.Object)> -> _NONE_
<java.lang.ClassNotFoundException: void <init>(java.lang.String,java.lang.Throwable)> -> _NONE_
<android.graphics.Paint: android.graphics.Xfermode setXfermode(android.graphics.Xfermode)> -> _SINK_ 
<java.lang.Integer: java.lang.String toBinaryString(int)> -> _SINK_ 
<android.os.Bundle: android.os.IBinder getBinder(java.lang.String)> -> _SOURCE_
<android.webkit.WebView: void setBackgroundColor(int)> -> _SINK_ 
<android.view.ViewGroup: void setPersistentDrawingCache(int)> -> _NONE_
<android.media.MediaFormat: void <init>()> -> _NONE_
<android.util.SparseBooleanArray: android.util.SparseBooleanArray clone()> -> _NONE_
<android.widget.AdapterView: void onLayout(boolean,int,int,int,int)> -> _NONE_
<java.lang.Boolean: void <init>(boolean)> -> _NONE_
<java.io.File: boolean delete()> -> _NONE_
<android.telephony.ServiceState: void setOperatorName(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_ 
<android.webkit.WebView: void clearSslPreferences()> -> _NONE_
<java.lang.ArrayStoreException: void <init>()> -> _NONE_
<java.lang.ClassLoader: java.util.Enumeration getSystemResources(java.lang.String)> -> _SOURCE_
<android.view.View: void measure(int,int)> -> _NONE_
<android.os.Looper: void prepareMainLooper()> -> _NONE_
<android.content.res.Resources: void flushLayoutCache()> -> _NONE_
<java.lang.ref.Reference: boolean enqueue()> -> _NONE_
<android.location.Criteria: boolean isBearingRequired()> -> _NONE_
<android.widget.ListView: void setDividerHeight(int)> -> _SINK_ 
<android.view.ActionProvider: void setVisibilityListener(android.view.ActionProvider$VisibilityListener)> -> _NONE_
<android.widget.TextView: void setSpannableFactory(android.text.Spannable$Factory)> -> _SINK_ 
<android.view.ViewGroup: boolean shouldDelayChildPressedState()> -> _NONE_
<android.content.ContextWrapper: void setWallpaper(java.io.InputStream)> -> _SINK_ 
<android.content.ContentResolver: android.content.res.AssetFileDescriptor openAssetFileDescriptor(android.net.Uri,java.lang.String)> -> _NONE_
<android.util.SparseBooleanArray: int size()> -> _SINK_ 
<android.widget.AdapterView: long getSelectedItemId()> -> _SOURCE_
<android.content.pm.PackageItemInfo: java.lang.CharSequence loadLabel(android.content.pm.PackageManager)> -> _NONE_
<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)> -> _NONE_
<android.net.wifi.WifiEnterpriseConfig: java.security.cert.X509Certificate getClientCertificate()> -> _SOURCE_
<java.lang.String: java.lang.CharSequence subSequence(int,int)> -> _NONE_
<android.net.DhcpInfo: java.lang.String toString()> -> _NONE_
<android.content.Context: java.lang.String getString(int)> -> _SOURCE_
<android.telephony.SignalStrength: int getGsmBitErrorRate()> -> _SOURCE_
<android.bluetooth.BluetoothGattCharacteristic: int getInstanceId()> -> _SOURCE_
<android.location.Location: void removeSpeed()> -> _NONE_
<android.telephony.SignalStrength: int getEvdoDbm()> -> _SOURCE_
<android.content.IntentSender$SendIntentException: void <init>(java.lang.Exception)> -> _NONE_
<java.lang.ref.Reference: void <init>()> -> _NONE_
<android.content.ClipDescription: void <init>(android.content.ClipDescription)> -> _NONE_
<java.math.BigInteger: java.math.BigInteger shiftRight(int)> -> _NONE_
<android.net.sip.SipSession: void makeCall(android.net.sip.SipProfile,java.lang.String,int)> -> _NONE_
<android.content.ContextWrapper: java.io.File getCacheDir()> -> _SOURCE_
<android.print.PrintAttributes: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<android.widget.TextView: void setIncludeFontPadding(boolean)> -> _SINK_ 
<android.view.View: void setHasTransientState(boolean)> -> _SINK_ 
<android.graphics.Rect: void offsetTo(int,int)> -> _NONE_
<android.location.LocationProvider: int getPowerRequirement()> -> _SOURCE_
<android.widget.AbsListView: android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()> -> _NONE_
<java.lang.Package: boolean isCompatibleWith(java.lang.String)> -> _NONE_
<android.webkit.WebView: void onChildViewAdded(android.view.View,android.view.View)> -> _NONE_
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase create(android.database.sqlite.SQLiteDatabase$CursorFactory)> -> _NONE_
<android.hardware.Camera$Parameters: void setGpsLatitude(double)> -> _SINK_ 
<java.nio.channels.SocketChannel: java.nio.channels.SocketChannel open()> -> _NONE_
<android.widget.TextView: void setHighlightColor(int)> -> _SINK_ 
<android.hardware.Camera: void addCallbackBuffer(byte[])> -> _NONE_
<java.util.ArrayList: boolean contains(java.lang.Object)> -> _NONE_
<java.lang.AssertionError: void <init>(java.lang.String,java.lang.Throwable)> -> _NONE_
<java.lang.Integer: float floatValue()> -> _NONE_
<android.net.Uri$Builder: android.net.Uri$Builder appendPath(java.lang.String)> -> _NONE_
<android.hardware.Camera$Parameters: java.util.List getSupportedSceneModes()> -> _SOURCE_
<java.util.concurrent.TimeUnit: void timedJoin(java.lang.Thread,long)> -> _NONE_
<android.content.ContentResolver: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)> -> _NONE_
<android.net.wifi.WifiManager$MulticastLock: void <init>(android.net.wifi.WifiManager)> -> _NONE_
<java.security.cert.CertificateException: void <init>()> -> _NONE_
<android.content.ContentProviderClient: int bulkInsert(android.net.Uri,android.content.ContentValues[])> -> _SINK_ 
<java.net.ServerSocket: void setSocketFactory(java.net.SocketImplFactory)> -> _SINK_ 
<android.os.PowerManager: void <init>()> -> _NONE_
<android.content.IntentFilter: boolean matchAction(java.lang.String)> -> _NONE_
<android.content.Intent: java.lang.String getAction()> -> _SOURCE_
<android.content.Intent: android.content.Intent createChooser(android.content.Intent,java.lang.CharSequence)> -> _SINK_ 
<java.util.AbstractList: void removeRange(int,int)> -> _NONE_
<android.graphics.Bitmap: android.graphics.Bitmap$Config getConfig()> -> _SOURCE_
<android.view.inputmethod.CompletionInfo: long getId()> -> _SOURCE_
<android.content.ClipData: android.content.ClipData newHtmlText(java.lang.CharSequence,java.lang.CharSequence,java.lang.String)> -> _NONE_
<android.widget.TextView: void beginBatchEdit()> -> _NONE_
<android.view.ActionProvider: void refreshVisibility()> -> _NONE_
<java.util.AbstractCollection: void <init>()> -> _NONE_
<org.apache.http.protocol.DefaultedHttpContext: void setAttribute(java.lang.String,java.lang.Object)> -> _SINK_ 
<android.webkit.WebSettings$LayoutAlgorithm: android.webkit.WebSettings$LayoutAlgorithm valueOf(java.lang.String)> -> _NONE_
<java.net.URLConnection: java.lang.Object getContent(java.lang.Class[])> -> _SOURCE_
<java.lang.Boolean: void <init>(java.lang.String)> -> _NONE_
<java.lang.ThreadGroup: int enumerate(java.lang.ThreadGroup[],boolean)> -> _SINK_ 
<android.content.res.Resources: float getFraction(int,int,int)> -> _SOURCE_
<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)> -> _NONE_
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)> -> _SOURCE_
<android.content.pm.FeatureInfo: java.lang.String toString()> -> _NONE_
<java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String)> -> _NONE_
<android.app.backup.BackupDataInputStream: int read(byte[],int,int)> -> _SINK_ 
<java.lang.String: boolean regionMatches(int,java.lang.String,int,int)> -> _NONE_
<android.widget.RemoteViews: void setTextViewCompoundDrawables(int,int,int,int,int)> -> _SINK_ 
<java.nio.channels.spi.SelectorProvider: java.nio.channels.spi.SelectorProvider provider()> -> _NONE_
<android.view.ViewGroup: android.view.ViewParent invalidateChildInParent(int[],android.graphics.Rect)> -> _NONE_
<java.lang.Integer: int parseInt(java.lang.String)> -> _SINK_ 
<android.nfc.tech.NfcB: void <init>()> -> _NONE_
<android.bluetooth.BluetoothClass: int hashCode()> -> _SINK_ 
<android.bluetooth.BluetoothServerSocket: android.bluetooth.BluetoothSocket accept()> -> _NONE_
<android.print.PrintAttributes$Resolution: java.lang.String toString()> -> _NONE_
<android.animation.LayoutTransition: void setDuration(long)> -> _SINK_ 
<android.view.View: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)> -> _NONE_
<android.app.Fragment: void onStop()> -> _NONE_
<android.net.wifi.WifiEnterpriseConfig: void <init>()> -> _NONE_
<android.webkit.WebSettings: android.webkit.WebSettings$LayoutAlgorithm getLayoutAlgorithm()> -> _SOURCE_
<android.webkit.WebView: boolean onKeyUp(int,android.view.KeyEvent)> -> _NONE_
<android.widget.AbsListView: android.view.ContextMenu$ContextMenuInfo getContextMenuInfo()> -> _SOURCE_
<android.view.accessibility.AccessibilityEvent: void recycle()> -> _NONE_
<java.nio.charset.MalformedInputException: void <init>(int)> -> _NONE_
<android.graphics.Path: void arcTo(android.graphics.RectF,float,float,boolean)> -> _NONE_
<android.app.Activity: void startActivityForResult(android.content.Intent,int,android.os.Bundle)> -> _SINK_ 
<java.nio.charset.CoderResult: void throwException()> -> _NONE_
<android.app.Activity: void setContentView(int)> -> _SINK_ 
<android.app.PendingIntent: android.os.UserHandle getCreatorUserHandle()> -> _SOURCE_
<org.apache.http.util.CharArrayBuffer: void setLength(int)> -> _SINK_ 
<android.webkit.WebSettings$TextSize: android.webkit.WebSettings$TextSize[] values()> -> _NONE_
<android.content.ContentValues: java.lang.Integer getAsInteger(java.lang.String)> -> _SOURCE_
<java.io.PrintWriter: void <init>(java.io.Writer,boolean)> -> _NONE_
<android.view.View: boolean onHoverEvent(android.view.MotionEvent)> -> _NONE_
<android.content.pm.PathPermission: java.lang.String getReadPermission()> -> _SOURCE_
<android.os.Message: android.os.Message obtain(android.os.Message)> -> _SINK_ 
<android.os.Bundle: void putShortArray(java.lang.String,short[])> -> _NONE_
<android.widget.RemoteViews: void setViewPadding(int,int,int,int,int)> -> _SINK_ 
<android.graphics.Bitmap: int getScaledHeight(android.util.DisplayMetrics)> -> _SOURCE_
<android.view.ViewGroup: void drawableStateChanged()> -> _NONE_
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)> -> _NONE_
<android.accessibilityservice.AccessibilityService: boolean onKeyEvent(android.view.KeyEvent)> -> _NONE_
<android.net.Uri: java.util.List getQueryParameters(java.lang.String)> -> _SOURCE_
<java.net.NetworkInterface: boolean isPointToPoint()> -> _NONE_
<android.view.View: void setPaddingRelative(int,int,int,int)> -> _SINK_ 
<android.view.MotionEvent$PointerProperties: boolean equals(java.lang.Object)> -> _NONE_
<android.app.Activity: void finishActivityFromChild(android.app.Activity,int)> -> _NONE_
<java.lang.reflect.Method: java.lang.String toGenericString()> -> _NONE_
<android.view.accessibility.AccessibilityRecord: void setContentDescription(java.lang.CharSequence)> -> _SINK_ 
<android.net.sip.SipManager: void unregister(android.net.sip.SipProfile,android.net.sip.SipRegistrationListener)> -> _NONE_
<android.app.Fragment: boolean isResumed()> -> _NONE_
<java.net.DatagramSocket: void setDatagramSocketImplFactory(java.net.DatagramSocketImplFactory)> -> _SINK_ 
<android.widget.TextView: void onFocusChanged(boolean,int,android.graphics.Rect)> -> _NONE_
<android.app.Notification$Builder: android.app.Notification$Builder setSound(android.net.Uri)> -> _SINK_ 
<android.database.sqlite.SQLiteDatabase: void setMaxSqlCacheSize(int)> -> _SINK_ 
<android.widget.ExpandableListView: long getPackedPositionForChild(int,int)> -> _SOURCE_
<java.lang.AbstractStringBuilder: int lastIndexOf(java.lang.String,int)> android.permission.STOP_APP_SWITCHES -> _NONE_
<android.view.animation.Animation: boolean willChangeBounds()> -> _NONE_
<android.content.res.ColorStateList: java.lang.String toString()> -> _NONE_
<android.webkit.WebView: int getContentHeight()> -> _SOURCE_
<android.widget.TextView: int getTotalPaddingEnd()> -> _SOURCE_
<java.util.Locale: java.lang.String getCountry()> -> _SOURCE_
<android.graphics.Region: boolean op(android.graphics.Region,android.graphics.Region,android.graphics.Region$Op)> -> _NONE_
<android.content.Loader: void commitContentChanged()> -> _NONE_
<android.graphics.Bitmap: int getScaledWidth(int)> -> _SOURCE_
<java.math.BigInteger: int compareTo(java.lang.Object)> -> _SINK_ 
<javax.security.auth.x500.X500Principal: java.lang.String getName()> -> _SOURCE_
<android.app.Activity: boolean moveTaskToBack(boolean)> -> _NONE_
<android.view.View: boolean isLayoutRequested()> -> _NONE_
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothDevice getRemoteDevice(java.lang.String)> -> _SOURCE_
<android.view.accessibility.AccessibilityNodeInfo: void getBoundsInScreen(android.graphics.Rect)> -> _SOURCE_
<android.print.PrintDocumentAdapter$WriteResultCallback: void onWriteFinished(android.print.PageRange[])> -> _NONE_
<android.widget.TextView: void setCompoundDrawablesRelativeWithIntrinsicBounds(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)> -> _SINK_ 
<java.lang.ClassLoader: java.lang.Class defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain)> -> _NONE_
<android.os.Parcel: android.os.Parcelable readParcelable(java.lang.ClassLoader)> -> _NONE_
<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPictureSize()> -> _SOURCE_
<java.nio.charset.Charset: java.lang.String displayName(java.util.Locale)> -> _NONE_
<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(int,int[])> -> _SOURCE_
<android.hardware.Camera$Parameters: boolean isVideoStabilizationSupported()> -> _NONE_
<java.io.FilterOutputStream: void close()> -> _NONE_
<android.app.Service: void <init>()> -> _NONE_
<android.view.KeyEvent: boolean isLongPress()> -> _NONE_
<android.app.Activity: boolean navigateUpToFromChild(android.app.Activity,android.content.Intent)> -> _SINK_ 
<java.io.PrintStream: void print(java.lang.Object)> -> _NONE_
<java.nio.channels.spi.AbstractSelectableChannel: java.lang.Object blockingLock()> -> _NONE_
<java.lang.Short: int hashCode()> -> _SINK_ 
<android.graphics.Paint$Join: android.graphics.Paint$Join valueOf(java.lang.String)> -> _SINK_ 
<android.hardware.Camera: void setAutoFocusMoveCallback(android.hardware.Camera$AutoFocusMoveCallback)> -> _SINK_ 
<android.content.Intent: int describeContents()> -> _SINK_ 
<android.os.UserHandle: java.lang.String toString()> -> _NONE_
<android.view.accessibility.AccessibilityNodeInfo: void setChecked(boolean)> -> _SINK_ 
<android.content.ContentValues: void put(java.lang.String,java.lang.String)> -> _NONE_
<java.lang.reflect.InvocationTargetException: void <init>(java.lang.Throwable)> -> _NONE_
<android.content.ContextWrapper: void unbindService(android.content.ServiceConnection)> -> _NONE_
<android.graphics.Matrix: boolean preScale(float,float)> -> _NONE_
<android.app.Fragment: boolean getUserVisibleHint()> -> _SOURCE_
<android.webkit.WebSettings: void setTextZoom(int)> -> _NONE_
<android.webkit.WebSettings: void setDatabaseEnabled(boolean)> -> _NONE_
<android.content.res.Configuration: void readFromParcel(android.os.Parcel)> -> _NONE_
<android.widget.TextView: void setText(int,android.widget.TextView$BufferType)> -> _SINK_ 
<android.os.Parcel: void writeBinderArray(android.os.IBinder[])> -> _NONE_
<android.content.ContentProvider: void shutdown()> -> _NONE_
<android.hardware.Camera$Parameters: boolean getVideoStabilization()> -> _SOURCE_
<android.view.ViewGroup: void attachLayoutAnimationParameters(android.view.View,android.view.ViewGroup$LayoutParams,int,int)> -> _NONE_
<android.net.sip.SipSession$Listener: void onCallEstablished(android.net.sip.SipSession,java.lang.String)> -> _NONE_
<android.os.Bundle: void putByteArray(java.lang.String,byte[])> -> _NONE_
<android.app.Service: void onConfigurationChanged(android.content.res.Configuration)> -> _NONE_
<java.lang.Character: boolean isUpperCase(int)> -> _NONE_
<java.lang.AbstractStringBuilder: void ensureCapacity(int)> -> _NONE_
<android.view.accessibility.AccessibilityEvent: void setAction(int)> -> _SINK_ 
<java.util.Locale: java.lang.String getDisplayCountry()> -> _SOURCE_
<android.os.CancellationSignal: boolean isCanceled()> -> _NONE_
<android.os.Debug$MemoryInfo: int getTotalPrivateDirty()> -> _SOURCE_
<android.print.PrintAttributes$Resolution: java.lang.String getId()> -> _SOURCE_
<android.view.View: int computeVerticalScrollExtent()> -> _NONE_
<android.content.pm.ComponentInfo: void dumpBack(android.util.Printer,java.lang.String)> -> _NONE_
<android.location.Location: void setBearing(float)> -> _SINK_ 
<android.view.ViewGroup: android.view.View getFocusedChild()> -> _SOURCE_
<android.telephony.gsm.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)> -> _SINK_ 
<java.lang.String: int hashCode()> -> _SINK_ 
<android.webkit.WebSettings: java.lang.String getSansSerifFontFamily()> -> _SOURCE_
<java.security.cert.CertPath: void <init>(java.lang.String)> -> _NONE_
<java.math.BigInteger: java.math.BigInteger modInverse(java.math.BigInteger)> -> _NONE_
<android.widget.RemoteViews: android.widget.RemoteViews clone()> -> _NONE_
<java.io.PrintWriter: java.io.PrintWriter printf(java.lang.String,java.lang.Object[])> -> _NONE_
<android.graphics.Typeface: void <init>()> -> _NONE_
<android.graphics.Paint: void setStrokeJoin(android.graphics.Paint$Join)> -> _SINK_ 
<android.view.View: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> -> _NONE_
<android.webkit.WebChromeClient: boolean onJsTimeout()> -> _NONE_
<java.lang.Character: char toTitleCase(char)> -> _SINK_ 
<android.accessibilityservice.AccessibilityService: void <init>()> -> _NONE_
<android.app.ActivityManager: void killBackgroundProcesses(java.lang.String)> -> _NONE_
<android.content.ContentValues: void put(java.lang.String,java.lang.Double)> -> _NONE_
<android.widget.AdapterView: void <init>(android.content.Context)> -> _NONE_
<android.view.KeyCharacterMap: char getDisplayLabel(int)> -> _SOURCE_
<android.content.ContextWrapper: void removeStickyBroadcast(android.content.Intent)> -> _SINK_ 
<android.util.SparseArray: int indexOfValue(java.lang.Object)> -> _SINK_ 
<java.util.Date: int getTimezoneOffset()> -> _SOURCE_
<android.bluetooth.BluetoothClass: int describeContents()> -> _SINK_ 
<java.util.AbstractMap: java.util.Set keySet()> -> _NONE_
<android.content.IntentFilter: void readFromXml(org.xmlpull.v1.XmlPullParser)> -> _NONE_
<android.app.Application: void registerActivityLifecycleCallbacks(android.app.Application$ActivityLifecycleCallbacks)> -> _NONE_
<android.app.Dialog: void onStart()> -> _NONE_
<android.media.MediaPlayer: android.media.MediaPlayer$TrackInfo[] getTrackInfo()> -> _SOURCE_
<android.content.ContentValues: boolean equals(java.lang.Object)> -> _NONE_
<android.view.View: boolean performHapticFeedback(int,int)> -> _NONE_
<android.view.View: boolean isDrawingCacheEnabled()> -> _NONE_
<java.nio.MappedByteBuffer: boolean isLoaded()> -> _NONE_
<android.graphics.Canvas: void drawPaint(android.graphics.Paint)> -> _NONE_
<java.security.Timestamp: java.security.cert.CertPath getSignerCertPath()> -> _SOURCE_
<java.lang.Long: int bitCount(long)> -> _SINK_ 
<android.view.View: void removeOnAttachStateChangeListener(android.view.View$OnAttachStateChangeListener)> -> _NONE_
<android.view.InputDevice: java.lang.String getName()> -> _SOURCE_
<android.net.wifi.WifiConfiguration: java.lang.String toString()> -> _NONE_
<android.media.MediaPlayer: void setOnInfoListener(android.media.MediaPlayer$OnInfoListener)> -> _SINK_ 
<android.view.View: void clearAnimation()> -> _NONE_
<android.widget.TextView: int getTotalPaddingTop()> -> _SOURCE_
<android.widget.AbsoluteLayout: boolean checkLayoutParams(android.view.ViewGroup$LayoutParams)> -> _NONE_
<android.webkit.WebView: void removeJavascriptInterface(java.lang.String)> -> _NONE_
<java.security.spec.ECPoint: void <init>(java.math.BigInteger,java.math.BigInteger)> -> _NONE_
<android.content.Loader: void reset()> -> _NONE_
<android.content.res.TypedArray: int length()> -> _SINK_ 
<java.security.spec.EllipticCurve: void <init>(java.security.spec.ECField,java.math.BigInteger,java.math.BigInteger)> -> _NONE_
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getLabeledBy()> -> _SOURCE_
<android.graphics.Matrix: void getValues(float[])> -> _SOURCE_
<java.io.File: int compareTo(java.io.File)> -> _SINK_ 
<java.net.Socket: java.net.SocketAddress getRemoteSocketAddress()> -> _SOURCE_
<android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityEvent obtain()> -> _NONE_
<android.os.PowerManager$WakeLock: void acquire(long)> -> _NONE_
<android.graphics.Bitmap$Config: void <clinit>()> -> _NONE_
<android.view.View: void jumpDrawablesToCurrentState()> -> _NONE_
<android.os.Parcel: android.os.IBinder[] createBinderArray()> -> _NONE_
<android.view.accessibility.AccessibilityNodeInfo: int getMovementGranularities()> -> _SOURCE_
<android.content.ContentProviderClient: android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String)> -> _NONE_
<android.view.accessibility.AccessibilityNodeInfo: void recycle()> -> _NONE_
<java.util.BitSet: boolean get(int)> -> _SOURCE_
<android.widget.RemoteViews: void setDisplayedChild(int,int)> -> _SINK_ 
<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.StringBuffer)> -> _NONE_
<android.content.res.Resources: android.content.res.Resources$Theme newTheme()> -> _NONE_
<android.graphics.DrawFilter: void <init>()> -> _NONE_
<android.view.DragEvent: boolean getResult()> -> _SOURCE_
<java.nio.charset.CodingErrorAction: void <init>()> -> _NONE_
<android.widget.TextView: boolean getDefaultEditable()> -> _SOURCE_
<java.security.cert.CertificateExpiredException: void <init>()> -> _NONE_
<android.graphics.Rect: void <init>()> -> _NONE_
<android.app.Service: void onDestroy()> -> _NONE_
<android.app.Activity: void setSecondaryProgress(int)> -> _SINK_ 
<android.webkit.WebView: void destroy()> -> _NONE_
<android.widget.TextView: boolean onKeyDown(int,android.view.KeyEvent)> -> _NONE_
<java.lang.String: void <init>(byte[],java.lang.String)> -> _NONE_
<android.app.Activity: void onPrepareDialog(int,android.app.Dialog)> -> _NONE_
<java.security.cert.CertificateExpiredException: void <init>(java.lang.String)> -> _NONE_
<android.animation.PropertyValuesHolder: void setEvaluator(android.animation.TypeEvaluator)> -> _SINK_ 
<android.location.Location: void setAltitude(double)> -> _SINK_ 
<java.nio.DoubleBuffer: void <init>()> -> _NONE_
<android.graphics.Bitmap: int getPixel(int,int)> -> _SOURCE_
<java.lang.Thread: void suspend()> -> _NONE_
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup,boolean)> -> _NONE_
<java.net.Socket: void setTrafficClass(int)> -> _SINK_ 
<android.webkit.WebView: void clearView()> -> _NONE_
<android.webkit.SslErrorHandler: void <init>()> -> _NONE_
<android.webkit.WebSettings: void setDatabasePath(java.lang.String)> -> _NONE_
<android.view.View: boolean dispatchDragEvent(android.view.DragEvent)> -> _NONE_
<java.lang.StringBuilder: java.lang.String substring(int,int)> -> _NONE_
<java.lang.StringBuffer: java.lang.StringBuffer append(boolean)> -> _NONE_
<java.security.cert.CertificateException: void <init>(java.lang.String)> -> _NONE_
<android.widget.TextView: boolean getLinksClickable()> -> _SOURCE_
<java.lang.Thread: void stop()> -> _NONE_
<android.graphics.Rect: int centerX()> -> _SINK_ 
<android.widget.TextView: int getLeftPaddingOffset()> -> _SOURCE_
<android.view.View: int generateViewId()> -> _SINK_ 
<android.widget.TextView: android.text.method.KeyListener getKeyListener()> -> _SOURCE_
<java.util.ArrayList: java.util.Iterator iterator()> -> _NONE_
<java.lang.Float: int intValue()> -> _SINK_ 
<java.lang.Character: char highSurrogate(int)> -> _SINK_ 
<android.view.accessibility.AccessibilityNodeInfo: boolean isEnabled()> -> _NONE_
<android.webkit.WebSettings: void setMinimumFontSize(int)> -> _NONE_
<android.net.sip.SipProfile: int describeContents()> -> _SINK_ 
<java.lang.Character: boolean isIdentifierIgnorable(char)> -> _NONE_
<android.content.res.Resources: java.lang.String getResourceEntryName(int)> -> _SOURCE_
<java.net.DatagramPacket: void setPort(int)> -> _SINK_ 
<android.view.ViewGroup$MarginLayoutParams: void setMarginEnd(int)> -> _SINK_ 
<android.webkit.ConsoleMessage: int lineNumber()> -> _NONE_
<android.view.ViewGroup: android.view.ViewGroupOverlay getOverlay()> -> _SOURCE_
<android.widget.TextView: void onSelectionChanged(int,int)> -> _NONE_
<android.net.wifi.WifiManager$MulticastLock: void finalize()> -> _NONE_
<android.graphics.Canvas$EdgeType: android.graphics.Canvas$EdgeType valueOf(java.lang.String)> -> _SINK_ 
<android.net.Uri$Builder: void <init>()> -> _NONE_
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteStatement compileStatement(java.lang.String)> -> _NONE_
<android.text.style.URLSpan: void <init>(android.os.Parcel)> -> _NONE_
<java.lang.NumberFormatException: void <init>()> -> _NONE_
<android.graphics.Rect: boolean intersect(android.graphics.Rect)> -> _NONE_
<android.view.accessibility.AccessibilityNodeInfo: boolean isChecked()> -> _NONE_
<android.os.Parcel: void appendFrom(android.os.Parcel,int,int)> -> _NONE_
<android.view.DragEvent: android.content.ClipDescription getClipDescription()> -> _SOURCE_
<android.view.KeyEvent: boolean dispatch(android.view.KeyEvent$Callback,android.view.KeyEvent$DispatcherState,java.lang.Object)> -> _NONE_
<android.view.animation.Animation: void setRepeatMode(int)> -> _NONE_
<android.app.Notification$Builder: android.app.Notification$Builder setVibrate(long[])> -> _SINK_ 
<android.app.Notification$Style: android.app.Notification build()> -> _NONE_
<android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_ 
<android.net.Uri: void writeToParcel(android.os.Parcel,android.net.Uri)> -> _NONE_
<android.graphics.Matrix: java.lang.String toString()> -> _NONE_
<android.util.AndroidException: void <init>(java.lang.Exception)> -> _NONE_
<android.content.pm.InstrumentationInfo: java.lang.String toString()> -> _NONE_
<android.telephony.ServiceState: boolean getIsManualSelection()> -> _SOURCE_
<java.security.cert.CertificateEncodingException: void <init>(java.lang.String,java.lang.Throwable)> -> _NONE_
<android.os.storage.OnObbStateChangeListener: void onObbStateChange(java.lang.String,int)> -> _NONE_
<java.util.ArrayList: boolean addAll(java.util.Collection)> -> _NONE_
<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder replaceWith(java.lang.String)> -> _NONE_
<java.util.ArrayList: void <init>()> -> _NONE_
<android.nfc.NfcEvent: void <init>()> -> _NONE_
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator yBy(float)> -> _NONE_
<java.security.NoSuchProviderException: void <init>(java.lang.String)> -> _NONE_
<android.content.Intent: android.content.Intent setFlags(int)> -> _SINK_ 
<android.widget.TextView: void setEditableFactory(android.text.Editable$Factory)> -> _SINK_ 
<java.util.UUID: long getLeastSignificantBits()> android.permission.STOP_APP_SWITCHES -> _SOURCE_
<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder clone()> -> _NONE_
<android.app.PendingIntent: void send()> -> _NONE_
<java.lang.Character: int getType(char)> -> _SOURCE_
<android.view.View: android.view.ViewParent getParentForAccessibility()> -> _SOURCE_
<android.webkit.WebSettings: java.lang.String getFixedFontFamily()> -> _SOURCE_
<android.os.Handler: android.os.Message obtainMessage(int,int,int)> -> _SOURCE_
<android.nfc.NdefMessage: int hashCode()> -> _SINK_ 
<android.view.View: int[] mergeDrawableStates(int[],int[])> -> _NONE_
<android.webkit.WebSettings: boolean getSaveFormData()> -> _SOURCE_
<java.lang.ClassLoader: java.lang.Package getPackage(java.lang.String)> -> _SOURCE_
<java.io.Writer: void <init>(java.lang.Object)> -> _NONE_
<java.io.Reader: boolean ready()> -> _NONE_
<android.graphics.Path: boolean isRect(android.graphics.RectF)> -> _NONE_
<android.graphics.Region: boolean equals(java.lang.Object)> -> _NONE_
<java.io.File: boolean equals(java.lang.Object)> -> _NONE_
<android.graphics.Canvas: void drawPicture(android.graphics.Picture)> -> _NONE_
<android.widget.TextView: void setExtractedText(android.view.inputmethod.ExtractedText)> -> _SINK_ 
<android.webkit.WebView: void savePassword(java.lang.String,java.lang.String,java.lang.String)> -> _NONE_
<java.net.InetAddress: boolean isReachable(int)> -> _NONE_
<android.net.wifi.WifiEnterpriseConfig: void setPhase2Method(int)> -> _SINK_ 
<android.view.View: boolean hasTransientState()> -> _NONE_
<java.net.NetworkInterface: java.lang.String toString()> -> _NONE_
<android.widget.ExpandableListView: void onRtlPropertiesChanged(int)> -> _NONE_
<java.lang.String: java.lang.String valueOf(char)> -> _SINK_ 
<android.view.MotionEvent: float getRawY()> -> _SOURCE_
<android.view.View: void invalidate()> -> _NONE_
<android.graphics.Region: boolean getBoundaryPath(android.graphics.Path)> -> _SOURCE_
<android.widget.RemoteViews: void setByte(int,java.lang.String,byte)> -> _SINK_ 
<android.hardware.Camera: android.hardware.Camera open()> android.permission.CAMERA -> _NONE_
<android.view.View: int[] onCreateDrawableState(int)> -> _NONE_
<android.view.View: boolean requestFocusFromTouch()> -> _NONE_
<android.content.pm.ResolveInfo: java.lang.String toString()> -> _NONE_
<android.widget.RemoteViews: void <init>(android.widget.RemoteViews,android.widget.RemoteViews)> -> _NONE_
<android.animation.Animator: void addPauseListener(android.animation.Animator$AnimatorPauseListener)> -> _NONE_
<android.app.Dialog: void setContentView(int)> -> _SINK_ 
<android.webkit.WebView: void saveWebArchive(java.lang.String,boolean,android.webkit.ValueCallback)> -> _NONE_
<org.apache.http.util.CharArrayBuffer: char[] toCharArray()> -> _NONE_
<java.lang.ThreadGroup: boolean allowThreadSuspension(boolean)> -> _NONE_
<android.bluetooth.BluetoothAdapter: boolean startLeScan(android.bluetooth.BluetoothAdapter$LeScanCallback)> -> _SINK_ 
<android.widget.Scroller: int getFinalX()> -> _SOURCE_
<java.nio.channels.FileChannel$MapMode: void <clinit>()> -> _NONE_
<java.net.DatagramPacket: void setData(byte[],int,int)> -> _SINK_ 
<java.security.NoSuchProviderException: void <init>()> -> _NONE_
<android.graphics.Rasterizer: void <init>()> -> _NONE_
<android.hardware.Camera$Parameters: void setPreviewFpsRange(int,int)> -> _SINK_ 
<java.net.URLStreamHandler: java.net.InetAddress getHostAddress(java.net.URL)> -> _SOURCE_
<android.view.ActionMode: void <init>()> -> _NONE_
<android.graphics.Rect: void union(int,int)> -> _NONE_
<android.view.accessibility.AccessibilityNodeInfo: boolean performAction(int,android.os.Bundle)> -> _NONE_
<java.lang.Short: java.lang.String toString(short)> -> _SINK_ 
<android.widget.TextView: void setTypeface(android.graphics.Typeface)> -> _SINK_ 
<android.print.PrintDocumentInfo: int getPageCount()> -> _SOURCE_
<android.os.Messenger: android.os.IBinder getBinder()> -> _SOURCE_
<java.lang.NumberFormatException: void <init>(java.lang.String)> -> _NONE_
<java.util.AbstractCollection: boolean contains(java.lang.Object)> -> _NONE_
<android.os.Bundle: float getFloat(java.lang.String,float)> -> _SOURCE_
<android.webkit.WebView: java.lang.String getUrl()> -> _SOURCE_
<java.net.URLConnection: java.lang.String guessContentTypeFromName(java.lang.String)> -> _NONE_
<android.bluetooth.BluetoothGattDescriptor: boolean setValue(byte[])> -> _SINK_ 
<android.view.WindowId$FocusObserver: void <init>()> -> _NONE_
<javax.security.auth.x500.X500Principal: java.lang.String getName(java.lang.String)> -> _SOURCE_
<android.view.View: void getFocusedRect(android.graphics.Rect)> -> _SOURCE_
<android.telephony.TelephonyManager: boolean hasIccCard()> -> _NONE_
<android.webkit.WebView: boolean zoomIn()> -> _NONE_
<android.print.PageRange: boolean equals(java.lang.Object)> -> _NONE_
<android.provider.Settings$Secure: boolean putFloat(android.content.ContentResolver,java.lang.String,float)> -> _NONE_
<android.os.Bundle: void putBoolean(java.lang.String,boolean)> -> _NONE_
<android.app.Fragment: boolean isAdded()> -> _NONE_
<java.nio.CharBuffer: java.nio.CharBuffer append(java.lang.CharSequence,int,int)> -> _NONE_
<android.hardware.Camera$Parameters: java.util.List getSupportedPreviewFormats()> -> _SOURCE_
<android.nfc.tech.IsoDep: void setTimeout(int)> -> _SINK_ 
<android.provider.Settings$SettingNotFoundException: void <init>(java.lang.String)> -> _NONE_
<java.lang.annotation.ElementType: java.lang.annotation.ElementType[] values()> -> _NONE_
<java.math.BigInteger: java.math.BigInteger flipBit(int)> -> _NONE_
<android.widget.TextView: int getMinWidth()> -> _SOURCE_
<android.graphics.Canvas: boolean clipPath(android.graphics.Path,android.graphics.Region$Op)> -> _NONE_
<java.lang.Object: java.lang.Object clone()> -> _NONE_
<java.lang.Byte: byte byteValue()> -> _NONE_
<android.bluetooth.BluetoothSocket: java.io.OutputStream getOutputStream()> -> _SOURCE_
<android.content.res.TypedArray: boolean getValue(int,android.util.TypedValue)> -> _SOURCE_
<android.widget.RemoteViews: void setTextViewText(int,java.lang.CharSequence)> -> _SINK_ 
<android.media.MediaFormat: void setLong(java.lang.String,long)> -> _SINK_ 
<java.nio.CharBuffer: int arrayOffset()> -> _NONE_
<java.util.BitSet: void and(java.util.BitSet)> -> _NONE_
<android.widget.TextView: void onScrollChanged(int,int,int,int)> -> _NONE_
<android.os.Parcel: android.util.SparseBooleanArray readSparseBooleanArray()> -> _NONE_
<android.widget.TextView: int getMarqueeRepeatLimit()> -> _SOURCE_
<android.bluetooth.BluetoothGatt: java.util.List getDevicesMatchingConnectionStates(int[])> -> _SOURCE_
<java.util.AbstractMap: int hashCode()> -> _NONE_
<android.widget.TextView: void setAutoLinkMask(int)> -> _SINK_ 
<android.content.ContextWrapper: void enforceCallingPermission(java.lang.String,java.lang.String)> -> _NONE_
<android.view.ViewOverlay: void clear()> -> _NONE_
<android.text.Layout: float getLineWidth(int)> -> _SOURCE_
<java.lang.Character: void <init>(char)> -> _NONE_
<android.net.wifi.WifiEnterpriseConfig: java.security.cert.X509Certificate getCaCertificate()> -> _SOURCE_
<java.nio.LongBuffer: int compareTo(java.nio.LongBuffer)> -> _NONE_
<android.view.View: void findViewsWithText(java.util.ArrayList,java.lang.CharSequence,int)> -> _NONE_
<java.net.Socket: void <init>(java.net.InetAddress,int)> -> _NONE_
<android.content.ContentValues: void putNull(java.lang.String)> -> _NONE_
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable getCurrent()> -> _SOURCE_
<javax.security.cert.CertificateException: void <init>()> -> _NONE_
<android.content.ClipData: int getItemCount()> -> _SOURCE_
<android.print.PrintAttributes$Margins: int getBottomMils()> -> _SOURCE_
<java.lang.StringBuffer: java.lang.StringBuffer appendCodePoint(int)> -> _NONE_
<java.security.CodeSource: java.net.URL getLocation()> -> _SOURCE_
<android.content.BroadcastReceiver: void setOrderedHint(boolean)> -> _NONE_
<java.lang.Character: boolean isISOControl(int)> -> _NONE_
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)> -> _SINK_ 
<android.view.View: int getRight()> -> _SOURCE_
<android.view.View: boolean checkInputConnectionProxy(android.view.View)> -> _NONE_
<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup)> -> _NONE_
<android.widget.RemoteViews: void <init>(android.os.Parcel)> -> _NONE_
<android.media.MediaFormat: int getInteger(java.lang.String)> -> _SOURCE_
<android.view.MotionEvent: float getPressure(int)> -> _SOURCE_
<java.util.Date: int hashCode()> -> _SINK_ 
<android.widget.Scroller: void <init>(android.content.Context,android.view.animation.Interpolator,boolean)> -> _NONE_
<java.lang.Float: java.lang.Float valueOf(java.lang.String)> -> _SINK_ 
<android.os.Parcel: char[] createCharArray()> -> _NONE_
<android.print.PrintAttributes$Margins: java.lang.String toString()> -> _NONE_
<java.net.DatagramSocket: void <init>(java.net.SocketAddress)> -> _NONE_
<android.webkit.WebView: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider()> -> _SOURCE_
<java.io.UnsupportedEncodingException: void <init>(java.lang.String)> -> _NONE_
<android.content.ContextWrapper: android.content.Context createConfigurationContext(android.content.res.Configuration)> -> _NONE_
<android.view.View: boolean dispatchGenericPointerEvent(android.view.MotionEvent)> -> _NONE_
<android.widget.AbsListView: void setVerticalScrollbarPosition(int)> -> _NONE_
<android.content.ComponentName: void <init>(android.content.Context,java.lang.Class)> -> _NONE_
<java.lang.String: void <init>(char[],int,int)> -> _NONE_
<android.view.MenuInflater: void inflate(int,android.view.Menu)> -> _NONE_
<android.app.TaskStackBuilder: android.app.TaskStackBuilder addNextIntentWithParentStack(android.content.Intent)> -> _SINK_ 
<java.io.OutputStream: void <init>()> -> _NONE_
<android.os.Message: android.os.Bundle getData()> -> _SOURCE_
<java.io.File: long lastModified()> -> _NONE_
<org.apache.http.util.ByteArrayBuffer: boolean isEmpty()> -> _NONE_
<android.accounts.AccountAuthenticatorActivity: void onCreate(android.os.Bundle)> -> _NONE_
<android.accounts.AccountManager: java.lang.String getPassword(android.accounts.Account)> -> _SOURCE_
<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)> -> _NONE_
<android.app.LocalActivityManager: void removeAllActivities()> -> _NONE_
<java.net.URL: java.lang.Object getContent()> -> _SOURCE_
<android.widget.ListView: void addFooterView(android.view.View)> -> _NONE_
<android.view.View$AccessibilityDelegate: void onInitializeAccessibilityNodeInfo(android.view.View,android.view.accessibility.AccessibilityNodeInfo)> -> _NONE_
<java.lang.Thread: void resume()> -> _NONE_
<android.bluetooth.BluetoothGatt: int getConnectionState(android.bluetooth.BluetoothDevice)> -> _SOURCE_
<java.security.ProtectionDomain: boolean implies(java.security.Permission)> -> _NONE_
<android.widget.TextView: int getCompoundPaddingStart()> -> _SOURCE_
<java.io.UnsupportedEncodingException: void <init>()> -> _NONE_
<android.view.LayoutInflater: android.content.Context getContext()> -> _SOURCE_
<android.view.KeyEvent: boolean isCtrlPressed()> -> _NONE_
<android.nfc.NdefMessage: int describeContents()> -> _SINK_ 
<android.content.ComponentName: java.lang.String flattenToString()> -> _NONE_
<android.view.animation.LayoutAnimationController$AnimationParameters: void <init>()> -> _NONE_
<android.webkit.WebView: void setLayoutParams(android.view.ViewGroup$LayoutParams)> -> _SINK_ 
<java.lang.Long: void <init>(java.lang.String)> -> _NONE_
<android.view.KeyEvent: boolean hasModifiers(int)> -> _NONE_
<android.graphics.SurfaceTexture: void <init>(int)> -> _NONE_
<android.view.View: void setBackgroundResource(int)> -> _SINK_ 
<android.view.WindowManager$LayoutParams: void <init>(int,int,int,int,int,int,int)> -> _NONE_
<android.media.MediaPlayer: void start()> -> _NONE_
<java.lang.Character: boolean isMirrored(char)> -> _NONE_
<java.lang.StringBuffer: int codePointCount(int,int)> -> _SINK_ 
<android.content.Intent: android.content.Intent getIntent(java.lang.String)> -> _SOURCE_
<android.hardware.Camera$Parameters: float getExposureCompensationStep()> -> _SOURCE_
<android.animation.LayoutTransition: void setStartDelay(int,long)> -> _SINK_ 
<javax.security.cert.CertificateException: void <init>(java.lang.String)> -> _NONE_
<java.net.DatagramPacket: int getOffset()> -> _SOURCE_
<android.bluetooth.BluetoothGattService: java.util.List getCharacteristics()> -> _SOURCE_
<android.view.Display: float getRefreshRate()> -> _SOURCE_
<java.lang.StringBuilder: void ensureCapacity(int)> -> _NONE_
<java.lang.LinkageError: void <init>(java.lang.String,java.lang.Throwable)> -> _NONE_
<android.widget.TextView: void drawableStateChanged()> -> _NONE_
<android.app.Fragment: void setRetainInstance(boolean)> -> _SINK_ 
<android.content.res.ColorStateList: android.content.res.ColorStateList withAlpha(int)> -> _NONE_
<android.os.WorkSource: boolean add(android.os.WorkSource)> -> _NONE_
<android.view.accessibility.AccessibilityNodeInfo: void setAccessibilityFocused(boolean)> -> _SINK_ 
<java.lang.AbstractStringBuilder: java.lang.String substring(int,int)> -> _NONE_
<android.view.InputDevice$MotionRange: void <init>()> -> _NONE_
<android.content.pm.PermissionInfo: void writeToParcel(android.os.Parcel,int)> -> _NONE_
<android.widget.AbsListView: void smoothScrollToPosition(int,int)> -> _NONE_
<java.security.cert.CertificateParsingException: void <init>(java.lang.String,java.lang.Throwable)> -> _NONE_
<android.nfc.NdefRecord: android.nfc.NdefRecord createUri(android.net.Uri)> -> _SINK_ 
<android.location.Criteria: boolean isAltitudeRequired()> -> _NONE_
<android.location.LocationManager: android.location.GpsStatus getGpsStatus(android.location.GpsStatus)> -> _SOURCE_
<java.io.PrintWriter: void close()> -> _NONE_
<java.lang.String: java.lang.String concat(java.lang.String)> -> _NONE_
<java.lang.StringBuilder: java.lang.StringBuilder replace(int,int,java.lang.String)> -> _NONE_
<android.view.View$AccessibilityDelegate: boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent)> -> _NONE_
<android.content.ContextWrapper: void unregisterReceiver(android.content.BroadcastReceiver)> -> _NONE_
<android.animation.LayoutTransition: void removeTransitionListener(android.animation.LayoutTransition$TransitionListener)> -> _NONE_
<java.lang.IncompatibleClassChangeError: void <init>(java.lang.String)> -> _NONE_
<android.bluetooth.BluetoothGattCharacteristic: boolean setValue(int,int,int,int)> -> _SINK_ 
<android.content.IntentFilter$AuthorityEntry: int match(android.net.Uri)> -> _SINK_ 
<android.widget.AbsListView: void setScrollingCacheEnabled(boolean)> -> _NONE_
<android.view.ViewGroup: void dispatchThawSelfOnly(android.util.SparseArray)> -> _NONE_
<android.os.Message: void recycle()> -> _NONE_
<java.lang.Character: boolean isDefined(char)> -> _NONE_
<android.webkit.WebView: void setFindListener(android.webkit.WebView$FindListener)> -> _NONE_
<android.view.View: float getPivotX()> -> _SOURCE_
<android.content.Intent: java.lang.String resolveType(android.content.Context)> -> _NONE_
<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char[],int,int)> -> _NONE_
<android.net.sip.SipSession: void unregister()> -> _NONE_
<java.lang.StringBuffer: java.lang.StringBuffer insert(int,char[])> -> _NONE_
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.util.DisplayMetrics,int[],int,int,android.graphics.Bitmap$Config)> -> _SINK_ 
<java.lang.IncompatibleClassChangeError: void <init>()> -> _NONE_
<java.lang.StringBuffer: int codePointAt(int)> -> _SINK_ 
<android.os.Bundle: void putCharSequenceArray(java.lang.String,java.lang.CharSequence[])> -> _NONE_
<android.view.View: float getY()> -> _SOURCE_
<android.content.res.Resources: java.lang.String getResourceTypeName(int)> -> _SOURCE_
<android.view.ViewGroup: android.view.animation.Animation$AnimationListener getLayoutAnimationListener()> -> _SOURCE_
<java.nio.ShortBuffer: void <init>()> -> _NONE_
<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])> -> _SINK_ 
<java.io.PrintStream: void <init>(java.io.OutputStream)> -> _NONE_
<java.net.DatagramSocket: void setReuseAddress(boolean)> -> _SINK_ 
<android.content.res.Resources: android.content.res.XmlResourceParser getAnimation(int)> -> _SOURCE_
<android.view.Window: void setUiOptions(int)> -> _NONE_
<android.content.IntentSender: android.content.IntentSender readIntentSenderOrNullFromParcel(android.os.Parcel)> -> _NONE_
<org.apache.http.util.ByteArrayBuffer: byte[] buffer()> -> _NONE_
<android.graphics.Path: void addCircle(float,float,float,android.graphics.Path$Direction)> -> _NONE_
<android.net.wifi.WifiManager: void setTdlsEnabledWithMacAddress(java.lang.String,boolean)> -> _SINK_ 
<android.view.View: void buildDrawingCache(boolean)> -> _NONE_
<android.app.PendingIntent: android.app.PendingIntent readPendingIntentOrNullFromParcel(android.os.Parcel)> -> _SINK_ 
